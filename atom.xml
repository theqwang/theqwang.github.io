<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>theqwang&#39;blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://theqwang.github.io/"/>
  <updated>2017-03-17T09:05:37.908Z</updated>
  <id>https://theqwang.github.io/</id>
  
  <author>
    <name>theqwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在多台电脑间使用hexo</title>
    <link href="https://theqwang.github.io/2017/03/17/%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E9%97%B4%E4%BD%BF%E7%94%A8hexo/"/>
    <id>https://theqwang.github.io/2017/03/17/在多台电脑间使用hexo/</id>
    <published>2017-03-17T03:25:03.000Z</published>
    <updated>2017-03-17T09:05:37.908Z</updated>
    
    <content type="html"><![CDATA[<p>背景：<br>这个博客最初是还在学校的时候，使用 <code>hexo + github pages</code> 构建，代码都在我的笔记本里。</p>
<p>需求：<br>工作以后大部分时间都是在用办公室里的电脑，现在想在笔记本和办公室的电脑上都能用hexo写博客。</p>
<p>思路：<br>通过 git 的分支实现。hexo 生成的静态博客文件默认放在 master 分支上，可以新创建一个 hexo 分支，把 hexo 的源文件都放在 hexo 分支上，换新电脑时，直接 git clone hexo 分支即可。<br><a id="more"></a></p>
<h2 id="1-分析"><a href="#1-分析" class="headerlink" title="1.分析"></a>1.分析</h2><p>新建一个 hexo 分支，把 hexo 的源文件都放到这个分支上。但是源文件有70多M，并不需要把所有文件都放在分支上。<code>node_modules</code>目录可以用 <code>npm install</code> 命令生成，<code>public</code>目录可以使用 <code>hexo g</code> 命令生成，所以可以把这两个目录放在 <code>.gitignore</code> 里忽略提交。</p>
<h2 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h2><h4 id="在原来的笔记本上："><a href="#在原来的笔记本上：" class="headerlink" title="在原来的笔记本上："></a>在原来的笔记本上：</h4><p>1.创建新的分支 hexo 并切换到这个分支上。</p>
<p>2.在博客的目录下创建 <code>.gitignore</code> 文件，在文件里写入：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node_modules/</div><div class="line"><span class="keyword">public</span>/</div></pre></td></tr></table></figure>
<p>3.在 hexo 分支下，git add、git commit 提交所有文件，最后把 hexo 分支 push 到 github 上。这时 github 上有两个分支：master 和 hexo，master 分支是博客的静态文件，hexo 分支是博客的源代码。</p>
<h4 id="在新电脑上："><a href="#在新电脑上：" class="headerlink" title="在新电脑上："></a>在新电脑上：</h4><p>1.安装 git。在 git bash 下输入以下命令配置用户名和邮箱，邮箱是自己 github 账号的邮箱：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user<span class="selector-class">.name</span> <span class="string">"Your Name"</span></div><div class="line">git config --global user<span class="selector-class">.email</span> <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure>
<p>2.执行以下命令生成 SSH key：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> "<span class="selector-tag">youremail</span>@<span class="keyword">example</span>.<span class="keyword">com</span>"</div></pre></td></tr></table></figure>
<p>其中 <code>youremail@example.com</code> 是你的 github 邮箱，剩下的一路回车即可。最后会在用户主目录下生成一个 <code>.ssh</code> 目录，该目录下有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个文件就是 SSH 的密钥对，<code>id_rsa</code> 是私钥，<code>id_rsa.pub</code> 是公钥。</p>
<p>3.登录 github，在 settings 里找到 SSH and GPG keys，创建新的 SSH key，title 可以是任意值，key 文本框里粘贴 id_rsa.pub 里的内容，最后保存。</p>
<p>4.安装 Node.js。在 git bash 里输入以下命令安装 hexo：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure>
<p>5.新建博客目录，在该目录打开 git bash，执行：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git init</span></div></pre></td></tr></table></figure>
<p>初始化该目录。</p>
<p>6.使用 git clone 把 github 上的 hexo 分支复制到博客目录。指明如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone -<span class="selector-tag">b</span> hexo git@github<span class="selector-class">.com</span>:xxx/xxx<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></div></pre></td></tr></table></figure>
<p><strong>注意默认 git clone 命令只会复制 master 分支，这里需要用 -b 指明只克隆 hexo 分支。因为源代码都放在了hexo分支上，并不需要对master分支进行操作。</strong></p>
<p>7.克隆完以后，执行 </p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span></div></pre></td></tr></table></figure>
<p>安装所有依赖（生成 <code>node_modules</code> 目录）。</p>
<p>8.执行</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo g</span></div></pre></td></tr></table></figure>
<p>生成博客的静态文件（即 <code>public</code> 目录）</p>
<p>9.执行</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="type">post</span> <span class="string">"文章标题"</span></div></pre></td></tr></table></figure>
<p>创建新文章，然后可以在 <code>source/_posts/</code> 目录下找到对应的文章并可以编辑。</p>
<p>10.执行</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo s</span></div></pre></td></tr></table></figure>
<p>运行 hexo 服务器，在浏览器中打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 查看博客是否已经可以运行。</p>
<p>11.执行</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d</span></div></pre></td></tr></table></figure>
<p>可以把博客的静态文件部署到 github 上。</p>
<p><strong>注意在 _config.yml 中 deploy 的 branch 值必须为 master，指明 hexo d 命令是把博客静态文件推到 master 分支上。</strong></p>
<p>12.最后把修改推到 github 上的 hexo 分支：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">"commit message"</span></div><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<p><strong>注意：以上所有操作都是在 hexo分支下操作的。</strong></p>
<h2 id="3-日常操作流程"><a href="#3-日常操作流程" class="headerlink" title="3.日常操作流程"></a>3.日常操作流程</h2><p>1.换到不同电脑上时，首先拉下 github 上的 hexo分支的更新：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git pull origin hexo</span></div></pre></td></tr></table></figure></p>
<p>2.编写、修改博客，并使用 <code>hexo d</code> 命令部署。</p>
<p>3.把对文件的修改推送到 github 的hexo分支上：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">"commit message"</span></div><div class="line">git push origin hexo</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景：&lt;br&gt;这个博客最初是还在学校的时候，使用 &lt;code&gt;hexo + github pages&lt;/code&gt; 构建，代码都在我的笔记本里。&lt;/p&gt;
&lt;p&gt;需求：&lt;br&gt;工作以后大部分时间都是在用办公室里的电脑，现在想在笔记本和办公室的电脑上都能用hexo写博客。&lt;/p&gt;
&lt;p&gt;思路：&lt;br&gt;通过 git 的分支实现。hexo 生成的静态博客文件默认放在 master 分支上，可以新创建一个 hexo 分支，把 hexo 的源文件都放在 hexo 分支上，换新电脑时，直接 git clone hexo 分支即可。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://theqwang.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>《高性能网站建设进阶指南》总结</title>
    <link href="https://theqwang.github.io/2016/03/17/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E3%80%8B%E6%80%BB%E7%BB%93/"/>
    <id>https://theqwang.github.io/2016/03/17/《高性能网站建设进阶指南》总结/</id>
    <published>2016-03-17T15:52:36.000Z</published>
    <updated>2017-03-11T22:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在知乎上看到有人推荐这本《高性能网站建设进阶指南》，趁着自己还在学校赶紧去图书馆借来看了看，书不厚也就200多页很快就看完了，但图书馆的书最让人不爽的就是不能勾画，于是也就有了这篇总结。</p>
<a id="more"></a>
<p>在《高性能网站建设进阶指南》之前，作者还出版过《高性能网站建设指南》一书，这本书里为Web性能提升设置了14条规则：</p>
<ol>
<li>尽量减少 HTTP 请求</li>
<li>使用 CDN</li>
<li>添加 Expires 头</li>
<li>采用 Gzip 压缩组件</li>
<li>将样式表放在顶部</li>
<li>将脚本放在底部</li>
<li>避免 CSS 表达式</li>
<li>使用外部的 javascript 和 CSS</li>
<li>减少 DNS 查询</li>
<li>精简 javascript</li>
<li>避免重定向</li>
<li>删除重复的脚本</li>
<li>配置 ETag</li>
<li>使 Ajax 可缓存</li>
</ol>
<p>下面是《高性能网站建设进阶指南》的章节总结：</p>
<h1 id="第一章-理解-Ajax-性能"><a href="#第一章-理解-Ajax-性能" class="headerlink" title="第一章 理解 Ajax 性能"></a>第一章 理解 Ajax 性能</h1><p>做性能优化时，不要浪费时间去尝试为那些不消耗大量时间的代码提速。</p>
<p>通常浏览器在运行javascript上花费的时间很少，绝大部分时间消耗在 DOM 上。</p>
<p>Ajax 提供了取代页面替换的有效方案，善加利用 Ajax 能使应用程序运行的更快。</p>
<h1 id="第二章-创建快速响应的-WEB-应用"><a href="#第二章-创建快速响应的-WEB-应用" class="headerlink" title="第二章 创建快速响应的 WEB 应用"></a>第二章 创建快速响应的 WEB 应用</h1><p><strong>如何定义快速呢？</strong>   </p>
<p>javascript 代码执行时间超过 0.1 秒，页面会给人不够平滑快捷的感觉；执行时间超过 1秒，则会感到应用程序缓慢；超过 10 秒，用户会非常沮丧。</p>
<p><strong>javascript 是单线程的！</strong></p>
<p>在页面上任何开销很大的（例如，长时间运行）javascript 操作都应该委托给 Web Worker。</p>
<p>在 XMLHttpRequest 的异步模式中，XHR 实质上就是一个拥有专用 API 的 Web Worker。</p>
<h2 id="内存对响应时间的影响"><a href="#内存对响应时间的影响" class="headerlink" title="内存对响应时间的影响"></a>内存对响应时间的影响</h2><ul>
<li>在 GC 执行回收时，会冻结整个运行环境，直到遍历完整个创建对象的“堆”。随着应用程序内存占用的增加，遍历整个堆去查找用户不再使用的对象所需要的时间最终会引起用户的注意。</li>
<li>网页内存需求增长到足够大，迫使操作系统开始内存分页，系统把内存页从物理内存转移到虚拟内存（例如从 RAM 到硬盘）。</li>
</ul>
<p>如果确定内存有问题，可以通过以下两种方式清理内存：</p>
<ul>
<li>使用 delete 关键字从内存中移除不再需要的 javascript 对象</li>
<li>从 DOM 树中移除不再是必须的节点</li>
</ul>
<p>#第三章 拆分初始化负载<br>可以把 javascript 代码拆分到不同的组，第一组包含初始化页面所必须的函数，剩下的则在这些代码需要执行时按需加载它们，或者等到初始化的那些 javascript 代码加载完毕时再加载。</p>
<h1 id="第四章-无阻塞加载脚本"><a href="#第四章-无阻塞加载脚本" class="headerlink" title="第四章 无阻塞加载脚本"></a>第四章 无阻塞加载脚本</h1><p>浏览器在下载和解析 javascript 脚本时，不仅会阻塞页面中其他内容的下载，还会阻塞脚本后面所有元素的渲染。</p>
<p>浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或 javascript 的命名空间。</p>
<p>很显然 javascript 脚本没有必要按顺序下载，这方面 IE8 走在了前面，IE8 是第一个支持脚本并行下载的浏览器。</p>
<p>下面列出异步加载脚本的技术：</p>
<ul>
<li>XHR eval：该技术用过 XHR 从服务器获得脚本，然后通过 eval 执行脚本内容。</li>
<li>XHR 注入：类似于 XHR eval，但是与 eval 不同的是，该机制是通过创建一个 script 的 DOM 元素，然后把 XHR 的响应注入到 script 中执行 javascript。</li>
<li>Script DOM Element：该技术使用 javascript 动态创建 script DOM 元素并设置其 src 属性。下载过程中用这种方式创建脚本不会阻塞其他组件。和前面的技术相比，该技术允许跨域获取脚本。</li>
<li>Script defer 属性：HTML 4 为 script 标签定义了一个扩展属性：defer。带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。带有 defer 属性的 script 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 script 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。但是，defer 属性只被 IE 4 和 Firefox 3.5 更高版本的浏览器所支持，所以它不是一个理想的跨浏览器解决方案。</li>
<li>Script async 属性：HTML 5 为 script 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。</li>
</ul>
<h1 id="第六章-布置行内脚本"><a href="#第六章-布置行内脚本" class="headerlink" title="第六章 布置行内脚本"></a>第六章 布置行内脚本</h1><p>在样式表后面的行内脚本会阻塞所有后续资源的下载，解决该问题的方法是调整行内脚本的位置，使其不出现在样式表和任何其他资源之间。</p>
<h1 id="第七章-编写高效的-javascript"><a href="#第七章-编写高效的-javascript" class="headerlink" title="第七章 编写高效的 javascript"></a>第七章 编写高效的 javascript</h1><ul>
<li>尽量避免使用会增长作用域链的结构，比如使用 with 语句和 try-catch 语句中的 catch 从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，应该把它存储到一个局部变量中。例如，如果函数中多次访问处于作用域链底层的document，可以把 document 赋值给一个局部变量，从而减少降低在作用域链中搜索变量的时间。</li>
<li>存储和读取数据的方式对脚本的性能影响很大。局部变量和字面量总是最快的，存取数组元素和对象属性会引起性能损耗。如果数组元素或对象的属性使用超过一次，那么为了提高存取速度，应该把它存储到一个局部变量中。</li>
<li>在 javascript 中，循环经常成为性能瓶颈，为了使循环高效，可以使用倒序的方式来处理元素，即在控制条件中，将迭代变量和 0 作比较。</li>
<li>流控制也是影响脚本执行速度的一个重要因素。if 语句适用于少量离散值或一段区间值的判断；switch 语句最好用于 3~10 个离散值的判断。</li>
<li>谨慎的使用 DOM 中的 HTML nodelist 对象，每次存取这类对象的属性，都会重新查询 DOM 中的匹配节点。为了避免这种高昂的开销，只有必要时才存取 nodelist 对象，并将经常存取的值存储在局部变量中。例如，当用 for 遍历通过 getElementsByTagName 得到的 nodelist 对象时，应该把 nodelist 的 length 赋值给一个局部变量。</li>
<li>如果 javascript 代码运行时间过长，可以使用定时器把任务拆分执行。</li>
</ul>
<p>#第九章 超越Gzip压缩<br>所有的浏览器都支持 Gzip压缩，并可以通过添加 Accept-Encoding 的 http 头来向 web 服务器声明支持压缩：</p>
<p>Accept-Encoding: gzip, deflate</p>
<p>当请求中包含这个头时， web 服务器就会开启 Gzip 压缩功能。</p>
<h1 id="第十章-图像优化"><a href="#第十章-图像优化" class="headerlink" title="第十章 图像优化"></a>第十章 图像优化</h1><h2 id="各种图片格式介绍"><a href="#各种图片格式介绍" class="headerlink" title="各种图片格式介绍"></a>各种图片格式介绍</h2><p><strong>GIF</strong>：</p>
<ul>
<li>只支持二进制透明（要么完全透明，要么完全不透明）</li>
<li>支持动画</li>
<li>是无损格式</li>
<li>gif 有 256 色的限制，不适合显示照片</li>
</ul>
<p><strong>JPEG</strong>：</p>
<ul>
<li>不支持透明</li>
<li>不支持动画</li>
<li>是有损格式</li>
<li>，压缩比很高，适合显示照片</li>
</ul>
<p><strong>PNG</strong>：</p>
<ul>
<li>支持 alpha 透明</li>
<li>不支持动画</li>
<li>是无损格式</li>
<li>不是动画时，应该尽可能 使用 png8（调色板png） 代替 gif。</li>
</ul>
<h2 id="图像优化建议"><a href="#图像优化建议" class="headerlink" title="图像优化建议"></a>图像优化建议</h2><ul>
<li>首先要选择合适的格式：用 jpeg 保存照片，用 gif 保存动画，其他所有图像用 png 保存，并且尽量使用 png8</li>
<li>不要在 html 中对图像进行缩放</li>
<li>不要忘了 favicons</li>
<li>使用并优化 css sprite</li>
</ul>
<h1 id="第十一章-划分主域"><a href="#第十一章-划分主域" class="headerlink" title="第十一章 划分主域"></a>第十一章 划分主域</h1><p>IE6、7等老浏览器把从同一个服务器并行下载的资源数限制为2个，IE8、firefox和chrome增加到了6个。</p>
<p>浏览器执行 “每个服务器端最大连接数” 的限制是根据 URL 上的主机名，而不是解析出来的 IP 地址。</p>
<p>可以把网页中的资源放在不同的服务器上，加速资源的下载。</p>
<h1 id="第十三章-少用-iframe"><a href="#第十三章-少用-iframe" class="headerlink" title="第十三章 少用 iframe"></a>第十三章 少用 iframe</h1><p>使用 iframe 会带来的问题：</p>
<ol>
<li>iframe 是开销最高的 DOM 元素，创建 iframe 的开销比创建其他类型的 DOM 元素要高 1~2 个数量级。</li>
<li>使用 iframe 会阻塞页面的 onload 事件，延长了浏览器的忙指示。</li>
<li>虽然 iframe 是一个完全独立的文档，浏览器也会共享对每个浏览器的受限连接数（IE8、chrome为6个）</li>
</ol>
<h1 id="第十四章-简化-CSS-选择符"><a href="#第十四章-简化-CSS-选择符" class="headerlink" title="第十四章 简化 CSS 选择符"></a>第十四章 简化 CSS 选择符</h1><p>CSS 的选择符类型（从开销最小到最大排序）：</p>
<ol>
<li>ID 选择符#</li>
<li>类选择符.</li>
<li>类型选择符 <tag></tag></li>
<li>相邻兄弟选择符 +</li>
<li>子选择符</li>
<li>后代选择符</li>
<li>通配符选择符</li>
<li>属性选择符</li>
<li>伪类</li>
</ol>
<p><strong>事实上，CSS 选择符是从右向左进行匹配的！最右边的选择符被称为关键选择符，关键选择符应该尽量使用开销小的选择符。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在知乎上看到有人推荐这本《高性能网站建设进阶指南》，趁着自己还在学校赶紧去图书馆借来看了看，书不厚也就200多页很快就看完了，但图书馆的书最让人不爽的就是不能勾画，于是也就有了这篇总结。&lt;/p&gt;
    
    </summary>
    
      <category term="优化" scheme="https://theqwang.github.io/categories/%E4%BC%98%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>SASS学习笔记</title>
    <link href="https://theqwang.github.io/2016/02/01/SASS%E5%85%A5%E9%97%A8/"/>
    <id>https://theqwang.github.io/2016/02/01/SASS入门/</id>
    <published>2016-02-01T04:01:56.000Z</published>
    <updated>2017-03-11T22:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>sass 是基于 ruby 开发的，因此安装 sass 需要先安装 ruby。<br>安装完 ruby，通过 ruby 的 gem 安装 sass，在命令行输入：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="keyword">install</span> sass</div></pre></td></tr></table></figure>
<p>检查 sass 是否安装成功：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sass -v</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果能输出 sass 的版本信息，就说明 sass 安装成功了。</p>
<h1 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h1><h2 id="1-手动编译"><a href="#1-手动编译" class="headerlink" title="1.  手动编译"></a>1.  手动编译</h2><p>命令行下，在项目所在目录使用 sass 命令手动编译 sass 文件，sass 文件的扩展名为 .scss。例子：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass <span class="selector-tag">input</span><span class="selector-class">.scss</span>:output.css</div></pre></td></tr></table></figure>
<p>冒号前面是要编译的文件，冒号后面是要编译生成的 css 文件。</p>
<h2 id="2-自动编译"><a href="#2-自动编译" class="headerlink" title="2. 自动编译"></a>2. 自动编译</h2><p>还可以在命令行下使用 sass –watch 命令自动监视 sass 文件的变化并编译。例子：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch <span class="selector-tag">input</span><span class="selector-class">.css</span>:output.css</div></pre></td></tr></table></figure>
<p>也可以自动监视整个目录的变化并自动编译：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">sass</span> <span class="selector-tag">--watch</span> .<span class="selector-pseudo">:.</span></div></pre></td></tr></table></figure>
<p>默认自动编译生成的 css 文件与 sass 文件同名。</p>
<h1 id="三、输出样式"><a href="#三、输出样式" class="headerlink" title="三、输出样式"></a>三、输出样式</h1><p>sass 编译输出的 css 文件有四种样式：</p>
<ul>
<li>nested（嵌套，默认）</li>
<li>compact（紧凑）</li>
<li>expanded（扩展）</li>
<li>compressed（压缩)</li>
</ul>
<p>在编译时使用 –style 命令可以修改输出的 css 的样式：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">sass</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">watch</span> <span class="string">.</span><span class="comment">:</span><span class="string">.</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">style</span> <span class="comment">compact</span></div></pre></td></tr></table></figure>
<h1 id="四、变量"><a href="#四、变量" class="headerlink" title="四、变量"></a>四、变量</h1><p>sass 使用 $ 定义一个变量，用 : 定义变量值。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span>;</div></pre></td></tr></table></figure>
<p>变量的值可以用其他变量：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$primary-border: <span class="number">1</span>px solid $primary-<span class="keyword">color</span>;</div></pre></td></tr></table></figure>
<p>补充：</p>
<blockquote>
<ol>
<li>变量名中的中划线和下划线可以互相替换。</li>
<li>变量如果定义在某个 {} 规则块里，那么该变量只能在此规则块内使用，类似作用域。</li>
</ol>
</blockquote>
<h1 id="五、嵌套"><a href="#五、嵌套" class="headerlink" title="五、嵌套"></a>五、嵌套</h1><h2 id="1-选择器嵌套"><a href="#1-选择器嵌套" class="headerlink" title="1.选择器嵌套"></a>1.选择器嵌套</h2><p>在 css 里一些选择器是重复出现的，可以使用 sass 的嵌套语法减少重复：</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.<span class="string">nav </span>&#123;</div><div class="line">	<span class="string">height:</span> <span class="string">70px;</span></div><div class="line">	<span class="string">ul </span>&#123;</div><div class="line">		<span class="string">margin:</span> 0;</div><div class="line">		<span class="string">li </span>&#123;</div><div class="line">			<span class="built_in">list-style-type:</span> <span class="string">none;</span></div><div class="line">			<span class="string">padding:</span> <span class="string">5px;</span></div><div class="line">			&#125;</div><div class="line">			&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在嵌套语法中，使用 &amp; 来表示父选择器。当包含父选择器标识符的嵌套规则被打开时，它不会像后代选择器那样进行拼接，而是&amp;被父选择器直接替换：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">	&amp;:hover &#123;</div><div class="line">		<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-属性嵌套"><a href="#2-属性嵌套" class="headerlink" title="2.属性嵌套"></a>2.属性嵌套</h2><p>嵌套属性的规则是这样的：把属性名从中划线-的地方断开，在根属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中。<br>例如，下面的 font-size 和 font-weight 属性可以嵌套 font。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	  <span class="attribute">font-size</span>: <span class="number">15px</span>;</div><div class="line">	    <span class="attribute">font-weight</span>: <span class="number">600</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嵌套写法： </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">font</span>: &#123;</div><div class="line">		size: <span class="number">15px</span>;</div><div class="line">		<span class="attribute">weight</span>: <span class="number">600</span>;</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="六、-mixin"><a href="#六、-mixin" class="headerlink" title="六、@mixin"></a>六、@mixin</h1><p>mixin 是一组样式的集合，主要用于大段样式的重用。</p>
<p> mixin 类似于javascript中的函数，mixin 有名字和参数，参数可以省略，定义 mixin 的格式如下：</p>
 <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> 名字 (参数<span class="number">1</span>，参数<span class="number">2</span>...) <span class="meta">&#123;......&#125;</span></div></pre></td></tr></table></figure>
<p> 引用 mixin 时使用如下写法：</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">include</span> mixin的名字;</div></pre></td></tr></table></figure>
<p> mixin 中的参数写法与 sass 变量写法一样，变量的赋值既可以按形参顺序赋值，也可以按参数名赋值，sass 允许通过语法 $name: value 的形式指定每个参数的值。。来看一个具体的例子：</p>
 <figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> alert (<span class="variable">$text-color</span>, <span class="variable">$background</span>) &#123;</div><div class="line"> <span class="attribute">color</span>: <span class="variable">$text-color</span>;</div><div class="line"> <span class="attribute">background-color</span>: <span class="variable">$background</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.alert-warning</span> &#123;</div><div class="line"> @<span class="keyword">include</span> alert(<span class="number">#333</span>, <span class="number">#fff</span>lert &#123;</div><div class="line">	 <span class="attribute">padding</span>: <span class="number">15px</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.alert</span> <span class="selector-tag">a</span> &#123;</div><div class="line">	 <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.alert-info</span> &#123;</div><div class="line">	 @<span class="keyword">extend</span> .alert;</div><div class="line">	 <span class="attribute">background-color</span>: <span class="number">#FFF</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<pre><code>生成如下的 css：

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.alert</span>, <span class="selector-class">.alert-info</span> &#123;</div><div class="line">   <span class="attribute">padding</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.alert</span> <span class="selector-tag">a</span>, <span class="selector-class">.alert-info</span> <span class="selector-tag">a</span> &#123;</div><div class="line">   <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.alert-info</span> &#123;</div><div class="line">   <span class="attribute">background-color</span>: <span class="number">#FFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

注意，使用 @extend 会继承选择器下所有子样式。上面的例子里，.alert-info 不仅继承了 .alert 的样式，还会继承 .alert a 的样式。

如果 .alert extend 了 .alert-info，等效于对应的 html 的 class=&quot;alert alert-info&quot;，
</code></pre><h2 id="1-何时使用-extend"><a href="#1-何时使用-extend" class="headerlink" title="1.何时使用@extend"></a>1.何时使用@extend</h2><p>混合器主要用于展示性样式的重用，而类名用于语义化样式的重用。因为继承是基于类的（有时是基于其他类型的选择器），所以继承应该是建立在语义化的关系上。当一个元素拥有的类（比如说.seriousError）表明它属于另一个类（比如说.error），这时使用继承再合适不过了。</p>
<h1 id="八、-import与partials"><a href="#八、-import与partials" class="headerlink" title="八、@import与partials"></a>八、@import与partials</h1><p>css 使用 @import 在一个 css 文件里引入其他 css 文件，然而，只有执行到 @import 时浏览器才会去下载导入的css 文件，使页面加载变慢，因为增加了 HTTP 连接。</p>
<p>sass 扩展了 @import，在一个  sass 文件里也可以使用 @import 导入其他 sass 文件，然后 sass 会把它编译成一个文件，避免了额外的下载请求，另外，所有在被导入文件中定义的变量和 mixin 均可在导入文件中使用。</p>
<p>这样我们可以把 sass 分成不同的部分，即模块化，每个模块在 sass 中叫做 partials（局部文件），partials 的文件名以 _ 开头，这样 sass 就不会单独编译 partials 而只把该文件用来导入。</p>
<p>例如，我们可以创建 <em>base.scss 的 partials 模块来重置基本样式，@import 导入 partials 时直接用文件名，不需要加 </em> 和文件扩展名：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> ”base“；</div></pre></td></tr></table></figure>
<h2 id="1-局部导入"><a href="#1-局部导入" class="headerlink" title="1. 局部导入"></a>1. 局部导入</h2><p> ass允许 @import 命令写在 css {} 规则内，这种导入方式下，生成对应的css文件时，局部文件会被直接插入到css规则内导入它的地方。被导入的局部文件中定义的所有变量和混合器，也会在这个规则范围内生效。这些变量和混合器不会全局有效。</p>
 <figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav</span> &#123;</div><div class="line"> @<span class="keyword">import</span> <span class="string">"base"</span>;</div><div class="line"> <span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-导入原生css"><a href="#2-导入原生css" class="headerlink" title="2.导入原生css"></a>2.导入原生css</h2><p>sass兼容原生 css，所以也支持原生的 css@import。在下列三种情况下会生成原生的CSS@import，尽管这会造成浏览器解析css时的额外下载：</p>
<ul>
<li>被导入文件的名字以.css结尾</li>
<li>被导入文件的名字是一个URL地址</li>
<li>被导入文件的名字是CSS的url()值</li>
</ul>
<h2 id="3-默认变量值"><a href="#3-默认变量值" class="headerlink" title="3.默认变量值"></a>3.默认变量值</h2><p>一般情况下，反复声明一个变量值时，只有最后一个声明有效。</p>
<p>假如你写了一个可被他人通过 @import 导入的 sass 库文件，你可能希望导入者可以定制修改 sass 库文件中的某些值。使用 sass 的 !default 标签可以实现这个目的。!default用于变量，含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$alert-<span class="keyword">color</span>: #<span class="number">8</span>d8d8d !<span class="keyword">default</span>;</div></pre></td></tr></table></figure>
<h1 id="九、注释"><a href="#九、注释" class="headerlink" title="九、注释"></a>九、注释</h1><p>sass 包含 3 中注释方式：</p>
<ul>
<li>单行注释： //注释内容</li>
<li>多行注释：/<em> 注释内容 </em>/</li>
<li>强制注释：/<em>! 注释内容 </em>/</li>
</ul>
<p>单行注释不会出现在编译后的 css 文件里；多行注释会出现在编译后的 css 文件里，但是不会出现在压缩编译的 css 文件里；强制注释会一直出现在 css 文件里。</p>
<hr>
<blockquote>
<h1 id="sass高级部分"><a href="#sass高级部分" class="headerlink" title="sass高级部分"></a>sass高级部分</h1></blockquote>
<hr>
<h1 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h1><p>css 属性值和 sass 变量可以分成不同的数据类型。</p>
<p>在命令行下使用 sass -i 命令可以启动 sass 的交互界面，在交互界面下使用 type-of() 函数可以判断数据的类型。</p>
<p>数据类型有如下几种：</p>
<ul>
<li>number：5、5px、5deg</li>
<li>string：hello、”world”</li>
<li>list：1px solid #111、 20px 15px</li>
<li>color：#ff0000、red、rgba(0, 0, 0, 1)、rgb(1, 1, 1)、hsl(0, 100%, 50%)</li>
<li>map：(padding: 10px, margin: 10px)</li>
<li>boolean: true、false</li>
</ul>
<h2 id="1-1-数字"><a href="#1-1-数字" class="headerlink" title="1-1.数字"></a>1-1.数字</h2><p>在 sass 里宽度、高度等属性的值的数据类型是数字，数字可以带 px、 rem 等单位。数字类型的值可以使用 +、 -、 *、 /、 % 运算，其中 / 除法是 css 的保留字符，我们可以使用 (a/b) 的形式进行除法运算。</p>
<h2 id="1-2-数字函数"><a href="#1-2-数字函数" class="headerlink" title="1-2.数字函数"></a>1-2.数字函数</h2><p>sass 提供了一些数字运算的函数，方便计算。下面列举一些常见的数字函数：</p>
<ul>
<li>abs()：取绝对值</li>
<li>round()：四舍五入</li>
<li>ceil()：舍去小数部位</li>
<li>floor()：有小数部分就进位</li>
<li>min()：多个数字里取最小值</li>
<li>max()：多个数字里取最大值</li>
</ul>
<h2 id="1-3-字符串"><a href="#1-3-字符串" class="headerlink" title="1-3.字符串"></a>1-3.字符串</h2><p>css 里 normal、left、right、absolute 等属性值都是字符串类型，用 “” 包裹的属性值也是字符串类型，两者的区别是引号包裹的字符串可以含有空格。</p>
<p>使用 + 可以连接两个字符串。使用 + 也可以连接一个字符串和一个数字。用 -、/连接字符串都只会保留-、/，用 * 连接字符串会报错。</p>
<h2 id="1-4-字符串函数"><a href="#1-4-字符串函数" class="headerlink" title="1-4.字符串函数"></a>1-4.字符串函数</h2><p>sass 提供了一些字符串函数来处理字符串。以下是一些常用是字符串函数：</p>
<ul>
<li>to-upper-case()：把字符串转换成大写</li>
<li>to-lower-case()：把字符串转换成小写</li>
<li>str-length()：计算字符串的长度</li>
<li>str-index(a, b)：求子串 b 在 a 里出现的起始位置，注意起始位置从1开始</li>
<li>str-insert(a, b, num)：把字符串 b 插入到字符串 a 的 num 位置。</li>
</ul>
<h2 id="1-5-颜色"><a href="#1-5-颜色" class="headerlink" title="1-5.颜色"></a>1-5.颜色</h2><p>css 里使用HEX、字符串、RGB、RGBA、HSL等多种方式表示颜色。</p>
<h2 id="1-6-颜色函数"><a href="#1-6-颜色函数" class="headerlink" title="1-6.颜色函数"></a>1-6.颜色函数</h2><ul>
<li>RGB(红, 绿, 蓝)：红绿蓝的值可以使用 0~255 或百分比</li>
<li>RGBA(红，绿，蓝，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明</li>
<li>HSL(色相，饱和度，明度)：色相的值是 0~360，饱和度和明度的值是百分比</li>
<li>HSLA(色相，饱和度，明度，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明</li>
</ul>
<p>sass 提供的颜色函数：</p>
<ul>
<li>adjust-hue(颜色值，角度值)：调整颜色的色相值。</li>
<li>lighten(颜色值，百分数)：使颜色变亮，明度的增加值就是百分数</li>
<li>darken(颜色值，百分数)：使颜色变暗，明度的减少值就是百分数</li>
<li>saturate(颜色值，百分数)：增加颜色的纯度，即增加颜色的饱和度</li>
<li>desaturate(颜色值，百分数)：减少颜色的纯度，即降低颜色的饱和度</li>
<li>opacity(颜色，数字)：增加颜色的不透明度</li>
<li>transparentize(颜色，数字)：减少颜色的不透明度</li>
</ul>
<h2 id="1-7-列表"><a href="#1-7-列表" class="headerlink" title="1-7.列表"></a>1-7.列表</h2><p>sass 用空格或逗号分隔的多个值都是列表，如 border: 1px solid #eee; font-family: courier, monospace;</p>
<p>列表里可以包含其他列表，如下 padding 的值都是两个列表。</p>
<blockquote>
<p>padding: 10px 5px, 0 5px; </p>
<p>padding: (10px 5px) (0 5px); </p>
</blockquote>
<p>sass 在编译时会去掉逗号和括号。</p>
<h2 id="1-8-列表函数"><a href="#1-8-列表函数" class="headerlink" title="1-8.列表函数"></a>1-8.列表函数</h2><p>列表类似于其他语言里的数组。下面是常见的列表函数：</p>
<ul>
<li>length()：求表列有多少个项目</li>
<li>nth(列表，num)：返回列表里第 num 项，num是从1开始计算的</li>
<li>index(列表, value)：返回 value 项在列表里的索引值</li>
<li>append(list1, value)：在 list1 后添加 value 项，还可以有第三个参数指定分隔符</li>
<li>join(list1, list2)：拼接两个列表，还可以有第三个参数指定分隔符</li>
</ul>
<h2 id="1-9-map"><a href="#1-9-map" class="headerlink" title="1-9.map"></a>1-9.map</h2><p>map 类似于 python 的字典，是键值对数据类型。 map 类型书写方式如下：(key1: value1, key2: value2…)</p>
<p>列表函数也都可以应用在 map 对象上，map 还有自己独有的函数，如下：</p>
<ul>
<li>map-get(map, key)：返回 map 中对应 key 的值</li>
<li>map-keys(map)：返回 map 里所有的 key</li>
<li>map-values(map)：返回 map 里所有的 value</li>
<li>map-has-key(map, key)：判断 map 是否有对应的 key</li>
<li>map-merge(map1, map2)：合并两个 map</li>
<li>map-remove(map, key)：从 map 里删除对应的 key 项</li>
</ul>
<h2 id="1-10-boolean"><a href="#1-10-boolean" class="headerlink" title="1-10.boolean"></a>1-10.boolean</h2><p>boolean 包含 true、false。</p>
<p>比较运算符：&gt;、&lt;、&gt;=、&lt;=、== ，逻辑运算符：and、or、not 都会返回 boolean 值。</p>
<h1 id="二、interpolation"><a href="#二、interpolation" class="headerlink" title="二、interpolation"></a>二、interpolation</h1><p>interpolation 可以把变量或者表达式的值插入到选择器、属性名或注释里。 使用 #{ 变量|表达式 } 的形式使用 interpolation。 例子：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$version</span>: <span class="string">"0.0.1"</span>;</div><div class="line"><span class="variable">$type</span>: <span class="string">"alert"</span>;</div><div class="line"><span class="variable">$attr</span>: <span class="string">"border"</span>;</div><div class="line"><span class="comment">/* #&#123;$version&#125; */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">padding</span>: <span class="variable">$version</span>;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">a</span>-#&#123;<span class="variable">$type</span>&#125; &#123;</div><div class="line">	#&#123;<span class="variable">$attr</span>&#125;-type: solid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三、控制语句"><a href="#三、控制语句" class="headerlink" title="三、控制语句"></a>三、控制语句</h1><h2 id="if"><a href="#if" class="headerlink" title="@if"></a>@if</h2><p>sass 可以使用 @if 语句实现条件控制，写法如下： @if 条件 {…} @else {…}</p>
<p>例子：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$theme</span>: <span class="string">"dark"</span>;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	@<span class="keyword">if</span> <span class="variable">$theme</span> == <span class="string">"dark"</span> &#123;</div><div class="line">		<span class="attribute">background-color</span>: <span class="number">#111</span>;</div><div class="line">		&#125; @<span class="keyword">else</span> &#123;</div><div class="line">			<span class="attribute">background-color</span>: <span class="number">#FFF</span>;</div><div class="line">			&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h2><p>@for 循环语句的写法如下： @for $var from &lt;开始值&gt; through | to &lt;结束值&gt; {}。循环中 $var 的值每次增加1，through 与 to 的不同之处在于 through 会包括结束值，to 不包括结束值。</p>
<p>例子，一个简单的网格系统：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$columns</span>: <span class="number">4</span>;</div><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through <span class="variable">$columns</span> &#123;</div><div class="line">	<span class="selector-class">.col-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">		<span class="attribute">width</span>: <span class="number">100%</span> / <span class="variable">$columns</span> * <span class="variable">$i</span>;</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成如下 css：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.col-1</span> &#123;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-2</span> &#123;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-3</span> &#123;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">75%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-4</span> &#123;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h2><p>如果要操作列表里的每一项，可以使用 @each。写法如下：@each $var in $list {…}。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$icons: success <span class="keyword">warning</span> <span class="keyword">error</span>;</div><div class="line">@each $icon <span class="keyword">in</span> $icons &#123;</div><div class="line">	.icon-#&#123;$icon&#125; &#123;</div><div class="line">		background-<span class="keyword">image</span>: url(../img/icon-#&#123;$icon&#125;.jpg);</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成如下 css：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.icon-success</span> &#123;</div><div class="line">	  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../img/icon-success.jpg);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-warning</span> &#123;</div><div class="line">	  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../img/icon-warning.jpg);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-error</span> &#123;</div><div class="line">	  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../img/icon-error.jpg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h2><p>@while 语句也可以实现循环，但是要比 @for 更灵活，要注意 @while 语句里要有结束循环的语句，不然会一直循环下去。写法： @while 条件 {…}。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$i</span>: <span class="number">6</span>;</div><div class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</div><div class="line">	<span class="selector-class">.iterm-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">		<span class="attribute">width</span>: <span class="number">5px</span> * <span class="variable">$i</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;  <span class="comment">// 退出循环的语句</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成的 css：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.iterm-6</span> &#123;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.iterm-4</span> &#123;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.iterm-2</span> &#123;</div><div class="line">	  <span class="attribute">width</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="四、自定义函数"><a href="#四、自定义函数" class="headerlink" title="四、自定义函数"></a>四、自定义函数</h1><p>sass 允许用户自定义函数，写法： @function 名称 (参数1，参数2…) {…@return…}。使用时，直接用函数名调用。</p>
<p>例子：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$colors</span>: (dark: <span class="number">#000</span>, light: <span class="number">#fff</span>);</div><div class="line">@function color (<span class="variable">$key</span>) &#123;</div><div class="line">	@return map-get(<span class="variable">$colors</span>, <span class="variable">$key</span>);</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: color(light);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成的 css：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="警告与错误"><a href="#警告与错误" class="headerlink" title="警告与错误"></a>警告与错误</h2><p>在自定义函数里，可以通过 @warn 和 @error 语句在命令行里输出用户自定义的警告和错误，提高函数的健壮性。</p>
<p>前面的 function 例子可以该写成：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@function</span> color ($key) &#123;</div><div class="line">	<span class="variable">@if</span> not map-has-key($colors, $key) &#123;</div><div class="line">		<span class="variable">@warn</span> <span class="string">"没有 #&#123;$key&#125; 这个颜色"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="variable">@return</span> map-get($colors, $key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;p&gt;sass 是基于 ruby 开发的，因此安装 sass 需要先安装 ruby。&lt;br&gt;安装完 ruby，通过 ruby 的 gem 安装 sass，在命令行输入：&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gem &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; sass&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;检查 sass 是否安装成功：&lt;/p&gt;
&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;sass -v&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://theqwang.github.io/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>不使用 border-radius 实现圆角</title>
    <link href="https://theqwang.github.io/2016/01/08/%E4%B8%8D%E4%BD%BF%E7%94%A8-border-radius-%E5%AE%9E%E7%8E%B0%E5%9C%86%E8%A7%92/"/>
    <id>https://theqwang.github.io/2016/01/08/不使用-border-radius-实现圆角/</id>
    <published>2016-01-08T11:10:23.000Z</published>
    <updated>2017-03-17T02:30:52.259Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3中，利用属性 border-radius 可以很方便的设置出圆角矩形，但是在IE8及以下版本却不支持这个属性，为了在旧版本的浏览器中实现宽高自适应的圆角矩形，可以采用以下三种方法。<br><a id="more"></a></p>
<h2 id="一、使用背景图片制作圆角"><a href="#一、使用背景图片制作圆角" class="headerlink" title="一、使用背景图片制作圆角"></a>一、使用背景图片制作圆角</h2><p>使用背景图片制作宽、高自适应的圆角矩形，首先需要切出4个圆角图片，然后把4个圆角图片放在矩形的四个角上就大功告成了，这一共需要5个div标签，1个容器div和4个圆角背景div。是不是很好理解。</p>
<p>具体实现来说，需要注意一些细节。对于矩形容器div：</p>
<ul>
<li>上下内边距的大小至少设置为圆角的高度。</li>
<li>position设置为相对定位。</li>
<li>放置内容。</li>
</ul>
<p>对于4个圆角背景div：</p>
<ul>
<li>分别设置各个圆角背景图片。</li>
<li>绝对定位于容器矩形的四个角。</li>
<li>需要设置宽高值才能显示背景图片。</li>
</ul>
<p>假设圆角图片的宽高是5px，具体代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btm-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btm-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.content</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top-left</span>,</div><div class="line"><span class="selector-class">.top-right</span>,</div><div class="line"><span class="selector-class">.btm-left</span>,</div><div class="line"><span class="selector-class">.btm-right</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">width</span>: <span class="number">5px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top-left</span> &#123;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(imgs/top-left.png) no-repeat top left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top-right</span> &#123;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(imgs/top-right.png) no-repeat top left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.btm-left</span> &#123;</div><div class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(imgs/btm-left.png) no-repeat top left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.btm-right</span> &#123;</div><div class="line">	<span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(imgs/btm-right.png) no-repeat top left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/theqwang/pen/VePrZM" target="_blank" rel="external">点击查看在线demo</a></p>
<h2 id="二、纯-CSS-div-制作圆角矩形"><a href="#二、纯-CSS-div-制作圆角矩形" class="headerlink" title="二、纯 CSS+div 制作圆角矩形"></a>二、纯 CSS+div 制作圆角矩形</h2><p>这种方法的原理是利用像素点绘制弧线来模拟圆角。简单起见，这里我用圆角半径为3px的例子讲解，其中圆角矩形的背景色为粉色，矩形的边框为黑色。左上角圆角放大后如下图所示：<br><img src="http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-03%2023.06.10.png" alt="圆角放大图"><br>这里矩形上下各需要3个高度为1px、垂直罗在一起的div才能模拟出圆角。具体实现如下：</p>
<ul>
<li>第一个div就是上面图中矩形的黑色上边框，因为模拟的圆角半径为3px，所以该div的左右外边距设为3px，背景色设为黑色。</li>
<li>第二个div的左右外边距设为2px，左右边框为1px的黑线，背景色为粉色。</li>
<li>第三个div的左右外边距设为1px，左右边框为1px的黑线，背景色为粉色。</li>
<li>圆角矩形下面的两个圆角是以上三个div反序排列。</li>
<li>矩形内容区域的div只需要设置左右边框和背景色即可。</li>
</ul>
<p>具体代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"r1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.r1</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">3px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#111</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.r2</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#f4b4b4</span>;</div><div class="line">	<span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#111</span>;</div><div class="line">	<span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#111</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.r3</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#f4b4b4</span>;</div><div class="line">	<span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#111</span>;</div><div class="line">	<span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#111</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#f4b4b4</span>;</div><div class="line">	<span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#111</span>;</div><div class="line">	<span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#111</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/theqwang/pen/QydqrZ" target="_blank" rel="external">点击查看在线demo</a></p>
<p>此方法优缺点分析：</p>
<ul>
<li>不使用背景图片，减少了HTTP请求数。</li>
<li>后期维护性好，但是圆角矩形像素增加，无意义的div代码将成倍增加。</li>
<li>实现的圆角矩形有局限性。</li>
<li>只能实现纯色圆角。</li>
</ul>
<h2 id="三、使用CSS-border-画出梯形模拟圆角"><a href="#三、使用CSS-border-画出梯形模拟圆角" class="headerlink" title="三、使用CSS border 画出梯形模拟圆角"></a>三、使用CSS border 画出梯形模拟圆角</h2><p>通过设置border属性，可以得到梯形和三角形，效果如下图所示：<br><img src="http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.27.16.png" alt="border 画梯形和三角形"></p>
<ul>
<li>当给div的四个边框设置比较大的宽度值时，就能得到四个梯形，如上图中的第一个图案；</li>
<li>在此基础上，当把div的高度值设为0后，就能得到梯形和等腰三角形了，如上图中的第二个图案；</li>
<li>当把div的宽、高都设为0，且只设置上、左的两个边框时，就能得到两个直角三角形，图中的第三个图案就是这种情况；</li>
<li>在此基础上，把其中的一个边框的颜色设置为透明，就能像第四个图案一样得到一个直角三角形。</li>
</ul>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">border-top</span>: <span class="number">20px</span> solid red;</div><div class="line">	<span class="attribute">border-right</span>: <span class="number">20px</span> solid green;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">20px</span> solid blue;</div><div class="line">	<span class="attribute">border-left</span>: <span class="number">20px</span> solid yellow;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box2</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">border-top</span>: <span class="number">20px</span> solid red;</div><div class="line">	<span class="attribute">border-right</span>: <span class="number">20px</span> solid green;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">20px</span> solid blue;</div><div class="line">	<span class="attribute">border-left</span>: <span class="number">20px</span> solid yellow;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box3</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">border-top</span>: <span class="number">50px</span> solid red;</div><div class="line">	<span class="comment">/* border-right: 20px solid green; */</span></div><div class="line">	<span class="comment">/* border-bottom: 20px solid blue; */</span></div><div class="line">	<span class="attribute">border-left</span>: <span class="number">50px</span> solid yellow;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box4</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">border-top</span>: <span class="number">50px</span> solid red;</div><div class="line">	<span class="comment">/* border-right: 20px solid green; */</span></div><div class="line">	<span class="comment">/* border-bottom: 20px solid blue; */</span></div><div class="line">	<span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/theqwang/pen/eJgMxv" target="_blank" rel="external">点击查看在线demo</a></p>
<p>已经知道了如何通过 border 画出梯形了，那又该如何利用梯形模拟圆角矩形呢？很简单，只要在矩形的上面和下面各放上一个梯形，就能得到圆角矩形了。原理嘛就是利用梯形的左右两个斜边模拟圆角啦，直接上效果图：<br><img src="http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.51.06.png" alt="效果图"></p>
<p>具体代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">p</span>&gt;</span>利用border画出梯形，模拟圆角<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">	<span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.top</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">border-top</span>: <span class="number">3px</span> solid transparent;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#111</span>;</div><div class="line">	<span class="attribute">border-left</span>: <span class="number">3px</span> solid transparent;</div><div class="line">	<span class="attribute">border-right</span>: <span class="number">3px</span> solid transparent;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.bottom</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">border-top</span>: <span class="number">3px</span> solid <span class="number">#111</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">3px</span> solid transparent;</div><div class="line">	<span class="attribute">border-left</span>: <span class="number">3px</span> solid transparent;</div><div class="line">	<span class="attribute">border-right</span>: <span class="number">3px</span> solid transparent;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span> &#123;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#111</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/theqwang/pen/BjpwmY" target="_blank" rel="external">点击查看在线demo</a></p>
<p>这种方法与方法二相比，更加简洁易懂，减少了无意义的div标签，在模拟较小的实色圆角时，不失为最佳的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS3中，利用属性 border-radius 可以很方便的设置出圆角矩形，但是在IE8及以下版本却不支持这个属性，为了在旧版本的浏览器中实现宽高自适应的圆角矩形，可以采用以下三种方法。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://theqwang.github.io/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>浅析圣杯布局和双飞翼布局</title>
    <link href="https://theqwang.github.io/2016/01/08/%E6%B5%85%E6%9E%90%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    <id>https://theqwang.github.io/2016/01/08/浅析圣杯布局和双飞翼布局/</id>
    <published>2016-01-08T02:15:55.000Z</published>
    <updated>2017-03-11T22:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>三列布局是一种很常见的页面布局方式，三列一般分别是子列sub、主列main和附加列extra，其中子列一般是居左的导航，且宽度固定；主列是居中的主要内容，宽度自适应；附加列一般是广告等额外信息，居右且宽度固定。<br>圣杯布局和双飞翼布局都可以实现这种三列布局，他们有什么特别之处呢？</p>
<a id="more"></a>
<p>在分析圣杯布局和双飞翼布局之前，抛砖引玉，先看看我之前是如何实现左右定宽、中间自适应的三列布局的：子列和附加列分别浮动到左边和右边，主列设置左右外边距即可，需要注意的是子列和附加列要写在主列的前面，顺序不能变。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>子列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span>附加列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sub</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.extra</span> &#123;</div><div class="line">	<span class="attribute">float</span>: right;</div><div class="line">	<span class="attribute">width</span>: <span class="number">180px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 255, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">210px</span>;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">190px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 255, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>圣杯布局源自 Matthew Levine 在06年的一篇<a href="http://alistapart.com/article/holygrail" target="_blank" rel="external">文章</a>，其DOM结构如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来，让我们一步一步地实现圣杯布局；</p>
<p>1、 首先分别浮动main、sub、extra三列， 然后利用负外边距把sub列和extra列定位到左右两边。这时的CSS代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.sub</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 255, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.extra</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">180px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">180px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 255, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、 完成上步后，sub和extra列已经到了正确的位置，但是sub和extra列却覆盖了main的两边，对于这个问题，圣杯布局的解决办法是给容器container添加左、右内边距，从而让main列定位到正确的位置。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">210px</span>;</div><div class="line">	<span class="attribute">padding-right</span>: <span class="number">190px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、 完成第二步后又出现了新问题：sub、extra列也受到容器左右内边距的影响位置发生了移动。为了解决这个问题，圣杯布局使用相对定位使sub、extra列回到正确的位置。新添加代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sub</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">left</span>: -<span class="number">210px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.extra</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">right</span>: -<span class="number">190px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、 当浏览器缩小到一定程度时，这个布局可能会被破坏，可以在body上添加min-width属性解决。最终的圣杯布局CSS代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">min-width</span>: <span class="number">600px</span>; <span class="comment">/* 2*sub + extra */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">210px</span>;</div><div class="line">	<span class="attribute">padding-right</span>: <span class="number">190px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.sub</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">left</span>: -<span class="number">210px</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 255, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.extra</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">right</span>: -<span class="number">190px</span>;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">180px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">180px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 255, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/theqwang/pen/WrjGQe" target="_blank" rel="external">点击查看在线demo</a></p>
<p>圣杯布局的优点总结如下：</p>
<ol>
<li>使主要内容列先加载。</li>
<li>允许任何列是最高的。</li>
<li>没有额外的div。</li>
<li>需要的hack很少。</li>
</ol>
<h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>了解了圣杯布局，趁热打铁，再分析一下双飞翼布局是怎么回事。双飞翼布局源自淘宝UED，现在查看下淘宝店铺的DOM结构，就能找到双飞翼布局的身影。接下来，让我们也一步一步实现双飞翼布局。</p>
<ol>
<li>首先，和圣杯布局一样，分别浮动main、sub和extra列，然后利用负外边距正确定位sub和extra列。</li>
<li>这时依旧面临和圣杯布局同样的问题：main列没有正确定位且被sub、extra列覆盖。双飞翼布局的解决办法是在main列外面包裹了一个宽度100%的div，然后通过设置main列的左、右外边距正确定位main列。最终的DOM结构如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>CSS设置如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.main-wrapper</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">210px</span>;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">190px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.sub</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 255, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.extra</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">180px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">180px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 255, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/theqwang/pen/mVmrzZ" target="_blank" rel="external">点击查看在线demo</a></p>
<p>双飞翼布局非常灵活，通过调整css代码可以实现各种布局。例如，利用双飞翼布局实现了一套<a href="http://www.dqqd.me/avatar/fly/grids_test1.html" target="_blank" rel="external">栅格布局系统</a>。</p>
<p>双飞翼布局的优点：</p>
<ol>
<li>DOM按照主、子、附加列的顺序加载，实现了重要内容先加载。</li>
<li>main部分是自适应宽度的，很容易在定宽布局和流体布局中切换。</li>
<li>在浏览器上的兼容性非常好，IE5.5以上都支持。</li>
<li>实现了内容与布局的分离，即Eric提到的Any-Order Columns.</li>
<li>任何一栏都可以是最高栏，不会出问题。</li>
<li>需要的hack非常少。</li>
</ol>
<h2 id="圣杯布局与双飞翼布局的比较"><a href="#圣杯布局与双飞翼布局的比较" class="headerlink" title="圣杯布局与双飞翼布局的比较"></a>圣杯布局与双飞翼布局的比较</h2><p>总结一下两种布局方式在实现上的异同点：</p>
<ol>
<li>俩种布局方式都是把主列放在文档流最前面，使主列优先加载。</li>
<li>两种布局方式在实现上也有相同之处，都是让三列浮动，然后通过负外边距形成三列布局。</li>
<li>两种布局方式的不同之处在于如何处理中间主列的位置：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主列嵌套在div后利用主列的左、右外边距定位。</li>
</ol>
<p>两者相比较，双飞翼布局虽然多了一个div，却减少了相对定位属性的代码，个人认为双飞翼布局在实现思路和代码简洁度上都要比圣杯布局更好一些。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三列布局是一种很常见的页面布局方式，三列一般分别是子列sub、主列main和附加列extra，其中子列一般是居左的导航，且宽度固定；主列是居中的主要内容，宽度自适应；附加列一般是广告等额外信息，居右且宽度固定。&lt;br&gt;圣杯布局和双飞翼布局都可以实现这种三列布局，他们有什么特别之处呢？&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://theqwang.github.io/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>两列布局分析</title>
    <link href="https://theqwang.github.io/2016/01/07/%E4%B8%A4%E5%88%97%E5%B8%83%E5%B1%80%E5%88%86%E6%9E%90/"/>
    <id>https://theqwang.github.io/2016/01/07/两列布局分析/</id>
    <published>2016-01-07T01:28:05.000Z</published>
    <updated>2017-03-11T22:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>两列布局大概是最经典的一种网页布局方式了，本博客就是采用的这种布局。两列布局中，以主列(main)是自适应宽度，子列(sidebar)是固定宽度的情形最为常见。<br>今天就来好好探讨一下如何实现这种定宽+自适应的两列布局。</p>
<a id="more"></a>
<h2 id="1-absolute-margin-方式"><a href="#1-absolute-margin-方式" class="headerlink" title="1. absolute + margin 方式"></a>1. absolute + margin 方式</h2><p>首先想到的是利用 absolute + margin 的方式实现。先看看代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span>子列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.sidebar</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">210px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 255, 0, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方式利用 position 让 sidebar 列脱离文档流，然后通过 main 列的 margin-left 移除被 sidebar 列覆盖的部分。如此，我们就实现了定宽 + 自适应的两列布局。</p>
<h3 id="列顺序调整"><a href="#列顺序调整" class="headerlink" title="列顺序调整"></a>列顺序调整</h3><p>在不修改 HTML 的情况下，只需简单修改 CSS，我们可以让左右两列顺序互换，来看代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sidebar</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">210px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="主内容列优先显示"><a href="#主内容列优先显示" class="headerlink" title="主内容列优先显示"></a>主内容列优先显示</h3><p>让我们考虑的更完美一点，可不可以把 main 列放 sidebar 列 的前面，使主要内容优先加载渲染？ Let us try！<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span>子列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>做上面的简单调整即可，CSS不需要任何修改！</p>
<h3 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h3><p>虽然这种方式的优点很多，但是却存在一个致命缺点。因为 sidebar 列脱离了文档流，当 sidebar 列比 main 列高时会覆盖后面的布局：<a href="http://codepen.io/theqwang/pen/obWwEW" target="_blank" rel="external">问题demo</a>。<br>如果在 container 容器上 添加 overflow:hidden 就会使 sidebar 溢出部分被裁减。在这种布局方式下，这个问题确实没有有效的解决办法。 </p>
<h2 id="3-float-margin-方式"><a href="#3-float-margin-方式" class="headerlink" title="3. float + margin 方式"></a>3. float + margin 方式</h2><p>然后想到的就是 float + margin 来实现两列布局，首先实现左栏定宽，主内容自适应的两栏布局。代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span>子列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sidebar</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">210px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 255, 0, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种实现方式比较简单，首先把子列浮动到左边，然后在主列上设置 margin-left 为子列留出显示空间即可。</p>
<p>那么，这种方式支不支持调换列的位置呢？当然可以。CSS代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sidebar</span> &#123;</div><div class="line">	<span class="attribute">float</span>: right;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">	<span class="attribute">margin-right</span>: <span class="number">210px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 255, 0, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="问题所在-1"><a href="#问题所在-1" class="headerlink" title="问题所在"></a>问题所在</h3><p>看起来 float + margin 方式是个好办法，然而我们前面提到过的主列在前优先显示的优化却不能实现。</p>
<h2 id="3-float-负margin-方式"><a href="#3-float-负margin-方式" class="headerlink" title="3. float + 负margin 方式"></a>3. float + 负margin 方式</h2><p>废话不多说，直接上代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span>子列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.main-wrapper</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">210px</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255, 0, 0, .5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.sidebar</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 255, 0, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家应该都看出来了，这就是双飞翼布局，主列优先显示。实现的过程如下：</p>
<ol>
<li>首先浮动 main 列和 sidebar 列，然后通过 负margin 正确定位 sidebar 列。</li>
<li>把 main 列嵌套在一个 div 里，该 div 的宽度值设为100%。</li>
<li>最后通过设置 main 列的 margin-left 消除被 sidebar 覆盖的部分即可。</li>
</ol>
<p>双飞翼布局要改变列的顺序也是可行的：<a href="http://codepen.io/theqwang/pen/MKmvvb" target="_blank" rel="external">在线demo</a>。<br>当两列高度不一致时可以通过触发父容器的 BFC 特性解决方法一的问题。这样看来，双飞翼布局是一个更好的布局方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两列布局大概是最经典的一种网页布局方式了，本博客就是采用的这种布局。两列布局中，以主列(main)是自适应宽度，子列(sidebar)是固定宽度的情形最为常见。&lt;br&gt;今天就来好好探讨一下如何实现这种定宽+自适应的两列布局。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://theqwang.github.io/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS块级元素和行内元素</title>
    <link href="https://theqwang.github.io/2015/12/23/CSS-%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%92%8C%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0/"/>
    <id>https://theqwang.github.io/2015/12/23/CSS-块级元素和行内元素/</id>
    <published>2015-12-23T11:52:03.000Z</published>
    <updated>2017-03-11T22:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="块级元素block"><a href="#块级元素block" class="headerlink" title="块级元素block"></a>块级元素block</h2><p>在视觉上显示为一个块的元素，最明显的特征就是它默认横向充满父元素的内容区域，即默认独占一行。典型的块元素有div、p、h1~h6等。</p>
<p>特点：</p>
<ol>
<li>每个块级元素独占一行。</li>
<li>块级元素的height、width、padding、border、margin都可以设置。</li>
<li>块级元素在默认情况下，width是父元素的100%。</li>
<li>可以容纳其他块级元素和内联元素。</li>
</ol>
<a id="more"></a>
<h2 id="行内元素inline"><a href="#行内元素inline" class="headerlink" title="行内元素inline"></a>行内元素inline</h2><p>行内元素不独占一行，其左右可以有其他行内元素。例如a、span、strong等。</p>
<p>特点：</p>
<ol>
<li>和相邻行内元素都在一行上。直到一行排不下才会换行。</li>
<li>行内元素的宽度和高度就是其容纳的内容的宽高，在行内元素上设置width、height无效。</li>
<li>垂直方向上的padding、border、margin不会产生边距效果，水平方向上的padding、border、margin可以影响元素的水平间距(布局)。</li>
<li>设置line-height 可以改变行内元素的高度。</li>
</ol>
<p><strong>注意：</strong><br>行内元素设置padding，border在应用背景图片的时候会有显示，但是不改变垂直方向的布局，对于设置了background-color背景和padding的行内元素，背景可以向元素上面和下面延伸，但是不会改变行高，结果会出现设置后padding，border的背景会覆盖上面的元素的内容，下部被当做背景，被下级元素覆盖。(《CSS权威指南》P249)</p>
<p>margin水平方向起作用，垂直方向不起作用，原因在于：行内元素的外边距不会改变元素的行高。（《CSS权威指南》P227）</p>
<p>可以点击如下demo查看：<a href="http://codepen.io/theqwang/pen/obLKxg" target="_blank" rel="external">demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;块级元素block&quot;&gt;&lt;a href=&quot;#块级元素block&quot; class=&quot;headerlink&quot; title=&quot;块级元素block&quot;&gt;&lt;/a&gt;块级元素block&lt;/h2&gt;&lt;p&gt;在视觉上显示为一个块的元素，最明显的特征就是它默认横向充满父元素的内容区域，即默认独占一行。典型的块元素有div、p、h1~h6等。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个块级元素独占一行。&lt;/li&gt;
&lt;li&gt;块级元素的height、width、padding、border、margin都可以设置。&lt;/li&gt;
&lt;li&gt;块级元素在默认情况下，width是父元素的100%。&lt;/li&gt;
&lt;li&gt;可以容纳其他块级元素和内联元素。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://theqwang.github.io/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>在django中把文件上传至七牛</title>
    <link href="https://theqwang.github.io/2015/12/22/%E5%9C%A8django%E4%B8%AD%E6%8A%8A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9B/"/>
    <id>https://theqwang.github.io/2015/12/22/在django中把文件上传至七牛/</id>
    <published>2015-12-22T04:51:42.000Z</published>
    <updated>2017-03-11T22:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写的一个django小项目需要实现用户上传图片的功能，使用到了七牛云存储，特此记录下来。这里我使用的七牛python SDK 版本是7.0.3，函数使用上可能会与旧版有些不同。</p>
<p>原本文件上传需要先把文件上传到自己的业务服务器，再从业务服务器上传到云存储。现在七牛的表单上传可以直接把文件上传到七牛，不再需要业务服务器的中转，节省了流量成本，降低了业务服务器的压力。而且通过设置，还可以在文件上传完成后让客户端自动重定向到一个上传成功的结果页面。这里我就是使用了七牛的表单上传。</p>
<a id="more"></a>
<h2 id="表单上传"><a href="#表单上传" class="headerlink" title="表单上传"></a>表单上传</h2><p>用户上传图片的HTML表单代码如下。其中key用来指定图片保存在七牛中的文件名，token是上传凭证，即用来验证合法性和设置返回信息的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">upload.html</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://upload.qiniu.com/"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"token"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>跳转到上面HTML页面的视图函数中的关键代码如下。其中upload_token函数用于生成表单里的token字段，upload_token函数中的7200代表上传凭证的有效期，returnUrl表示上传成功后的重定向地址，returnBody表示重定向时七牛返回的信息，它是一个base64编码后的json数据，需要解码获取json数据，当上传出错时错误信息直接在url中以明文的形式出现，并不会在返回的json数据里。通过设置mimeLimit还可以限制上传文件的类型。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">views.py</div><div class="line"><span class="keyword">import</span> qiniu</div><div class="line"><span class="keyword">import</span> uuid</div><div class="line">ACCESS_KEY = <span class="string">'七牛分配的公钥'</span></div><div class="line">SECRET_KEY = <span class="string">'七牛分配的私钥'</span></div><div class="line">BUCKET_NAME = <span class="string">'保存文件的仓库名'</span></div><div class="line">key = str(uuid.uuid1()).replace(<span class="string">'-'</span>, <span class="string">''</span>)  <span class="comment"># 这里使用uuid作为保存在七牛里文件的名字。并去掉了uuid中的“-”</span></div><div class="line">q = qiniu.Auth(ACCESS_KEY, SECRET_KEY)</div><div class="line">token = q.upload_token(BUCKET_NAME, key, <span class="number">7200</span>, &#123;<span class="string">'returnUrl'</span>:<span class="string">'http://127.0.0.1:8000/photos/uploadprocessor'</span>, <span class="string">'returnBody'</span>: <span class="string">'&#123;"name": $(fname), "key": $(key)&#125;'</span>, <span class="string">'mimeLimit'</span>:<span class="string">'image/jpeg;image/png'</span>&#125;)</div><div class="line"><span class="keyword">return</span> render_to_response(<span class="string">'photos/upload.html'</span>, &#123;<span class="string">'token'</span>: token, <span class="string">'key'</span>: key&#125;, context_instance=RequestContext(request))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写的一个django小项目需要实现用户上传图片的功能，使用到了七牛云存储，特此记录下来。这里我使用的七牛python SDK 版本是7.0.3，函数使用上可能会与旧版有些不同。&lt;/p&gt;
&lt;p&gt;原本文件上传需要先把文件上传到自己的业务服务器，再从业务服务器上传到云存储。现在七牛的表单上传可以直接把文件上传到七牛，不再需要业务服务器的中转，节省了流量成本，降低了业务服务器的压力。而且通过设置，还可以在文件上传完成后让客户端自动重定向到一个上传成功的结果页面。这里我就是使用了七牛的表单上传。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://theqwang.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="https://theqwang.github.io/tags/python/"/>
    
  </entry>
  
</feed>
