{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/test.css","path":"css/test.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/test.html","path":"css/test.html","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner_bg.jpg","path":"css/images/banner_bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"86739522fb9a4bbd18d6d4d8b1b8aa3bbf73bf0a","modified":1489269790000},{"_id":"source/favicon.ico","hash":"ad545e6895eb3d29adc426474e926e1fb8de414e","modified":1489269790000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1489269790000},{"_id":"themes/landscape/.DS_Store","hash":"996ce34e12f5219cce7ff326644c1610cff255a6","modified":1489269790000},{"_id":"themes/landscape/_config.yml","hash":"df2d2927de39e719947065096bca2a9f67b1d709","modified":1489269790000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1489269790000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1489269790000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1489269790000},{"_id":"source/_posts/.DS_Store","hash":"b7179bbfce368ca836a4271eec4f64dd7fa497d0","modified":1489269790000},{"_id":"source/_posts/SASS入门.md","hash":"5bd1baf6296d9539e668c9441ab292b45238cdbd","modified":1489269790000},{"_id":"source/_posts/CSS-块级元素和行内元素.md","hash":"2840f74c35fee67b7424b259867f3c0fc1b62995","modified":1489269790000},{"_id":"source/_posts/《高性能网站建设进阶指南》总结.md","hash":"e67d8fa4026e454b4f837c2e1b3650717eaca321","modified":1489269790000},{"_id":"source/_posts/不使用-border-radius-实现圆角.md","hash":"69d51da724e54eeb41c916ce8a2dfd1e7d36b681","modified":1489269790000},{"_id":"source/_posts/两列布局分析.md","hash":"b413d36361d5b6aa8186f8076986dd6ea35e99f1","modified":1489269790000},{"_id":"source/_posts/浅析圣杯布局和双飞翼布局.md","hash":"8e8cf2085e616e4791b3574edaee617db9b0062a","modified":1489269790000},{"_id":"source/about/.DS_Store","hash":"14ff1fd90d0c1edbe0f5fc5c77941bd5784dc1b3","modified":1489269790000},{"_id":"source/_posts/在django中把文件上传至七牛.md","hash":"289f2bbf580cf9d4efff865af7c98089983113f2","modified":1489269790000},{"_id":"source/about/index.md","hash":"90427d6a3d94af18a4a1f6003e0394e2e6238557","modified":1489269790000},{"_id":"themes/landscape/layout/.DS_Store","hash":"2a1a2fae06fc8a161341751fa91227e309177120","modified":1489269790000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1489269790000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1489269790000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1489269790000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1489269790000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1489269790000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1489269790000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1489269790000},{"_id":"themes/landscape/scripts/.DS_Store","hash":"84e5a17cfdc7b8e19671003089380f8f540c90da","modified":1489269790000},{"_id":"themes/landscape/source/.DS_Store","hash":"c0bc4a04542c42f96b060cf6b8619eccee73feac","modified":1489269790000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/.DS_Store","hash":"acd944d5ab69787df219d1da6b854549d6b96a5c","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a746bb960ac3a8cdd2b2e7ee7b272444e8e2bd75","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"8c3064e763b67b578915d3dcff9e88272f12a5b3","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1489269790000},{"_id":"themes/landscape/layout/_widget/.DS_Store","hash":"a737500c4561cf7b4d8ca2bf850003ebf8da3825","modified":1489269790000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1489269790000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1489269790000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1489269790000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1489269790000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1489269790000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1489269790000},{"_id":"themes/landscape/source/css/.DS_Store","hash":"97b19579460bdfc25ec9eef891e4f3452bfc2eed","modified":1489269790000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"6202c167f65ce6ff6cb58061f3fc4f1838aa0bdb","modified":1489269790000},{"_id":"themes/landscape/source/css/test.css","hash":"2e9d2a6c4004f5e83f66ef842dca7749a1bc4e0a","modified":1489269790000},{"_id":"themes/landscape/source/css/test.html","hash":"5e946ead70014d458d0547610495d18c03c128ac","modified":1489269790000},{"_id":"themes/landscape/source/css/style.styl","hash":"174c09165e3f305feea24acbbcf383f6102672a6","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1489269790000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/post/.DS_Store","hash":"c4cec4f151a1fc6a4bfac69f385280dd3b6869f4","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1489269790000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/.DS_Store","hash":"f4fc22f88e43b438d444a848b6236d61f6ac3a09","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"d87f7503b755cdca7c227923deafbf5d4e44dbda","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"36eefe6332b86b66023a9884b754d305235846b4","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"17b0eac75cc69b9275f3919523040e686f12e13d","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1489269790000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1489269790000},{"_id":"themes/landscape/source/css/_util/.DS_Store","hash":"e6bcf978b9c5e5c679dc09fba8532ef906b9577d","modified":1489269790000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1489269790000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1489269790000},{"_id":"themes/landscape/source/css/fonts/.DS_Store","hash":"27588bfde66cfec68d02c4c4d2bf2d312d8d2413","modified":1489269790000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1489269790000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1489269790000},{"_id":"themes/landscape/source/css/images/.DS_Store","hash":"463718a385b77f27e51f2d00661b290caa7345e6","modified":1489269790000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489269790000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1489269790000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1489269790000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1489269790000},{"_id":"themes/landscape/source/css/images/banner_bg.jpg","hash":"617b9b234e7290f43ba2d9f53bb288a0799f2cb5","modified":1489269790000},{"_id":"public/atom.xml","hash":"f764c3ade04885abc6fc5cbe28b8f617f292643c","modified":1489716964989},{"_id":"public/sitemap.xml","hash":"9743fd57a3fceb44c209e643279c58eb898c858d","modified":1489716965096},{"_id":"public/about/index.html","hash":"bb33e03a5053a85a161bc9458790e6e322673d31","modified":1489716965111},{"_id":"public/2015/12/23/CSS-块级元素和行内元素/index.html","hash":"ece6cb2feca357e99e92cc77dcd9e16a91f5f3fd","modified":1489716965111},{"_id":"public/2015/12/22/在django中把文件上传至七牛/index.html","hash":"f47d55883946e3ebfe439b9ab6f4b6b244aef801","modified":1489716965111},{"_id":"public/categories/CSS/index.html","hash":"f51c0ec78b9e01cd2a27c41e9ad8a4de058eed4c","modified":1489716965111},{"_id":"public/categories/优化/index.html","hash":"408fe451c4df4e79ebbc47e26a0208e248d979ea","modified":1489716965111},{"_id":"public/categories/Python/index.html","hash":"10c0a63508367fb1def50486df519dcde581558b","modified":1489716965111},{"_id":"public/archives/index.html","hash":"77f20cc825702860cb5d97a2c1b4e226992f0d1a","modified":1489716965111},{"_id":"public/archives/page/2/index.html","hash":"51c61756a7e947784dc085b4ca103fa507b0d942","modified":1489716965111},{"_id":"public/archives/2015/index.html","hash":"71061e75fe2aa11edd1236abe6fc4f84aa88ce17","modified":1489716965111},{"_id":"public/archives/2015/12/index.html","hash":"dc45ef961190289c0103a31b2a299e2a4da5ac08","modified":1489716965111},{"_id":"public/archives/2016/index.html","hash":"c0d7310a141feaa4890b3daa0beeff58b2552a30","modified":1489716965111},{"_id":"public/archives/2016/01/index.html","hash":"0921ac48507b6c3cca923a286852f835ab5d2110","modified":1489716965111},{"_id":"public/archives/2016/02/index.html","hash":"131b4d0f8ee417ebb28c357b5577e32697c6b49b","modified":1489716965111},{"_id":"public/archives/2016/03/index.html","hash":"b48f221edeb3b4c6aec33e45106452b7f3c57168","modified":1489716965111},{"_id":"public/archives/2017/index.html","hash":"50627f581b59df94386f307c67f619a4f896f740","modified":1489716965111},{"_id":"public/archives/2017/03/index.html","hash":"4aed5e5ea6f26ae91694c54d27c1b7afcda304df","modified":1489716965111},{"_id":"public/index.html","hash":"df6755a3cc6926f0cb65607e11400b2f9148aea4","modified":1489716965111},{"_id":"public/page/2/index.html","hash":"0c9fd6176dfe63c3feb8725d0063e0635dd9bbf5","modified":1489716965111},{"_id":"public/tags/python/index.html","hash":"2d69045875173be8ceb47410fb42b596e6d41e80","modified":1489716965111},{"_id":"public/2017/03/16/不使用-border-radius-实现圆角/index.html","hash":"e1bf6f646b0b0f196bd7c26c7baba93bcc74abb7","modified":1489716965111},{"_id":"public/2016/03/17/《高性能网站建设进阶指南》总结/index.html","hash":"2ae88bfe6fc0295ffe351cd9951f2ea9730fdce3","modified":1489716965111},{"_id":"public/2016/02/01/SASS入门/index.html","hash":"57bf586a05ab9945d50a1ed4829f19eca2df67c4","modified":1489716965111},{"_id":"public/2016/01/08/浅析圣杯布局和双飞翼布局/index.html","hash":"64f84ee217d339689d02eba310448dc08f181b8d","modified":1489716965111},{"_id":"public/2016/01/07/两列布局分析/index.html","hash":"a96572f30327e0ff2916b95b83233804a488e228","modified":1489716965111},{"_id":"public/favicon.ico","hash":"ad545e6895eb3d29adc426474e926e1fb8de414e","modified":1489716965119},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489716965121},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489716965121},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489716965121},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489716965121},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489716965121},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1489716965121},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1489716965121},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489716965121},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1489716965121},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489716965121},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1489716965645},{"_id":"public/css/test.html","hash":"5e946ead70014d458d0547610495d18c03c128ac","modified":1489716965653},{"_id":"public/css/test.css","hash":"2e9d2a6c4004f5e83f66ef842dca7749a1bc4e0a","modified":1489716965653},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1489716965653},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1489716965653},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489716965653},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1489716965653},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1489716965653},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1489716965653},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489716965653},{"_id":"public/css/style.css","hash":"55edfe8001d91abce40ec7bd5120b000ef2e44e1","modified":1489716965653},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1489716965653},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1489716965653},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1489716965655},{"_id":"public/css/images/banner_bg.jpg","hash":"617b9b234e7290f43ba2d9f53bb288a0799f2cb5","modified":1489716965665}],"Category":[{"name":"CSS","_id":"cj0d70lyw0003ckmlyeovawii"},{"name":"优化","_id":"cj0d70lzj000bckmlungq41gi"},{"name":"Python","_id":"cj0d70lzl000fckmlgdp126ni"}],"Data":[],"Page":[{"title":"about","date":"2015-12-22T11:55:08.000Z","_content":"\nHello，我是theqwang，现在还是一名学生，喜欢电子产品、动漫、球鞋...，虽然嗜好很多，但是能力却很小。\n\n现在正在解锁前端技能树...\n\n## Contact Me\n\nEmail：theqwang@foxmail.com\n","source":"about/index.md","raw":"title: about\ndate: 2015-12-22 19:55:08\n---\n\nHello，我是theqwang，现在还是一名学生，喜欢电子产品、动漫、球鞋...，虽然嗜好很多，但是能力却很小。\n\n现在正在解锁前端技能树...\n\n## Contact Me\n\nEmail：theqwang@foxmail.com\n","updated":"2017-03-11T22:03:10.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0d70lyu0001ckml8tywt3xf","content":"<p>Hello，我是theqwang，现在还是一名学生，喜欢电子产品、动漫、球鞋…，虽然嗜好很多，但是能力却很小。</p>\n<p>现在正在解锁前端技能树…</p>\n<h2 id=\"Contact-Me\"><a href=\"#Contact-Me\" class=\"headerlink\" title=\"Contact Me\"></a>Contact Me</h2><p>Email：theqwang@foxmail.com</p>\n","excerpt":"","more":"<p>Hello，我是theqwang，现在还是一名学生，喜欢电子产品、动漫、球鞋…，虽然嗜好很多，但是能力却很小。</p>\n<p>现在正在解锁前端技能树…</p>\n<h2 id=\"Contact-Me\"><a href=\"#Contact-Me\" class=\"headerlink\" title=\"Contact Me\"></a>Contact Me</h2><p>Email：theqwang@foxmail.com</p>\n"}],"Post":[{"title":"SASS学习笔记","date":"2016-02-01T04:01:56.000Z","_content":"# 一、安装\nsass 是基于 ruby 开发的，因此安装 sass 需要先安装 ruby。    \n安装完 ruby，通过 ruby 的 gem 安装 sass，在命令行输入：\n\n```\ngem install sass\n```\n\n检查 sass 是否安装成功：\n\n```\nsass -v\n```\n\n<!--more-->\n\n如果能输出 sass 的版本信息，就说明 sass 安装成功了。\n\n# 二、编译\n## 1.  手动编译\n命令行下，在项目所在目录使用 sass 命令手动编译 sass 文件，sass 文件的扩展名为 .scss。例子：\n\n```\nsass input.scss:output.css\n```\n\n冒号前面是要编译的文件，冒号后面是要编译生成的 css 文件。\n\n## 2. 自动编译\n还可以在命令行下使用 sass --watch 命令自动监视 sass 文件的变化并编译。例子：\n\n```\nsass --watch input.css:output.css\n```\n\n也可以自动监视整个目录的变化并自动编译：\n\n```\nsass --watch .:.\n```\n\n默认自动编译生成的 css 文件与 sass 文件同名。\n\n# 三、输出样式\nsass 编译输出的 css 文件有四种样式：\n\n* nested（嵌套，默认）\n* compact（紧凑）\n* expanded（扩展）\n* compressed（压缩)\n\n在编译时使用 --style 命令可以修改输出的 css 的样式：\n\n```\nsass --watch .:. --style compact\n```\n\n# 四、变量\nsass 使用 $ 定义一个变量，用 : 定义变量值。\n\n```\n$primary-color: #333;\n```\n\n变量的值可以用其他变量：\n\n```\n$primary-border: 1px solid $primary-color;\n```\n\n补充：\n> 1. 变量名中的中划线和下划线可以互相替换。\n> 2. 变量如果定义在某个 {} 规则块里，那么该变量只能在此规则块内使用，类似作用域。\n\n# 五、嵌套\n## 1.选择器嵌套\n在 css 里一些选择器是重复出现的，可以使用 sass 的嵌套语法减少重复：\n\n```\n.nav {\n\theight: 70px;\n\tul {\n\t\tmargin: 0;\n\t\tli {\n\t\t\tlist-style-type: none;\n\t\t\tpadding: 5px;\n\t\t\t}\n\t\t\t}\n}\n```\n\n在嵌套语法中，使用 & 来表示父选择器。当包含父选择器标识符的嵌套规则被打开时，它不会像后代选择器那样进行拼接，而是&被父选择器直接替换：\n\n```\na {\n\tdisplay: block;\n\t&:hover {\n\t\tbackground-color: #fff;\n\t\t}\n}\n```\n## 2.属性嵌套\n嵌套属性的规则是这样的：把属性名从中划线-的地方断开，在根属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中。\n例如，下面的 font-size 和 font-weight 属性可以嵌套 font。\n\n```\nbody {\n\t  font-size: 15px;\n\t    font-weight: 600;\n}\n```\n\n嵌套写法： \n\n```\nbody {\n\tfont: {\n\t\tsize: 15px;\n\t\tweight: 600;\n\t\t}\n}\n```\n\n# 六、@mixin\nmixin 是一组样式的集合，主要用于大段样式的重用。\n\n mixin 类似于javascript中的函数，mixin 有名字和参数，参数可以省略，定义 mixin 的格式如下：\n\n ```\n @mixin 名字 (参数1，参数2...) {......}\n ```\n\n 引用 mixin 时使用如下写法：\n\n ```\n @include mixin的名字;\n ```\n\n mixin 中的参数写法与 sass 变量写法一样，变量的赋值既可以按形参顺序赋值，也可以按参数名赋值，sass 允许通过语法 $name: value 的形式指定每个参数的值。。来看一个具体的例子：\n\n ```\n @mixin alert ($text-color, $background) {\n\t color: $text-color;\n\t background-color: $background;\n }\n .alert-warning {\n\t @include alert(#333, #ffflert {\n\t\t padding: 15px;\n\t }\n\t .alert a {\n\t\t font-size: 20px;\n\t }\n\t .alert-info {\n\t\t @extend .alert;\n\t\t background-color: #FFF;\n\t }\n\t ```\n\n\t 生成如下的 css：\n\n\t ```\n\t .alert, .alert-info {\n\t\t   padding: 15px;\n\t }\n\t .alert a, .alert-info a {\n\t\t   font-size: 20px;\n\t }\n\t .alert-info {\n\t\t   background-color: #FFF;\n\t }\n\t ```\n\n\t 注意，使用 @extend 会继承选择器下所有子样式。上面的例子里，.alert-info 不仅继承了 .alert 的样式，还会继承 .alert a 的样式。\n\n\t 如果 .alert extend 了 .alert-info，等效于对应的 html 的 class=\"alert alert-info\"，\n\n## 1.何时使用@extend\n混合器主要用于展示性样式的重用，而类名用于语义化样式的重用。因为继承是基于类的（有时是基于其他类型的选择器），所以继承应该是建立在语义化的关系上。当一个元素拥有的类（比如说.seriousError）表明它属于另一个类（比如说.error），这时使用继承再合适不过了。\n\n# 八、@import与partials\ncss 使用 @import 在一个 css 文件里引入其他 css 文件，然而，只有执行到 @import 时浏览器才会去下载导入的css 文件，使页面加载变慢，因为增加了 HTTP 连接。\n\nsass 扩展了 @import，在一个  sass 文件里也可以使用 @import 导入其他 sass 文件，然后 sass 会把它编译成一个文件，避免了额外的下载请求，另外，所有在被导入文件中定义的变量和 mixin 均可在导入文件中使用。\n\n这样我们可以把 sass 分成不同的部分，即模块化，每个模块在 sass 中叫做 partials（局部文件），partials 的文件名以 _ 开头，这样 sass 就不会单独编译 partials 而只把该文件用来导入。\n\n例如，我们可以创建 _base.scss 的 partials 模块来重置基本样式，@import 导入 partials 时直接用文件名，不需要加 _ 和文件扩展名：\n\n```\n@import ”base“；\n```\n\n## 1. 局部导入\n ass允许 @import 命令写在 css {} 规则内，这种导入方式下，生成对应的css文件时，局部文件会被直接插入到css规则内导入它的地方。被导入的局部文件中定义的所有变量和混合器，也会在这个规则范围内生效。这些变量和混合器不会全局有效。\n\n ```\n .nav {\n\t @import \"base\";\n\t text-decoration: none;\n }\n ```\n\n## 2.导入原生css\nsass兼容原生 css，所以也支持原生的 css@import。在下列三种情况下会生成原生的CSS@import，尽管这会造成浏览器解析css时的额外下载：\n\n* 被导入文件的名字以.css结尾\n* 被导入文件的名字是一个URL地址\n* 被导入文件的名字是CSS的url()值\n\n## 3.默认变量值\n一般情况下，反复声明一个变量值时，只有最后一个声明有效。\n\n假如你写了一个可被他人通过 @import 导入的 sass 库文件，你可能希望导入者可以定制修改 sass 库文件中的某些值。使用 sass 的 !default 标签可以实现这个目的。!default用于变量，含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。\n\n\n```\n$alert-color: #8d8d8d !default;\n```\n\n# 九、注释\nsass 包含 3 中注释方式：\n\n* 单行注释： //注释内容\n* 多行注释：/* 注释内容 */\n* 强制注释：/*! 注释内容 */\n\n单行注释不会出现在编译后的 css 文件里；多行注释会出现在编译后的 css 文件里，但是不会出现在压缩编译的 css 文件里；强制注释会一直出现在 css 文件里。\n\n---\n> # sass高级部分\n\n---\n\n# 一、数据类型\ncss 属性值和 sass 变量可以分成不同的数据类型。\n\n在命令行下使用 sass -i 命令可以启动 sass 的交互界面，在交互界面下使用 type-of() 函数可以判断数据的类型。\n\n数据类型有如下几种：\n\n* number：5、5px、5deg\n* string：hello、\"world\"\n* list：1px solid #111、 20px 15px\n* color：#ff0000、red、rgba(0, 0, 0, 1)、rgb(1, 1, 1)、hsl(0, 100%, 50%)\n* map：(padding: 10px, margin: 10px)\n* boolean: true、false\n\n## 1-1.数字\n在 sass 里宽度、高度等属性的值的数据类型是数字，数字可以带 px、 rem 等单位。数字类型的值可以使用 +、 -、 *、 /、 % 运算，其中 / 除法是 css 的保留字符，我们可以使用 (a/b) 的形式进行除法运算。\n\n## 1-2.数字函数\nsass 提供了一些数字运算的函数，方便计算。下面列举一些常见的数字函数：\n\n* abs()：取绝对值\n* round()：四舍五入\n* ceil()：舍去小数部位\n* floor()：有小数部分就进位\n* min()：多个数字里取最小值\n* max()：多个数字里取最大值\n\n## 1-3.字符串\ncss 里 normal、left、right、absolute 等属性值都是字符串类型，用 “” 包裹的属性值也是字符串类型，两者的区别是引号包裹的字符串可以含有空格。\n\n使用 + 可以连接两个字符串。使用 + 也可以连接一个字符串和一个数字。用 -、/连接字符串都只会保留-、/，用 * 连接字符串会报错。\n\n## 1-4.字符串函数\nsass 提供了一些字符串函数来处理字符串。以下是一些常用是字符串函数：\n\n*  to-upper-case()：把字符串转换成大写\n*  to-lower-case()：把字符串转换成小写\n*  str-length()：计算字符串的长度\n*  str-index(a, b)：求子串 b 在 a 里出现的起始位置，注意起始位置从1开始\n*  str-insert(a, b, num)：把字符串 b 插入到字符串 a 的 num 位置。\n\n## 1-5.颜色\ncss 里使用HEX、字符串、RGB、RGBA、HSL等多种方式表示颜色。\n\n## 1-6.颜色函数\n* RGB(红, 绿, 蓝)：红绿蓝的值可以使用 0~255 或百分比\n* RGBA(红，绿，蓝，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明\n* HSL(色相，饱和度，明度)：色相的值是 0~360，饱和度和明度的值是百分比\n* HSLA(色相，饱和度，明度，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明\n\nsass 提供的颜色函数：\n\n* adjust-hue(颜色值，角度值)：调整颜色的色相值。\n* lighten(颜色值，百分数)：使颜色变亮，明度的增加值就是百分数\n* darken(颜色值，百分数)：使颜色变暗，明度的减少值就是百分数\n* saturate(颜色值，百分数)：增加颜色的纯度，即增加颜色的饱和度\n* desaturate(颜色值，百分数)：减少颜色的纯度，即降低颜色的饱和度\n* opacity(颜色，数字)：增加颜色的不透明度\n* transparentize(颜色，数字)：减少颜色的不透明度\n\n## 1-7.列表\nsass 用空格或逗号分隔的多个值都是列表，如 border: 1px solid #eee; font-family: courier, monospace;\n\n列表里可以包含其他列表，如下 padding 的值都是两个列表。\n\n> padding: 10px 5px, 0 5px; \n\n> padding: (10px 5px) (0 5px); \n\nsass 在编译时会去掉逗号和括号。\n\n## 1-8.列表函数\n列表类似于其他语言里的数组。下面是常见的列表函数：\n\n* length()：求表列有多少个项目\n* nth(列表，num)：返回列表里第 num 项，num是从1开始计算的\n* index(列表, value)：返回 value 项在列表里的索引值\n* append(list1, value)：在 list1 后添加 value 项，还可以有第三个参数指定分隔符\n* join(list1, list2)：拼接两个列表，还可以有第三个参数指定分隔符\n\n## 1-9.map\nmap 类似于 python 的字典，是键值对数据类型。 map 类型书写方式如下：(key1: value1, key2: value2...)\n\n列表函数也都可以应用在 map 对象上，map 还有自己独有的函数，如下：\n\n* map-get(map, key)：返回 map 中对应 key 的值\n* map-keys(map)：返回 map 里所有的 key\n* map-values(map)：返回 map 里所有的 value\n* map-has-key(map, key)：判断 map 是否有对应的 key\n* map-merge(map1, map2)：合并两个 map\n* map-remove(map, key)：从 map 里删除对应的 key 项\n\n## 1-10.boolean\nboolean 包含 true、false。\n\n比较运算符：>、<、>=、<=、== ，逻辑运算符：and、or、not 都会返回 boolean 值。\n\n# 二、interpolation\ninterpolation 可以把变量或者表达式的值插入到选择器、属性名或注释里。 使用 #{ 变量|表达式 } 的形式使用 interpolation。 例子：\n\n```\n$version: \"0.0.1\";\n$type: \"alert\";\n$attr: \"border\";\n/* #{$version} */\nbody {\n\tpadding: $version;\n} \na-#{$type} {\n\t#{$attr}-type: solid;\n}\n```\n\n# 三、控制语句\n## @if\nsass 可以使用 @if 语句实现条件控制，写法如下： @if 条件 {...} @else {...}\n\n例子：\n\n```\n$theme: \"dark\";\nbody {\n\t@if $theme == \"dark\" {\n\t\tbackground-color: #111;\n\t\t} @else {\n\t\t\tbackground-color: #FFF;\n\t\t\t}\n}\n```\n\n## @for\n@for 循环语句的写法如下： @for $var from <开始值> through | to <结束值> {}。循环中 $var 的值每次增加1，through 与 to 的不同之处在于 through 会包括结束值，to 不包括结束值。\n\n例子，一个简单的网格系统：\n\n```\n$columns: 4;\n@for $i from 1 through $columns {\n\t.col-#{$i} {\n\t\twidth: 100% / $columns * $i;\n\t\t}\n}\n```\n\n生成如下 css：\n\n```\n.col-1 {\n\t  width: 25%;\n}\n.col-2 {\n\t  width: 50%;\n}\n.col-3 {\n\t  width: 75%;\n}\n.col-4 {\n\t  width: 100%;\n}\n```\n\n## @each\n如果要操作列表里的每一项，可以使用 @each。写法如下：@each $var in $list {...}。\n\n```\n$icons: success warning error;\n@each $icon in $icons {\n\t.icon-#{$icon} {\n\t\tbackground-image: url(../img/icon-#{$icon}.jpg);\n\t\t}\n}\n```\n\n生成如下 css：\n\n```\n.icon-success {\n\t  background-image: url(../img/icon-success.jpg);\n}\n.icon-warning {\n\t  background-image: url(../img/icon-warning.jpg);\n}\n.icon-error {\n\t  background-image: url(../img/icon-error.jpg);\n}\n```\n\n## @while\n@while 语句也可以实现循环，但是要比 @for 更灵活，要注意 @while 语句里要有结束循环的语句，不然会一直循环下去。写法： @while 条件 {...}。\n\n```\n$i: 6;\n@while $i > 0 {\n\t.iterm-#{$i} {\n\t\twidth: 5px * $i;\n\t\t}\n\t\t$i: $i - 2;  // 退出循环的语句\n}\n```\n\n生成的 css：\n\n```\n.iterm-6 {\n\t  width: 30px;\n}\n.iterm-4 {\n\t  width: 20px;\n}\n.iterm-2 {\n\t  width: 10px;\n}\n```\n\n# 四、自定义函数\nsass 允许用户自定义函数，写法： @function 名称 (参数1，参数2...) {...@return...}。使用时，直接用函数名调用。\n\n例子：\n\n\n```\n$colors: (dark: #000, light: #fff);\n@function color ($key) {\n\t@return map-get($colors, $key);\n}\nbody {\n\tbackground-color: color(light);\n}\n```\n\n生成的 css：\n\n```\nbody {\n\t  background-color: #fff;\n}\n```\n\n## 警告与错误\n在自定义函数里，可以通过 @warn 和 @error 语句在命令行里输出用户自定义的警告和错误，提高函数的健壮性。\n\n前面的 function 例子可以该写成：\n\n```\n@function color ($key) {\n\t@if not map-has-key($colors, $key) {\n\t\t@warn \"没有 #{$key} 这个颜色\";\n\t\t}\n\t\t@return map-get($colors, $key);\n}\n```\n","source":"_posts/SASS入门.md","raw":"title: SASS学习笔记\ndate: 2016-02-01 12:01:56\ncategories: CSS\ntags:\n---\n# 一、安装\nsass 是基于 ruby 开发的，因此安装 sass 需要先安装 ruby。    \n安装完 ruby，通过 ruby 的 gem 安装 sass，在命令行输入：\n\n```\ngem install sass\n```\n\n检查 sass 是否安装成功：\n\n```\nsass -v\n```\n\n<!--more-->\n\n如果能输出 sass 的版本信息，就说明 sass 安装成功了。\n\n# 二、编译\n## 1.  手动编译\n命令行下，在项目所在目录使用 sass 命令手动编译 sass 文件，sass 文件的扩展名为 .scss。例子：\n\n```\nsass input.scss:output.css\n```\n\n冒号前面是要编译的文件，冒号后面是要编译生成的 css 文件。\n\n## 2. 自动编译\n还可以在命令行下使用 sass --watch 命令自动监视 sass 文件的变化并编译。例子：\n\n```\nsass --watch input.css:output.css\n```\n\n也可以自动监视整个目录的变化并自动编译：\n\n```\nsass --watch .:.\n```\n\n默认自动编译生成的 css 文件与 sass 文件同名。\n\n# 三、输出样式\nsass 编译输出的 css 文件有四种样式：\n\n* nested（嵌套，默认）\n* compact（紧凑）\n* expanded（扩展）\n* compressed（压缩)\n\n在编译时使用 --style 命令可以修改输出的 css 的样式：\n\n```\nsass --watch .:. --style compact\n```\n\n# 四、变量\nsass 使用 $ 定义一个变量，用 : 定义变量值。\n\n```\n$primary-color: #333;\n```\n\n变量的值可以用其他变量：\n\n```\n$primary-border: 1px solid $primary-color;\n```\n\n补充：\n> 1. 变量名中的中划线和下划线可以互相替换。\n> 2. 变量如果定义在某个 {} 规则块里，那么该变量只能在此规则块内使用，类似作用域。\n\n# 五、嵌套\n## 1.选择器嵌套\n在 css 里一些选择器是重复出现的，可以使用 sass 的嵌套语法减少重复：\n\n```\n.nav {\n\theight: 70px;\n\tul {\n\t\tmargin: 0;\n\t\tli {\n\t\t\tlist-style-type: none;\n\t\t\tpadding: 5px;\n\t\t\t}\n\t\t\t}\n}\n```\n\n在嵌套语法中，使用 & 来表示父选择器。当包含父选择器标识符的嵌套规则被打开时，它不会像后代选择器那样进行拼接，而是&被父选择器直接替换：\n\n```\na {\n\tdisplay: block;\n\t&:hover {\n\t\tbackground-color: #fff;\n\t\t}\n}\n```\n## 2.属性嵌套\n嵌套属性的规则是这样的：把属性名从中划线-的地方断开，在根属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中。\n例如，下面的 font-size 和 font-weight 属性可以嵌套 font。\n\n```\nbody {\n\t  font-size: 15px;\n\t    font-weight: 600;\n}\n```\n\n嵌套写法： \n\n```\nbody {\n\tfont: {\n\t\tsize: 15px;\n\t\tweight: 600;\n\t\t}\n}\n```\n\n# 六、@mixin\nmixin 是一组样式的集合，主要用于大段样式的重用。\n\n mixin 类似于javascript中的函数，mixin 有名字和参数，参数可以省略，定义 mixin 的格式如下：\n\n ```\n @mixin 名字 (参数1，参数2...) {......}\n ```\n\n 引用 mixin 时使用如下写法：\n\n ```\n @include mixin的名字;\n ```\n\n mixin 中的参数写法与 sass 变量写法一样，变量的赋值既可以按形参顺序赋值，也可以按参数名赋值，sass 允许通过语法 $name: value 的形式指定每个参数的值。。来看一个具体的例子：\n\n ```\n @mixin alert ($text-color, $background) {\n\t color: $text-color;\n\t background-color: $background;\n }\n .alert-warning {\n\t @include alert(#333, #ffflert {\n\t\t padding: 15px;\n\t }\n\t .alert a {\n\t\t font-size: 20px;\n\t }\n\t .alert-info {\n\t\t @extend .alert;\n\t\t background-color: #FFF;\n\t }\n\t ```\n\n\t 生成如下的 css：\n\n\t ```\n\t .alert, .alert-info {\n\t\t   padding: 15px;\n\t }\n\t .alert a, .alert-info a {\n\t\t   font-size: 20px;\n\t }\n\t .alert-info {\n\t\t   background-color: #FFF;\n\t }\n\t ```\n\n\t 注意，使用 @extend 会继承选择器下所有子样式。上面的例子里，.alert-info 不仅继承了 .alert 的样式，还会继承 .alert a 的样式。\n\n\t 如果 .alert extend 了 .alert-info，等效于对应的 html 的 class=\"alert alert-info\"，\n\n## 1.何时使用@extend\n混合器主要用于展示性样式的重用，而类名用于语义化样式的重用。因为继承是基于类的（有时是基于其他类型的选择器），所以继承应该是建立在语义化的关系上。当一个元素拥有的类（比如说.seriousError）表明它属于另一个类（比如说.error），这时使用继承再合适不过了。\n\n# 八、@import与partials\ncss 使用 @import 在一个 css 文件里引入其他 css 文件，然而，只有执行到 @import 时浏览器才会去下载导入的css 文件，使页面加载变慢，因为增加了 HTTP 连接。\n\nsass 扩展了 @import，在一个  sass 文件里也可以使用 @import 导入其他 sass 文件，然后 sass 会把它编译成一个文件，避免了额外的下载请求，另外，所有在被导入文件中定义的变量和 mixin 均可在导入文件中使用。\n\n这样我们可以把 sass 分成不同的部分，即模块化，每个模块在 sass 中叫做 partials（局部文件），partials 的文件名以 _ 开头，这样 sass 就不会单独编译 partials 而只把该文件用来导入。\n\n例如，我们可以创建 _base.scss 的 partials 模块来重置基本样式，@import 导入 partials 时直接用文件名，不需要加 _ 和文件扩展名：\n\n```\n@import ”base“；\n```\n\n## 1. 局部导入\n ass允许 @import 命令写在 css {} 规则内，这种导入方式下，生成对应的css文件时，局部文件会被直接插入到css规则内导入它的地方。被导入的局部文件中定义的所有变量和混合器，也会在这个规则范围内生效。这些变量和混合器不会全局有效。\n\n ```\n .nav {\n\t @import \"base\";\n\t text-decoration: none;\n }\n ```\n\n## 2.导入原生css\nsass兼容原生 css，所以也支持原生的 css@import。在下列三种情况下会生成原生的CSS@import，尽管这会造成浏览器解析css时的额外下载：\n\n* 被导入文件的名字以.css结尾\n* 被导入文件的名字是一个URL地址\n* 被导入文件的名字是CSS的url()值\n\n## 3.默认变量值\n一般情况下，反复声明一个变量值时，只有最后一个声明有效。\n\n假如你写了一个可被他人通过 @import 导入的 sass 库文件，你可能希望导入者可以定制修改 sass 库文件中的某些值。使用 sass 的 !default 标签可以实现这个目的。!default用于变量，含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。\n\n\n```\n$alert-color: #8d8d8d !default;\n```\n\n# 九、注释\nsass 包含 3 中注释方式：\n\n* 单行注释： //注释内容\n* 多行注释：/* 注释内容 */\n* 强制注释：/*! 注释内容 */\n\n单行注释不会出现在编译后的 css 文件里；多行注释会出现在编译后的 css 文件里，但是不会出现在压缩编译的 css 文件里；强制注释会一直出现在 css 文件里。\n\n---\n> # sass高级部分\n\n---\n\n# 一、数据类型\ncss 属性值和 sass 变量可以分成不同的数据类型。\n\n在命令行下使用 sass -i 命令可以启动 sass 的交互界面，在交互界面下使用 type-of() 函数可以判断数据的类型。\n\n数据类型有如下几种：\n\n* number：5、5px、5deg\n* string：hello、\"world\"\n* list：1px solid #111、 20px 15px\n* color：#ff0000、red、rgba(0, 0, 0, 1)、rgb(1, 1, 1)、hsl(0, 100%, 50%)\n* map：(padding: 10px, margin: 10px)\n* boolean: true、false\n\n## 1-1.数字\n在 sass 里宽度、高度等属性的值的数据类型是数字，数字可以带 px、 rem 等单位。数字类型的值可以使用 +、 -、 *、 /、 % 运算，其中 / 除法是 css 的保留字符，我们可以使用 (a/b) 的形式进行除法运算。\n\n## 1-2.数字函数\nsass 提供了一些数字运算的函数，方便计算。下面列举一些常见的数字函数：\n\n* abs()：取绝对值\n* round()：四舍五入\n* ceil()：舍去小数部位\n* floor()：有小数部分就进位\n* min()：多个数字里取最小值\n* max()：多个数字里取最大值\n\n## 1-3.字符串\ncss 里 normal、left、right、absolute 等属性值都是字符串类型，用 “” 包裹的属性值也是字符串类型，两者的区别是引号包裹的字符串可以含有空格。\n\n使用 + 可以连接两个字符串。使用 + 也可以连接一个字符串和一个数字。用 -、/连接字符串都只会保留-、/，用 * 连接字符串会报错。\n\n## 1-4.字符串函数\nsass 提供了一些字符串函数来处理字符串。以下是一些常用是字符串函数：\n\n*  to-upper-case()：把字符串转换成大写\n*  to-lower-case()：把字符串转换成小写\n*  str-length()：计算字符串的长度\n*  str-index(a, b)：求子串 b 在 a 里出现的起始位置，注意起始位置从1开始\n*  str-insert(a, b, num)：把字符串 b 插入到字符串 a 的 num 位置。\n\n## 1-5.颜色\ncss 里使用HEX、字符串、RGB、RGBA、HSL等多种方式表示颜色。\n\n## 1-6.颜色函数\n* RGB(红, 绿, 蓝)：红绿蓝的值可以使用 0~255 或百分比\n* RGBA(红，绿，蓝，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明\n* HSL(色相，饱和度，明度)：色相的值是 0~360，饱和度和明度的值是百分比\n* HSLA(色相，饱和度，明度，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明\n\nsass 提供的颜色函数：\n\n* adjust-hue(颜色值，角度值)：调整颜色的色相值。\n* lighten(颜色值，百分数)：使颜色变亮，明度的增加值就是百分数\n* darken(颜色值，百分数)：使颜色变暗，明度的减少值就是百分数\n* saturate(颜色值，百分数)：增加颜色的纯度，即增加颜色的饱和度\n* desaturate(颜色值，百分数)：减少颜色的纯度，即降低颜色的饱和度\n* opacity(颜色，数字)：增加颜色的不透明度\n* transparentize(颜色，数字)：减少颜色的不透明度\n\n## 1-7.列表\nsass 用空格或逗号分隔的多个值都是列表，如 border: 1px solid #eee; font-family: courier, monospace;\n\n列表里可以包含其他列表，如下 padding 的值都是两个列表。\n\n> padding: 10px 5px, 0 5px; \n\n> padding: (10px 5px) (0 5px); \n\nsass 在编译时会去掉逗号和括号。\n\n## 1-8.列表函数\n列表类似于其他语言里的数组。下面是常见的列表函数：\n\n* length()：求表列有多少个项目\n* nth(列表，num)：返回列表里第 num 项，num是从1开始计算的\n* index(列表, value)：返回 value 项在列表里的索引值\n* append(list1, value)：在 list1 后添加 value 项，还可以有第三个参数指定分隔符\n* join(list1, list2)：拼接两个列表，还可以有第三个参数指定分隔符\n\n## 1-9.map\nmap 类似于 python 的字典，是键值对数据类型。 map 类型书写方式如下：(key1: value1, key2: value2...)\n\n列表函数也都可以应用在 map 对象上，map 还有自己独有的函数，如下：\n\n* map-get(map, key)：返回 map 中对应 key 的值\n* map-keys(map)：返回 map 里所有的 key\n* map-values(map)：返回 map 里所有的 value\n* map-has-key(map, key)：判断 map 是否有对应的 key\n* map-merge(map1, map2)：合并两个 map\n* map-remove(map, key)：从 map 里删除对应的 key 项\n\n## 1-10.boolean\nboolean 包含 true、false。\n\n比较运算符：>、<、>=、<=、== ，逻辑运算符：and、or、not 都会返回 boolean 值。\n\n# 二、interpolation\ninterpolation 可以把变量或者表达式的值插入到选择器、属性名或注释里。 使用 #{ 变量|表达式 } 的形式使用 interpolation。 例子：\n\n```\n$version: \"0.0.1\";\n$type: \"alert\";\n$attr: \"border\";\n/* #{$version} */\nbody {\n\tpadding: $version;\n} \na-#{$type} {\n\t#{$attr}-type: solid;\n}\n```\n\n# 三、控制语句\n## @if\nsass 可以使用 @if 语句实现条件控制，写法如下： @if 条件 {...} @else {...}\n\n例子：\n\n```\n$theme: \"dark\";\nbody {\n\t@if $theme == \"dark\" {\n\t\tbackground-color: #111;\n\t\t} @else {\n\t\t\tbackground-color: #FFF;\n\t\t\t}\n}\n```\n\n## @for\n@for 循环语句的写法如下： @for $var from <开始值> through | to <结束值> {}。循环中 $var 的值每次增加1，through 与 to 的不同之处在于 through 会包括结束值，to 不包括结束值。\n\n例子，一个简单的网格系统：\n\n```\n$columns: 4;\n@for $i from 1 through $columns {\n\t.col-#{$i} {\n\t\twidth: 100% / $columns * $i;\n\t\t}\n}\n```\n\n生成如下 css：\n\n```\n.col-1 {\n\t  width: 25%;\n}\n.col-2 {\n\t  width: 50%;\n}\n.col-3 {\n\t  width: 75%;\n}\n.col-4 {\n\t  width: 100%;\n}\n```\n\n## @each\n如果要操作列表里的每一项，可以使用 @each。写法如下：@each $var in $list {...}。\n\n```\n$icons: success warning error;\n@each $icon in $icons {\n\t.icon-#{$icon} {\n\t\tbackground-image: url(../img/icon-#{$icon}.jpg);\n\t\t}\n}\n```\n\n生成如下 css：\n\n```\n.icon-success {\n\t  background-image: url(../img/icon-success.jpg);\n}\n.icon-warning {\n\t  background-image: url(../img/icon-warning.jpg);\n}\n.icon-error {\n\t  background-image: url(../img/icon-error.jpg);\n}\n```\n\n## @while\n@while 语句也可以实现循环，但是要比 @for 更灵活，要注意 @while 语句里要有结束循环的语句，不然会一直循环下去。写法： @while 条件 {...}。\n\n```\n$i: 6;\n@while $i > 0 {\n\t.iterm-#{$i} {\n\t\twidth: 5px * $i;\n\t\t}\n\t\t$i: $i - 2;  // 退出循环的语句\n}\n```\n\n生成的 css：\n\n```\n.iterm-6 {\n\t  width: 30px;\n}\n.iterm-4 {\n\t  width: 20px;\n}\n.iterm-2 {\n\t  width: 10px;\n}\n```\n\n# 四、自定义函数\nsass 允许用户自定义函数，写法： @function 名称 (参数1，参数2...) {...@return...}。使用时，直接用函数名调用。\n\n例子：\n\n\n```\n$colors: (dark: #000, light: #fff);\n@function color ($key) {\n\t@return map-get($colors, $key);\n}\nbody {\n\tbackground-color: color(light);\n}\n```\n\n生成的 css：\n\n```\nbody {\n\t  background-color: #fff;\n}\n```\n\n## 警告与错误\n在自定义函数里，可以通过 @warn 和 @error 语句在命令行里输出用户自定义的警告和错误，提高函数的健壮性。\n\n前面的 function 例子可以该写成：\n\n```\n@function color ($key) {\n\t@if not map-has-key($colors, $key) {\n\t\t@warn \"没有 #{$key} 这个颜色\";\n\t\t}\n\t\t@return map-get($colors, $key);\n}\n```\n","slug":"SASS入门","published":1,"updated":"2017-03-11T22:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0d70lyr0000ckmlefxvuob5","content":"<h1 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h1><p>sass 是基于 ruby 开发的，因此安装 sass 需要先安装 ruby。<br>安装完 ruby，通过 ruby 的 gem 安装 sass，在命令行输入：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"keyword\">install</span> sass</div></pre></td></tr></table></figure>\n<p>检查 sass 是否安装成功：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">sass -v</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>如果能输出 sass 的版本信息，就说明 sass 安装成功了。</p>\n<h1 id=\"二、编译\"><a href=\"#二、编译\" class=\"headerlink\" title=\"二、编译\"></a>二、编译</h1><h2 id=\"1-手动编译\"><a href=\"#1-手动编译\" class=\"headerlink\" title=\"1.  手动编译\"></a>1.  手动编译</h2><p>命令行下，在项目所在目录使用 sass 命令手动编译 sass 文件，sass 文件的扩展名为 .scss。例子：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass <span class=\"selector-tag\">input</span><span class=\"selector-class\">.scss</span>:output.css</div></pre></td></tr></table></figure>\n<p>冒号前面是要编译的文件，冒号后面是要编译生成的 css 文件。</p>\n<h2 id=\"2-自动编译\"><a href=\"#2-自动编译\" class=\"headerlink\" title=\"2. 自动编译\"></a>2. 自动编译</h2><p>还可以在命令行下使用 sass –watch 命令自动监视 sass 文件的变化并编译。例子：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass --watch <span class=\"selector-tag\">input</span><span class=\"selector-class\">.css</span>:output.css</div></pre></td></tr></table></figure>\n<p>也可以自动监视整个目录的变化并自动编译：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass <span class=\"comment\">--watch .:.</span></div></pre></td></tr></table></figure>\n<p>默认自动编译生成的 css 文件与 sass 文件同名。</p>\n<h1 id=\"三、输出样式\"><a href=\"#三、输出样式\" class=\"headerlink\" title=\"三、输出样式\"></a>三、输出样式</h1><p>sass 编译输出的 css 文件有四种样式：</p>\n<ul>\n<li>nested（嵌套，默认）</li>\n<li>compact（紧凑）</li>\n<li>expanded（扩展）</li>\n<li>compressed（压缩)</li>\n</ul>\n<p>在编译时使用 –style 命令可以修改输出的 css 的样式：</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">sass</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">watch</span> <span class=\"string\">.</span><span class=\"comment\">:</span><span class=\"string\">.</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">style</span> <span class=\"comment\">compact</span></div></pre></td></tr></table></figure>\n<h1 id=\"四、变量\"><a href=\"#四、变量\" class=\"headerlink\" title=\"四、变量\"></a>四、变量</h1><p>sass 使用 $ 定义一个变量，用 : 定义变量值。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$primary-color</span>: <span class=\"number\">#333</span>;</div></pre></td></tr></table></figure>\n<p>变量的值可以用其他变量：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$primary-border: <span class=\"number\">1</span>px solid $primary-<span class=\"keyword\">color</span>;</div></pre></td></tr></table></figure>\n<p>补充：</p>\n<blockquote>\n<ol>\n<li>变量名中的中划线和下划线可以互相替换。</li>\n<li>变量如果定义在某个 {} 规则块里，那么该变量只能在此规则块内使用，类似作用域。</li>\n</ol>\n</blockquote>\n<h1 id=\"五、嵌套\"><a href=\"#五、嵌套\" class=\"headerlink\" title=\"五、嵌套\"></a>五、嵌套</h1><h2 id=\"1-选择器嵌套\"><a href=\"#1-选择器嵌套\" class=\"headerlink\" title=\"1.选择器嵌套\"></a>1.选择器嵌套</h2><p>在 css 里一些选择器是重复出现的，可以使用 sass 的嵌套语法减少重复：</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.<span class=\"string\">nav </span>&#123;</div><div class=\"line\">\t<span class=\"string\">height:</span> <span class=\"string\">70px;</span></div><div class=\"line\">\t<span class=\"string\">ul </span>&#123;</div><div class=\"line\">\t\t<span class=\"string\">margin:</span> 0;</div><div class=\"line\">\t\t<span class=\"string\">li </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">list-style-type:</span> <span class=\"string\">none;</span></div><div class=\"line\">\t\t\t<span class=\"string\">padding:</span> <span class=\"string\">5px;</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在嵌套语法中，使用 &amp; 来表示父选择器。当包含父选择器标识符的嵌套规则被打开时，它不会像后代选择器那样进行拼接，而是&amp;被父选择器直接替换：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: block;</div><div class=\"line\">\t&amp;:hover &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-属性嵌套\"><a href=\"#2-属性嵌套\" class=\"headerlink\" title=\"2.属性嵌套\"></a>2.属性嵌套</h2><p>嵌套属性的规则是这样的：把属性名从中划线-的地方断开，在根属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中。<br>例如，下面的 font-size 和 font-weight 属性可以嵌套 font。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>嵌套写法： </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">font</span>: &#123;</div><div class=\"line\">\t\tsize: <span class=\"number\">15px</span>;</div><div class=\"line\">\t\t<span class=\"attribute\">weight</span>: <span class=\"number\">600</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"六、-mixin\"><a href=\"#六、-mixin\" class=\"headerlink\" title=\"六、@mixin\"></a>六、@mixin</h1><p>mixin 是一组样式的集合，主要用于大段样式的重用。</p>\n<p> mixin 类似于javascript中的函数，mixin 有名字和参数，参数可以省略，定义 mixin 的格式如下：</p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> 名字 (参数<span class=\"number\">1</span>，参数<span class=\"number\">2</span>...) <span class=\"meta\">&#123;......&#125;</span></div></pre></td></tr></table></figure>\n<p> 引用 mixin 时使用如下写法：</p>\n <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"meta\"><span class=\"meta-keyword\">include</span> mixin的名字;</span></div></pre></td></tr></table></figure>\n<p> mixin 中的参数写法与 sass 变量写法一样，变量的赋值既可以按形参顺序赋值，也可以按参数名赋值，sass 允许通过语法 $name: value 的形式指定每个参数的值。。来看一个具体的例子：</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> alert (<span class=\"variable\">$text-color</span>, <span class=\"variable\">$background</span>) &#123;</div><div class=\"line\"> <span class=\"attribute\">color</span>: <span class=\"variable\">$text-color</span>;</div><div class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"variable\">$background</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.alert-warning</span> &#123;</div><div class=\"line\"> @<span class=\"keyword\">include</span> alert(<span class=\"number\">#333</span>, <span class=\"number\">#fff</span>lert &#123;</div><div class=\"line\">\t <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"selector-class\">.alert</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">\t <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"selector-class\">.alert-info</span> &#123;</div><div class=\"line\">\t @<span class=\"keyword\">extend</span> .alert;</div><div class=\"line\">\t <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFF</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<pre><code>生成如下的 css：\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.alert</span>, <span class=\"selector-class\">.alert-info</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.alert</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-class\">.alert-info</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.alert-info</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFF</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n注意，使用 @extend 会继承选择器下所有子样式。上面的例子里，.alert-info 不仅继承了 .alert 的样式，还会继承 .alert a 的样式。\n\n如果 .alert extend 了 .alert-info，等效于对应的 html 的 class=&quot;alert alert-info&quot;，\n</code></pre><h2 id=\"1-何时使用-extend\"><a href=\"#1-何时使用-extend\" class=\"headerlink\" title=\"1.何时使用@extend\"></a>1.何时使用@extend</h2><p>混合器主要用于展示性样式的重用，而类名用于语义化样式的重用。因为继承是基于类的（有时是基于其他类型的选择器），所以继承应该是建立在语义化的关系上。当一个元素拥有的类（比如说.seriousError）表明它属于另一个类（比如说.error），这时使用继承再合适不过了。</p>\n<h1 id=\"八、-import与partials\"><a href=\"#八、-import与partials\" class=\"headerlink\" title=\"八、@import与partials\"></a>八、@import与partials</h1><p>css 使用 @import 在一个 css 文件里引入其他 css 文件，然而，只有执行到 @import 时浏览器才会去下载导入的css 文件，使页面加载变慢，因为增加了 HTTP 连接。</p>\n<p>sass 扩展了 @import，在一个  sass 文件里也可以使用 @import 导入其他 sass 文件，然后 sass 会把它编译成一个文件，避免了额外的下载请求，另外，所有在被导入文件中定义的变量和 mixin 均可在导入文件中使用。</p>\n<p>这样我们可以把 sass 分成不同的部分，即模块化，每个模块在 sass 中叫做 partials（局部文件），partials 的文件名以 _ 开头，这样 sass 就不会单独编译 partials 而只把该文件用来导入。</p>\n<p>例如，我们可以创建 <em>base.scss 的 partials 模块来重置基本样式，@import 导入 partials 时直接用文件名，不需要加 </em> 和文件扩展名：</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">import</span> ”base“；</div></pre></td></tr></table></figure>\n<h2 id=\"1-局部导入\"><a href=\"#1-局部导入\" class=\"headerlink\" title=\"1. 局部导入\"></a>1. 局部导入</h2><p> ass允许 @import 命令写在 css {} 规则内，这种导入方式下，生成对应的css文件时，局部文件会被直接插入到css规则内导入它的地方。被导入的局部文件中定义的所有变量和混合器，也会在这个规则范围内生效。这些变量和混合器不会全局有效。</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</div><div class=\"line\"> @<span class=\"keyword\">import</span> <span class=\"string\">\"base\"</span>;</div><div class=\"line\"> <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-导入原生css\"><a href=\"#2-导入原生css\" class=\"headerlink\" title=\"2.导入原生css\"></a>2.导入原生css</h2><p>sass兼容原生 css，所以也支持原生的 css@import。在下列三种情况下会生成原生的CSS@import，尽管这会造成浏览器解析css时的额外下载：</p>\n<ul>\n<li>被导入文件的名字以.css结尾</li>\n<li>被导入文件的名字是一个URL地址</li>\n<li>被导入文件的名字是CSS的url()值</li>\n</ul>\n<h2 id=\"3-默认变量值\"><a href=\"#3-默认变量值\" class=\"headerlink\" title=\"3.默认变量值\"></a>3.默认变量值</h2><p>一般情况下，反复声明一个变量值时，只有最后一个声明有效。</p>\n<p>假如你写了一个可被他人通过 @import 导入的 sass 库文件，你可能希望导入者可以定制修改 sass 库文件中的某些值。使用 sass 的 !default 标签可以实现这个目的。!default用于变量，含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$alert-<span class=\"keyword\">color</span>: #<span class=\"number\">8</span>d8d8d !<span class=\"keyword\">default</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"九、注释\"><a href=\"#九、注释\" class=\"headerlink\" title=\"九、注释\"></a>九、注释</h1><p>sass 包含 3 中注释方式：</p>\n<ul>\n<li>单行注释： //注释内容</li>\n<li>多行注释：/<em> 注释内容 </em>/</li>\n<li>强制注释：/<em>! 注释内容 </em>/</li>\n</ul>\n<p>单行注释不会出现在编译后的 css 文件里；多行注释会出现在编译后的 css 文件里，但是不会出现在压缩编译的 css 文件里；强制注释会一直出现在 css 文件里。</p>\n<hr>\n<blockquote>\n<h1 id=\"sass高级部分\"><a href=\"#sass高级部分\" class=\"headerlink\" title=\"sass高级部分\"></a>sass高级部分</h1></blockquote>\n<hr>\n<h1 id=\"一、数据类型\"><a href=\"#一、数据类型\" class=\"headerlink\" title=\"一、数据类型\"></a>一、数据类型</h1><p>css 属性值和 sass 变量可以分成不同的数据类型。</p>\n<p>在命令行下使用 sass -i 命令可以启动 sass 的交互界面，在交互界面下使用 type-of() 函数可以判断数据的类型。</p>\n<p>数据类型有如下几种：</p>\n<ul>\n<li>number：5、5px、5deg</li>\n<li>string：hello、”world”</li>\n<li>list：1px solid #111、 20px 15px</li>\n<li>color：#ff0000、red、rgba(0, 0, 0, 1)、rgb(1, 1, 1)、hsl(0, 100%, 50%)</li>\n<li>map：(padding: 10px, margin: 10px)</li>\n<li>boolean: true、false</li>\n</ul>\n<h2 id=\"1-1-数字\"><a href=\"#1-1-数字\" class=\"headerlink\" title=\"1-1.数字\"></a>1-1.数字</h2><p>在 sass 里宽度、高度等属性的值的数据类型是数字，数字可以带 px、 rem 等单位。数字类型的值可以使用 +、 -、 *、 /、 % 运算，其中 / 除法是 css 的保留字符，我们可以使用 (a/b) 的形式进行除法运算。</p>\n<h2 id=\"1-2-数字函数\"><a href=\"#1-2-数字函数\" class=\"headerlink\" title=\"1-2.数字函数\"></a>1-2.数字函数</h2><p>sass 提供了一些数字运算的函数，方便计算。下面列举一些常见的数字函数：</p>\n<ul>\n<li>abs()：取绝对值</li>\n<li>round()：四舍五入</li>\n<li>ceil()：舍去小数部位</li>\n<li>floor()：有小数部分就进位</li>\n<li>min()：多个数字里取最小值</li>\n<li>max()：多个数字里取最大值</li>\n</ul>\n<h2 id=\"1-3-字符串\"><a href=\"#1-3-字符串\" class=\"headerlink\" title=\"1-3.字符串\"></a>1-3.字符串</h2><p>css 里 normal、left、right、absolute 等属性值都是字符串类型，用 “” 包裹的属性值也是字符串类型，两者的区别是引号包裹的字符串可以含有空格。</p>\n<p>使用 + 可以连接两个字符串。使用 + 也可以连接一个字符串和一个数字。用 -、/连接字符串都只会保留-、/，用 * 连接字符串会报错。</p>\n<h2 id=\"1-4-字符串函数\"><a href=\"#1-4-字符串函数\" class=\"headerlink\" title=\"1-4.字符串函数\"></a>1-4.字符串函数</h2><p>sass 提供了一些字符串函数来处理字符串。以下是一些常用是字符串函数：</p>\n<ul>\n<li>to-upper-case()：把字符串转换成大写</li>\n<li>to-lower-case()：把字符串转换成小写</li>\n<li>str-length()：计算字符串的长度</li>\n<li>str-index(a, b)：求子串 b 在 a 里出现的起始位置，注意起始位置从1开始</li>\n<li>str-insert(a, b, num)：把字符串 b 插入到字符串 a 的 num 位置。</li>\n</ul>\n<h2 id=\"1-5-颜色\"><a href=\"#1-5-颜色\" class=\"headerlink\" title=\"1-5.颜色\"></a>1-5.颜色</h2><p>css 里使用HEX、字符串、RGB、RGBA、HSL等多种方式表示颜色。</p>\n<h2 id=\"1-6-颜色函数\"><a href=\"#1-6-颜色函数\" class=\"headerlink\" title=\"1-6.颜色函数\"></a>1-6.颜色函数</h2><ul>\n<li>RGB(红, 绿, 蓝)：红绿蓝的值可以使用 0~255 或百分比</li>\n<li>RGBA(红，绿，蓝，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明</li>\n<li>HSL(色相，饱和度，明度)：色相的值是 0~360，饱和度和明度的值是百分比</li>\n<li>HSLA(色相，饱和度，明度，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明</li>\n</ul>\n<p>sass 提供的颜色函数：</p>\n<ul>\n<li>adjust-hue(颜色值，角度值)：调整颜色的色相值。</li>\n<li>lighten(颜色值，百分数)：使颜色变亮，明度的增加值就是百分数</li>\n<li>darken(颜色值，百分数)：使颜色变暗，明度的减少值就是百分数</li>\n<li>saturate(颜色值，百分数)：增加颜色的纯度，即增加颜色的饱和度</li>\n<li>desaturate(颜色值，百分数)：减少颜色的纯度，即降低颜色的饱和度</li>\n<li>opacity(颜色，数字)：增加颜色的不透明度</li>\n<li>transparentize(颜色，数字)：减少颜色的不透明度</li>\n</ul>\n<h2 id=\"1-7-列表\"><a href=\"#1-7-列表\" class=\"headerlink\" title=\"1-7.列表\"></a>1-7.列表</h2><p>sass 用空格或逗号分隔的多个值都是列表，如 border: 1px solid #eee; font-family: courier, monospace;</p>\n<p>列表里可以包含其他列表，如下 padding 的值都是两个列表。</p>\n<blockquote>\n<p>padding: 10px 5px, 0 5px; </p>\n<p>padding: (10px 5px) (0 5px); </p>\n</blockquote>\n<p>sass 在编译时会去掉逗号和括号。</p>\n<h2 id=\"1-8-列表函数\"><a href=\"#1-8-列表函数\" class=\"headerlink\" title=\"1-8.列表函数\"></a>1-8.列表函数</h2><p>列表类似于其他语言里的数组。下面是常见的列表函数：</p>\n<ul>\n<li>length()：求表列有多少个项目</li>\n<li>nth(列表，num)：返回列表里第 num 项，num是从1开始计算的</li>\n<li>index(列表, value)：返回 value 项在列表里的索引值</li>\n<li>append(list1, value)：在 list1 后添加 value 项，还可以有第三个参数指定分隔符</li>\n<li>join(list1, list2)：拼接两个列表，还可以有第三个参数指定分隔符</li>\n</ul>\n<h2 id=\"1-9-map\"><a href=\"#1-9-map\" class=\"headerlink\" title=\"1-9.map\"></a>1-9.map</h2><p>map 类似于 python 的字典，是键值对数据类型。 map 类型书写方式如下：(key1: value1, key2: value2…)</p>\n<p>列表函数也都可以应用在 map 对象上，map 还有自己独有的函数，如下：</p>\n<ul>\n<li>map-get(map, key)：返回 map 中对应 key 的值</li>\n<li>map-keys(map)：返回 map 里所有的 key</li>\n<li>map-values(map)：返回 map 里所有的 value</li>\n<li>map-has-key(map, key)：判断 map 是否有对应的 key</li>\n<li>map-merge(map1, map2)：合并两个 map</li>\n<li>map-remove(map, key)：从 map 里删除对应的 key 项</li>\n</ul>\n<h2 id=\"1-10-boolean\"><a href=\"#1-10-boolean\" class=\"headerlink\" title=\"1-10.boolean\"></a>1-10.boolean</h2><p>boolean 包含 true、false。</p>\n<p>比较运算符：&gt;、&lt;、&gt;=、&lt;=、== ，逻辑运算符：and、or、not 都会返回 boolean 值。</p>\n<h1 id=\"二、interpolation\"><a href=\"#二、interpolation\" class=\"headerlink\" title=\"二、interpolation\"></a>二、interpolation</h1><p>interpolation 可以把变量或者表达式的值插入到选择器、属性名或注释里。 使用 #{ 变量|表达式 } 的形式使用 interpolation。 例子：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$version</span>: <span class=\"string\">\"0.0.1\"</span>;</div><div class=\"line\"><span class=\"variable\">$type</span>: <span class=\"string\">\"alert\"</span>;</div><div class=\"line\"><span class=\"variable\">$attr</span>: <span class=\"string\">\"border\"</span>;</div><div class=\"line\"><span class=\"comment\">/* #&#123;$version&#125; */</span></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"variable\">$version</span>;</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"selector-tag\">a</span>-#&#123;<span class=\"variable\">$type</span>&#125; &#123;</div><div class=\"line\">\t#&#123;<span class=\"variable\">$attr</span>&#125;-type: solid;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"三、控制语句\"><a href=\"#三、控制语句\" class=\"headerlink\" title=\"三、控制语句\"></a>三、控制语句</h1><h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"@if\"></a>@if</h2><p>sass 可以使用 @if 语句实现条件控制，写法如下： @if 条件 {…} @else {…}</p>\n<p>例子：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$theme</span>: <span class=\"string\">\"dark\"</span>;</div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t@<span class=\"keyword\">if</span> <span class=\"variable\">$theme</span> == <span class=\"string\">\"dark\"</span> &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</div><div class=\"line\">\t\t&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#FFF</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"@for\"></a>@for</h2><p>@for 循环语句的写法如下： @for $var from &lt;开始值&gt; through | to &lt;结束值&gt; {}。循环中 $var 的值每次增加1，through 与 to 的不同之处在于 through 会包括结束值，to 不包括结束值。</p>\n<p>例子，一个简单的网格系统：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$columns</span>: <span class=\"number\">4</span>;</div><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through <span class=\"variable\">$columns</span> &#123;</div><div class=\"line\">\t<span class=\"selector-class\">.col-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span> / <span class=\"variable\">$columns</span> * <span class=\"variable\">$i</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成如下 css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.col-1</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-2</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-3</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">75%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-4</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"@each\"></a>@each</h2><p>如果要操作列表里的每一项，可以使用 @each。写法如下：@each $var in $list {…}。</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$icons: success <span class=\"keyword\">warning</span> <span class=\"keyword\">error</span>;</div><div class=\"line\">@each $icon <span class=\"keyword\">in</span> $icons &#123;</div><div class=\"line\">\t.icon-#&#123;$icon&#125; &#123;</div><div class=\"line\">\t\tbackground-<span class=\"keyword\">image</span>: url(../img/icon-#&#123;$icon&#125;.jpg);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成如下 css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.icon-success</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(../img/icon-success.jpg);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.icon-warning</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(../img/icon-warning.jpg);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.icon-error</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(../img/icon-error.jpg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"@while\"></a>@while</h2><p>@while 语句也可以实现循环，但是要比 @for 更灵活，要注意 @while 语句里要有结束循环的语句，不然会一直循环下去。写法： @while 条件 {…}。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$i</span>: <span class=\"number\">6</span>;</div><div class=\"line\">@<span class=\"keyword\">while</span> <span class=\"variable\">$i</span> &gt; 0 &#123;</div><div class=\"line\">\t<span class=\"selector-class\">.iterm-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">5px</span> * <span class=\"variable\">$i</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - <span class=\"number\">2</span>;  <span class=\"comment\">// 退出循环的语句</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成的 css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.iterm-6</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.iterm-4</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.iterm-2</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"四、自定义函数\"><a href=\"#四、自定义函数\" class=\"headerlink\" title=\"四、自定义函数\"></a>四、自定义函数</h1><p>sass 允许用户自定义函数，写法： @function 名称 (参数1，参数2…) {…@return…}。使用时，直接用函数名调用。</p>\n<p>例子：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$colors</span>: (dark: <span class=\"number\">#000</span>, light: <span class=\"number\">#fff</span>);</div><div class=\"line\">@function color (<span class=\"variable\">$key</span>) &#123;</div><div class=\"line\">\t@return map-get(<span class=\"variable\">$colors</span>, <span class=\"variable\">$key</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: color(light);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成的 css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"警告与错误\"><a href=\"#警告与错误\" class=\"headerlink\" title=\"警告与错误\"></a>警告与错误</h2><p>在自定义函数里，可以通过 @warn 和 @error 语句在命令行里输出用户自定义的警告和错误，提高函数的健壮性。</p>\n<p>前面的 function 例子可以该写成：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@function</span> color ($key) &#123;</div><div class=\"line\">\t<span class=\"variable\">@if</span> not map-has-key($colors, $key) &#123;</div><div class=\"line\">\t\t<span class=\"variable\">@warn</span> <span class=\"string\">\"没有 #&#123;$key&#125; 这个颜色\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"variable\">@return</span> map-get($colors, $key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h1><p>sass 是基于 ruby 开发的，因此安装 sass 需要先安装 ruby。<br>安装完 ruby，通过 ruby 的 gem 安装 sass，在命令行输入：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"keyword\">install</span> sass</div></pre></td></tr></table></figure>\n<p>检查 sass 是否安装成功：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">sass -v</span></div></pre></td></tr></table></figure>","more":"<p>如果能输出 sass 的版本信息，就说明 sass 安装成功了。</p>\n<h1 id=\"二、编译\"><a href=\"#二、编译\" class=\"headerlink\" title=\"二、编译\"></a>二、编译</h1><h2 id=\"1-手动编译\"><a href=\"#1-手动编译\" class=\"headerlink\" title=\"1.  手动编译\"></a>1.  手动编译</h2><p>命令行下，在项目所在目录使用 sass 命令手动编译 sass 文件，sass 文件的扩展名为 .scss。例子：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass <span class=\"selector-tag\">input</span><span class=\"selector-class\">.scss</span>:output.css</div></pre></td></tr></table></figure>\n<p>冒号前面是要编译的文件，冒号后面是要编译生成的 css 文件。</p>\n<h2 id=\"2-自动编译\"><a href=\"#2-自动编译\" class=\"headerlink\" title=\"2. 自动编译\"></a>2. 自动编译</h2><p>还可以在命令行下使用 sass –watch 命令自动监视 sass 文件的变化并编译。例子：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass --watch <span class=\"selector-tag\">input</span><span class=\"selector-class\">.css</span>:output.css</div></pre></td></tr></table></figure>\n<p>也可以自动监视整个目录的变化并自动编译：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass <span class=\"comment\">--watch .:.</span></div></pre></td></tr></table></figure>\n<p>默认自动编译生成的 css 文件与 sass 文件同名。</p>\n<h1 id=\"三、输出样式\"><a href=\"#三、输出样式\" class=\"headerlink\" title=\"三、输出样式\"></a>三、输出样式</h1><p>sass 编译输出的 css 文件有四种样式：</p>\n<ul>\n<li>nested（嵌套，默认）</li>\n<li>compact（紧凑）</li>\n<li>expanded（扩展）</li>\n<li>compressed（压缩)</li>\n</ul>\n<p>在编译时使用 –style 命令可以修改输出的 css 的样式：</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">sass</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">watch</span> <span class=\"string\">.</span><span class=\"comment\">:</span><span class=\"string\">.</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">style</span> <span class=\"comment\">compact</span></div></pre></td></tr></table></figure>\n<h1 id=\"四、变量\"><a href=\"#四、变量\" class=\"headerlink\" title=\"四、变量\"></a>四、变量</h1><p>sass 使用 $ 定义一个变量，用 : 定义变量值。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$primary-color</span>: <span class=\"number\">#333</span>;</div></pre></td></tr></table></figure>\n<p>变量的值可以用其他变量：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$primary-border: <span class=\"number\">1</span>px solid $primary-<span class=\"keyword\">color</span>;</div></pre></td></tr></table></figure>\n<p>补充：</p>\n<blockquote>\n<ol>\n<li>变量名中的中划线和下划线可以互相替换。</li>\n<li>变量如果定义在某个 {} 规则块里，那么该变量只能在此规则块内使用，类似作用域。</li>\n</ol>\n</blockquote>\n<h1 id=\"五、嵌套\"><a href=\"#五、嵌套\" class=\"headerlink\" title=\"五、嵌套\"></a>五、嵌套</h1><h2 id=\"1-选择器嵌套\"><a href=\"#1-选择器嵌套\" class=\"headerlink\" title=\"1.选择器嵌套\"></a>1.选择器嵌套</h2><p>在 css 里一些选择器是重复出现的，可以使用 sass 的嵌套语法减少重复：</p>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.<span class=\"string\">nav </span>&#123;</div><div class=\"line\">\t<span class=\"string\">height:</span> <span class=\"string\">70px;</span></div><div class=\"line\">\t<span class=\"string\">ul </span>&#123;</div><div class=\"line\">\t\t<span class=\"string\">margin:</span> 0;</div><div class=\"line\">\t\t<span class=\"string\">li </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">list-style-type:</span> <span class=\"string\">none;</span></div><div class=\"line\">\t\t\t<span class=\"string\">padding:</span> <span class=\"string\">5px;</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在嵌套语法中，使用 &amp; 来表示父选择器。当包含父选择器标识符的嵌套规则被打开时，它不会像后代选择器那样进行拼接，而是&amp;被父选择器直接替换：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">display</span>: block;</div><div class=\"line\">\t&amp;:hover &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-属性嵌套\"><a href=\"#2-属性嵌套\" class=\"headerlink\" title=\"2.属性嵌套\"></a>2.属性嵌套</h2><p>嵌套属性的规则是这样的：把属性名从中划线-的地方断开，在根属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中。<br>例如，下面的 font-size 和 font-weight 属性可以嵌套 font。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">\t    <span class=\"attribute\">font-weight</span>: <span class=\"number\">600</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>嵌套写法： </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">font</span>: &#123;</div><div class=\"line\">\t\tsize: <span class=\"number\">15px</span>;</div><div class=\"line\">\t\t<span class=\"attribute\">weight</span>: <span class=\"number\">600</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"六、-mixin\"><a href=\"#六、-mixin\" class=\"headerlink\" title=\"六、@mixin\"></a>六、@mixin</h1><p>mixin 是一组样式的集合，主要用于大段样式的重用。</p>\n<p> mixin 类似于javascript中的函数，mixin 有名字和参数，参数可以省略，定义 mixin 的格式如下：</p>\n <figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> 名字 (参数<span class=\"number\">1</span>，参数<span class=\"number\">2</span>...) <span class=\"meta\">&#123;......&#125;</span></div></pre></td></tr></table></figure>\n<p> 引用 mixin 时使用如下写法：</p>\n <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"meta\"><span class=\"meta-keyword\">include</span> mixin的名字;</span></div></pre></td></tr></table></figure>\n<p> mixin 中的参数写法与 sass 变量写法一样，变量的赋值既可以按形参顺序赋值，也可以按参数名赋值，sass 允许通过语法 $name: value 的形式指定每个参数的值。。来看一个具体的例子：</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> alert (<span class=\"variable\">$text-color</span>, <span class=\"variable\">$background</span>) &#123;</div><div class=\"line\"> <span class=\"attribute\">color</span>: <span class=\"variable\">$text-color</span>;</div><div class=\"line\"> <span class=\"attribute\">background-color</span>: <span class=\"variable\">$background</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.alert-warning</span> &#123;</div><div class=\"line\"> @<span class=\"keyword\">include</span> alert(<span class=\"number\">#333</span>, <span class=\"number\">#fff</span>lert &#123;</div><div class=\"line\">\t <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"selector-class\">.alert</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">\t <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"selector-class\">.alert-info</span> &#123;</div><div class=\"line\">\t @<span class=\"keyword\">extend</span> .alert;</div><div class=\"line\">\t <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFF</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<pre><code>生成如下的 css：\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.alert</span>, <span class=\"selector-class\">.alert-info</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.alert</span> <span class=\"selector-tag\">a</span>, <span class=\"selector-class\">.alert-info</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.alert-info</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFF</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n注意，使用 @extend 会继承选择器下所有子样式。上面的例子里，.alert-info 不仅继承了 .alert 的样式，还会继承 .alert a 的样式。\n\n如果 .alert extend 了 .alert-info，等效于对应的 html 的 class=&quot;alert alert-info&quot;，\n</code></pre><h2 id=\"1-何时使用-extend\"><a href=\"#1-何时使用-extend\" class=\"headerlink\" title=\"1.何时使用@extend\"></a>1.何时使用@extend</h2><p>混合器主要用于展示性样式的重用，而类名用于语义化样式的重用。因为继承是基于类的（有时是基于其他类型的选择器），所以继承应该是建立在语义化的关系上。当一个元素拥有的类（比如说.seriousError）表明它属于另一个类（比如说.error），这时使用继承再合适不过了。</p>\n<h1 id=\"八、-import与partials\"><a href=\"#八、-import与partials\" class=\"headerlink\" title=\"八、@import与partials\"></a>八、@import与partials</h1><p>css 使用 @import 在一个 css 文件里引入其他 css 文件，然而，只有执行到 @import 时浏览器才会去下载导入的css 文件，使页面加载变慢，因为增加了 HTTP 连接。</p>\n<p>sass 扩展了 @import，在一个  sass 文件里也可以使用 @import 导入其他 sass 文件，然后 sass 会把它编译成一个文件，避免了额外的下载请求，另外，所有在被导入文件中定义的变量和 mixin 均可在导入文件中使用。</p>\n<p>这样我们可以把 sass 分成不同的部分，即模块化，每个模块在 sass 中叫做 partials（局部文件），partials 的文件名以 _ 开头，这样 sass 就不会单独编译 partials 而只把该文件用来导入。</p>\n<p>例如，我们可以创建 <em>base.scss 的 partials 模块来重置基本样式，@import 导入 partials 时直接用文件名，不需要加 </em> 和文件扩展名：</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">import</span> ”base“；</div></pre></td></tr></table></figure>\n<h2 id=\"1-局部导入\"><a href=\"#1-局部导入\" class=\"headerlink\" title=\"1. 局部导入\"></a>1. 局部导入</h2><p> ass允许 @import 命令写在 css {} 规则内，这种导入方式下，生成对应的css文件时，局部文件会被直接插入到css规则内导入它的地方。被导入的局部文件中定义的所有变量和混合器，也会在这个规则范围内生效。这些变量和混合器不会全局有效。</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</div><div class=\"line\"> @<span class=\"keyword\">import</span> <span class=\"string\">\"base\"</span>;</div><div class=\"line\"> <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-导入原生css\"><a href=\"#2-导入原生css\" class=\"headerlink\" title=\"2.导入原生css\"></a>2.导入原生css</h2><p>sass兼容原生 css，所以也支持原生的 css@import。在下列三种情况下会生成原生的CSS@import，尽管这会造成浏览器解析css时的额外下载：</p>\n<ul>\n<li>被导入文件的名字以.css结尾</li>\n<li>被导入文件的名字是一个URL地址</li>\n<li>被导入文件的名字是CSS的url()值</li>\n</ul>\n<h2 id=\"3-默认变量值\"><a href=\"#3-默认变量值\" class=\"headerlink\" title=\"3.默认变量值\"></a>3.默认变量值</h2><p>一般情况下，反复声明一个变量值时，只有最后一个声明有效。</p>\n<p>假如你写了一个可被他人通过 @import 导入的 sass 库文件，你可能希望导入者可以定制修改 sass 库文件中的某些值。使用 sass 的 !default 标签可以实现这个目的。!default用于变量，含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$alert-<span class=\"keyword\">color</span>: #<span class=\"number\">8</span>d8d8d !<span class=\"keyword\">default</span>;</div></pre></td></tr></table></figure>\n<h1 id=\"九、注释\"><a href=\"#九、注释\" class=\"headerlink\" title=\"九、注释\"></a>九、注释</h1><p>sass 包含 3 中注释方式：</p>\n<ul>\n<li>单行注释： //注释内容</li>\n<li>多行注释：/<em> 注释内容 </em>/</li>\n<li>强制注释：/<em>! 注释内容 </em>/</li>\n</ul>\n<p>单行注释不会出现在编译后的 css 文件里；多行注释会出现在编译后的 css 文件里，但是不会出现在压缩编译的 css 文件里；强制注释会一直出现在 css 文件里。</p>\n<hr>\n<blockquote>\n<h1 id=\"sass高级部分\"><a href=\"#sass高级部分\" class=\"headerlink\" title=\"sass高级部分\"></a>sass高级部分</h1></blockquote>\n<hr>\n<h1 id=\"一、数据类型\"><a href=\"#一、数据类型\" class=\"headerlink\" title=\"一、数据类型\"></a>一、数据类型</h1><p>css 属性值和 sass 变量可以分成不同的数据类型。</p>\n<p>在命令行下使用 sass -i 命令可以启动 sass 的交互界面，在交互界面下使用 type-of() 函数可以判断数据的类型。</p>\n<p>数据类型有如下几种：</p>\n<ul>\n<li>number：5、5px、5deg</li>\n<li>string：hello、”world”</li>\n<li>list：1px solid #111、 20px 15px</li>\n<li>color：#ff0000、red、rgba(0, 0, 0, 1)、rgb(1, 1, 1)、hsl(0, 100%, 50%)</li>\n<li>map：(padding: 10px, margin: 10px)</li>\n<li>boolean: true、false</li>\n</ul>\n<h2 id=\"1-1-数字\"><a href=\"#1-1-数字\" class=\"headerlink\" title=\"1-1.数字\"></a>1-1.数字</h2><p>在 sass 里宽度、高度等属性的值的数据类型是数字，数字可以带 px、 rem 等单位。数字类型的值可以使用 +、 -、 *、 /、 % 运算，其中 / 除法是 css 的保留字符，我们可以使用 (a/b) 的形式进行除法运算。</p>\n<h2 id=\"1-2-数字函数\"><a href=\"#1-2-数字函数\" class=\"headerlink\" title=\"1-2.数字函数\"></a>1-2.数字函数</h2><p>sass 提供了一些数字运算的函数，方便计算。下面列举一些常见的数字函数：</p>\n<ul>\n<li>abs()：取绝对值</li>\n<li>round()：四舍五入</li>\n<li>ceil()：舍去小数部位</li>\n<li>floor()：有小数部分就进位</li>\n<li>min()：多个数字里取最小值</li>\n<li>max()：多个数字里取最大值</li>\n</ul>\n<h2 id=\"1-3-字符串\"><a href=\"#1-3-字符串\" class=\"headerlink\" title=\"1-3.字符串\"></a>1-3.字符串</h2><p>css 里 normal、left、right、absolute 等属性值都是字符串类型，用 “” 包裹的属性值也是字符串类型，两者的区别是引号包裹的字符串可以含有空格。</p>\n<p>使用 + 可以连接两个字符串。使用 + 也可以连接一个字符串和一个数字。用 -、/连接字符串都只会保留-、/，用 * 连接字符串会报错。</p>\n<h2 id=\"1-4-字符串函数\"><a href=\"#1-4-字符串函数\" class=\"headerlink\" title=\"1-4.字符串函数\"></a>1-4.字符串函数</h2><p>sass 提供了一些字符串函数来处理字符串。以下是一些常用是字符串函数：</p>\n<ul>\n<li>to-upper-case()：把字符串转换成大写</li>\n<li>to-lower-case()：把字符串转换成小写</li>\n<li>str-length()：计算字符串的长度</li>\n<li>str-index(a, b)：求子串 b 在 a 里出现的起始位置，注意起始位置从1开始</li>\n<li>str-insert(a, b, num)：把字符串 b 插入到字符串 a 的 num 位置。</li>\n</ul>\n<h2 id=\"1-5-颜色\"><a href=\"#1-5-颜色\" class=\"headerlink\" title=\"1-5.颜色\"></a>1-5.颜色</h2><p>css 里使用HEX、字符串、RGB、RGBA、HSL等多种方式表示颜色。</p>\n<h2 id=\"1-6-颜色函数\"><a href=\"#1-6-颜色函数\" class=\"headerlink\" title=\"1-6.颜色函数\"></a>1-6.颜色函数</h2><ul>\n<li>RGB(红, 绿, 蓝)：红绿蓝的值可以使用 0~255 或百分比</li>\n<li>RGBA(红，绿，蓝，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明</li>\n<li>HSL(色相，饱和度，明度)：色相的值是 0~360，饱和度和明度的值是百分比</li>\n<li>HSLA(色相，饱和度，明度，不透明度)：不透明度的值为 0~1,0 表示完全透明，1 表示完全不透明</li>\n</ul>\n<p>sass 提供的颜色函数：</p>\n<ul>\n<li>adjust-hue(颜色值，角度值)：调整颜色的色相值。</li>\n<li>lighten(颜色值，百分数)：使颜色变亮，明度的增加值就是百分数</li>\n<li>darken(颜色值，百分数)：使颜色变暗，明度的减少值就是百分数</li>\n<li>saturate(颜色值，百分数)：增加颜色的纯度，即增加颜色的饱和度</li>\n<li>desaturate(颜色值，百分数)：减少颜色的纯度，即降低颜色的饱和度</li>\n<li>opacity(颜色，数字)：增加颜色的不透明度</li>\n<li>transparentize(颜色，数字)：减少颜色的不透明度</li>\n</ul>\n<h2 id=\"1-7-列表\"><a href=\"#1-7-列表\" class=\"headerlink\" title=\"1-7.列表\"></a>1-7.列表</h2><p>sass 用空格或逗号分隔的多个值都是列表，如 border: 1px solid #eee; font-family: courier, monospace;</p>\n<p>列表里可以包含其他列表，如下 padding 的值都是两个列表。</p>\n<blockquote>\n<p>padding: 10px 5px, 0 5px; </p>\n<p>padding: (10px 5px) (0 5px); </p>\n</blockquote>\n<p>sass 在编译时会去掉逗号和括号。</p>\n<h2 id=\"1-8-列表函数\"><a href=\"#1-8-列表函数\" class=\"headerlink\" title=\"1-8.列表函数\"></a>1-8.列表函数</h2><p>列表类似于其他语言里的数组。下面是常见的列表函数：</p>\n<ul>\n<li>length()：求表列有多少个项目</li>\n<li>nth(列表，num)：返回列表里第 num 项，num是从1开始计算的</li>\n<li>index(列表, value)：返回 value 项在列表里的索引值</li>\n<li>append(list1, value)：在 list1 后添加 value 项，还可以有第三个参数指定分隔符</li>\n<li>join(list1, list2)：拼接两个列表，还可以有第三个参数指定分隔符</li>\n</ul>\n<h2 id=\"1-9-map\"><a href=\"#1-9-map\" class=\"headerlink\" title=\"1-9.map\"></a>1-9.map</h2><p>map 类似于 python 的字典，是键值对数据类型。 map 类型书写方式如下：(key1: value1, key2: value2…)</p>\n<p>列表函数也都可以应用在 map 对象上，map 还有自己独有的函数，如下：</p>\n<ul>\n<li>map-get(map, key)：返回 map 中对应 key 的值</li>\n<li>map-keys(map)：返回 map 里所有的 key</li>\n<li>map-values(map)：返回 map 里所有的 value</li>\n<li>map-has-key(map, key)：判断 map 是否有对应的 key</li>\n<li>map-merge(map1, map2)：合并两个 map</li>\n<li>map-remove(map, key)：从 map 里删除对应的 key 项</li>\n</ul>\n<h2 id=\"1-10-boolean\"><a href=\"#1-10-boolean\" class=\"headerlink\" title=\"1-10.boolean\"></a>1-10.boolean</h2><p>boolean 包含 true、false。</p>\n<p>比较运算符：&gt;、&lt;、&gt;=、&lt;=、== ，逻辑运算符：and、or、not 都会返回 boolean 值。</p>\n<h1 id=\"二、interpolation\"><a href=\"#二、interpolation\" class=\"headerlink\" title=\"二、interpolation\"></a>二、interpolation</h1><p>interpolation 可以把变量或者表达式的值插入到选择器、属性名或注释里。 使用 #{ 变量|表达式 } 的形式使用 interpolation。 例子：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$version</span>: <span class=\"string\">\"0.0.1\"</span>;</div><div class=\"line\"><span class=\"variable\">$type</span>: <span class=\"string\">\"alert\"</span>;</div><div class=\"line\"><span class=\"variable\">$attr</span>: <span class=\"string\">\"border\"</span>;</div><div class=\"line\"><span class=\"comment\">/* #&#123;$version&#125; */</span></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"variable\">$version</span>;</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"selector-tag\">a</span>-#&#123;<span class=\"variable\">$type</span>&#125; &#123;</div><div class=\"line\">\t#&#123;<span class=\"variable\">$attr</span>&#125;-type: solid;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"三、控制语句\"><a href=\"#三、控制语句\" class=\"headerlink\" title=\"三、控制语句\"></a>三、控制语句</h1><h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"@if\"></a>@if</h2><p>sass 可以使用 @if 语句实现条件控制，写法如下： @if 条件 {…} @else {…}</p>\n<p>例子：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$theme</span>: <span class=\"string\">\"dark\"</span>;</div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t@<span class=\"keyword\">if</span> <span class=\"variable\">$theme</span> == <span class=\"string\">\"dark\"</span> &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</div><div class=\"line\">\t\t&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#FFF</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"@for\"></a>@for</h2><p>@for 循环语句的写法如下： @for $var from &lt;开始值&gt; through | to &lt;结束值&gt; {}。循环中 $var 的值每次增加1，through 与 to 的不同之处在于 through 会包括结束值，to 不包括结束值。</p>\n<p>例子，一个简单的网格系统：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$columns</span>: <span class=\"number\">4</span>;</div><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through <span class=\"variable\">$columns</span> &#123;</div><div class=\"line\">\t<span class=\"selector-class\">.col-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span> / <span class=\"variable\">$columns</span> * <span class=\"variable\">$i</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成如下 css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.col-1</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-2</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-3</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">75%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.col-4</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"@each\"></a>@each</h2><p>如果要操作列表里的每一项，可以使用 @each。写法如下：@each $var in $list {…}。</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$icons: success <span class=\"keyword\">warning</span> <span class=\"keyword\">error</span>;</div><div class=\"line\">@each $icon <span class=\"keyword\">in</span> $icons &#123;</div><div class=\"line\">\t.icon-#&#123;$icon&#125; &#123;</div><div class=\"line\">\t\tbackground-<span class=\"keyword\">image</span>: url(../img/icon-#&#123;$icon&#125;.jpg);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成如下 css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.icon-success</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(../img/icon-success.jpg);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.icon-warning</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(../img/icon-warning.jpg);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.icon-error</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(../img/icon-error.jpg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"@while\"></a>@while</h2><p>@while 语句也可以实现循环，但是要比 @for 更灵活，要注意 @while 语句里要有结束循环的语句，不然会一直循环下去。写法： @while 条件 {…}。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$i</span>: <span class=\"number\">6</span>;</div><div class=\"line\">@<span class=\"keyword\">while</span> <span class=\"variable\">$i</span> &gt; 0 &#123;</div><div class=\"line\">\t<span class=\"selector-class\">.iterm-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</div><div class=\"line\">\t\t<span class=\"attribute\">width</span>: <span class=\"number\">5px</span> * <span class=\"variable\">$i</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - <span class=\"number\">2</span>;  <span class=\"comment\">// 退出循环的语句</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成的 css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.iterm-6</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.iterm-4</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.iterm-2</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"四、自定义函数\"><a href=\"#四、自定义函数\" class=\"headerlink\" title=\"四、自定义函数\"></a>四、自定义函数</h1><p>sass 允许用户自定义函数，写法： @function 名称 (参数1，参数2…) {…@return…}。使用时，直接用函数名调用。</p>\n<p>例子：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$colors</span>: (dark: <span class=\"number\">#000</span>, light: <span class=\"number\">#fff</span>);</div><div class=\"line\">@function color (<span class=\"variable\">$key</span>) &#123;</div><div class=\"line\">\t@return map-get(<span class=\"variable\">$colors</span>, <span class=\"variable\">$key</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: color(light);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成的 css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"警告与错误\"><a href=\"#警告与错误\" class=\"headerlink\" title=\"警告与错误\"></a>警告与错误</h2><p>在自定义函数里，可以通过 @warn 和 @error 语句在命令行里输出用户自定义的警告和错误，提高函数的健壮性。</p>\n<p>前面的 function 例子可以该写成：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">@function</span> color ($key) &#123;</div><div class=\"line\">\t<span class=\"variable\">@if</span> not map-has-key($colors, $key) &#123;</div><div class=\"line\">\t\t<span class=\"variable\">@warn</span> <span class=\"string\">\"没有 #&#123;$key&#125; 这个颜色\"</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"variable\">@return</span> map-get($colors, $key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"CSS块级元素和行内元素","date":"2015-12-23T11:52:03.000Z","_content":"## 块级元素block\n在视觉上显示为一个块的元素，最明显的特征就是它默认横向充满父元素的内容区域，即默认独占一行。典型的块元素有div、p、h1~h6等。\n\n特点：\n1. 每个块级元素独占一行。\n2. 块级元素的height、width、padding、border、margin都可以设置。\n3. 块级元素在默认情况下，width是父元素的100%。\n4. 可以容纳其他块级元素和内联元素。\n\n<!--more-->\n\n## 行内元素inline\n行内元素不独占一行，其左右可以有其他行内元素。例如a、span、strong等。\n\n特点：\n1. 和相邻行内元素都在一行上。直到一行排不下才会换行。\n2. 行内元素的宽度和高度就是其容纳的内容的宽高，在行内元素上设置width、height无效。\n3. 垂直方向上的padding、border、margin不会产生边距效果，水平方向上的padding、border、margin可以影响元素的水平间距(布局)。\n4. 设置line-height 可以改变行内元素的高度。\n\n**注意：**\n行内元素设置padding，border在应用背景图片的时候会有显示，但是不改变垂直方向的布局，对于设置了background-color背景和padding的行内元素，背景可以向元素上面和下面延伸，但是不会改变行高，结果会出现设置后padding，border的背景会覆盖上面的元素的内容，下部被当做背景，被下级元素覆盖。(《CSS权威指南》P249)\n\nmargin水平方向起作用，垂直方向不起作用，原因在于：行内元素的外边距不会改变元素的行高。（《CSS权威指南》P227）\n\n可以点击如下demo查看：[demo](http://codepen.io/theqwang/pen/obLKxg)\n","source":"_posts/CSS-块级元素和行内元素.md","raw":"title: CSS块级元素和行内元素\ndate: 2015-12-23 19:52:03\ncategories: CSS\ntags:\n---\n## 块级元素block\n在视觉上显示为一个块的元素，最明显的特征就是它默认横向充满父元素的内容区域，即默认独占一行。典型的块元素有div、p、h1~h6等。\n\n特点：\n1. 每个块级元素独占一行。\n2. 块级元素的height、width、padding、border、margin都可以设置。\n3. 块级元素在默认情况下，width是父元素的100%。\n4. 可以容纳其他块级元素和内联元素。\n\n<!--more-->\n\n## 行内元素inline\n行内元素不独占一行，其左右可以有其他行内元素。例如a、span、strong等。\n\n特点：\n1. 和相邻行内元素都在一行上。直到一行排不下才会换行。\n2. 行内元素的宽度和高度就是其容纳的内容的宽高，在行内元素上设置width、height无效。\n3. 垂直方向上的padding、border、margin不会产生边距效果，水平方向上的padding、border、margin可以影响元素的水平间距(布局)。\n4. 设置line-height 可以改变行内元素的高度。\n\n**注意：**\n行内元素设置padding，border在应用背景图片的时候会有显示，但是不改变垂直方向的布局，对于设置了background-color背景和padding的行内元素，背景可以向元素上面和下面延伸，但是不会改变行高，结果会出现设置后padding，border的背景会覆盖上面的元素的内容，下部被当做背景，被下级元素覆盖。(《CSS权威指南》P249)\n\nmargin水平方向起作用，垂直方向不起作用，原因在于：行内元素的外边距不会改变元素的行高。（《CSS权威指南》P227）\n\n可以点击如下demo查看：[demo](http://codepen.io/theqwang/pen/obLKxg)\n","slug":"CSS-块级元素和行内元素","published":1,"updated":"2017-03-11T22:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0d70lyw0002ckml7wzb9evi","content":"<h2 id=\"块级元素block\"><a href=\"#块级元素block\" class=\"headerlink\" title=\"块级元素block\"></a>块级元素block</h2><p>在视觉上显示为一个块的元素，最明显的特征就是它默认横向充满父元素的内容区域，即默认独占一行。典型的块元素有div、p、h1~h6等。</p>\n<p>特点：</p>\n<ol>\n<li>每个块级元素独占一行。</li>\n<li>块级元素的height、width、padding、border、margin都可以设置。</li>\n<li>块级元素在默认情况下，width是父元素的100%。</li>\n<li>可以容纳其他块级元素和内联元素。</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"行内元素inline\"><a href=\"#行内元素inline\" class=\"headerlink\" title=\"行内元素inline\"></a>行内元素inline</h2><p>行内元素不独占一行，其左右可以有其他行内元素。例如a、span、strong等。</p>\n<p>特点：</p>\n<ol>\n<li>和相邻行内元素都在一行上。直到一行排不下才会换行。</li>\n<li>行内元素的宽度和高度就是其容纳的内容的宽高，在行内元素上设置width、height无效。</li>\n<li>垂直方向上的padding、border、margin不会产生边距效果，水平方向上的padding、border、margin可以影响元素的水平间距(布局)。</li>\n<li>设置line-height 可以改变行内元素的高度。</li>\n</ol>\n<p><strong>注意：</strong><br>行内元素设置padding，border在应用背景图片的时候会有显示，但是不改变垂直方向的布局，对于设置了background-color背景和padding的行内元素，背景可以向元素上面和下面延伸，但是不会改变行高，结果会出现设置后padding，border的背景会覆盖上面的元素的内容，下部被当做背景，被下级元素覆盖。(《CSS权威指南》P249)</p>\n<p>margin水平方向起作用，垂直方向不起作用，原因在于：行内元素的外边距不会改变元素的行高。（《CSS权威指南》P227）</p>\n<p>可以点击如下demo查看：<a href=\"http://codepen.io/theqwang/pen/obLKxg\" target=\"_blank\" rel=\"external\">demo</a></p>\n","excerpt":"<h2 id=\"块级元素block\"><a href=\"#块级元素block\" class=\"headerlink\" title=\"块级元素block\"></a>块级元素block</h2><p>在视觉上显示为一个块的元素，最明显的特征就是它默认横向充满父元素的内容区域，即默认独占一行。典型的块元素有div、p、h1~h6等。</p>\n<p>特点：</p>\n<ol>\n<li>每个块级元素独占一行。</li>\n<li>块级元素的height、width、padding、border、margin都可以设置。</li>\n<li>块级元素在默认情况下，width是父元素的100%。</li>\n<li>可以容纳其他块级元素和内联元素。</li>\n</ol>","more":"<h2 id=\"行内元素inline\"><a href=\"#行内元素inline\" class=\"headerlink\" title=\"行内元素inline\"></a>行内元素inline</h2><p>行内元素不独占一行，其左右可以有其他行内元素。例如a、span、strong等。</p>\n<p>特点：</p>\n<ol>\n<li>和相邻行内元素都在一行上。直到一行排不下才会换行。</li>\n<li>行内元素的宽度和高度就是其容纳的内容的宽高，在行内元素上设置width、height无效。</li>\n<li>垂直方向上的padding、border、margin不会产生边距效果，水平方向上的padding、border、margin可以影响元素的水平间距(布局)。</li>\n<li>设置line-height 可以改变行内元素的高度。</li>\n</ol>\n<p><strong>注意：</strong><br>行内元素设置padding，border在应用背景图片的时候会有显示，但是不改变垂直方向的布局，对于设置了background-color背景和padding的行内元素，背景可以向元素上面和下面延伸，但是不会改变行高，结果会出现设置后padding，border的背景会覆盖上面的元素的内容，下部被当做背景，被下级元素覆盖。(《CSS权威指南》P249)</p>\n<p>margin水平方向起作用，垂直方向不起作用，原因在于：行内元素的外边距不会改变元素的行高。（《CSS权威指南》P227）</p>\n<p>可以点击如下demo查看：<a href=\"http://codepen.io/theqwang/pen/obLKxg\">demo</a></p>"},{"title":"《高性能网站建设进阶指南》总结","date":"2016-03-17T15:52:36.000Z","_content":"在知乎上看到有人推荐这本《高性能网站建设进阶指南》，趁着自己还在学校赶紧去图书馆借来看了看，书不厚也就200多页很快就看完了，但图书馆的书最让人不爽的就是不能勾画，于是也就有了这篇总结。\n\n<!--more-->\n\n在《高性能网站建设进阶指南》之前，作者还出版过《高性能网站建设指南》一书，这本书里为Web性能提升设置了14条规则：\n\n1. 尽量减少 HTTP 请求\n2. 使用 CDN\n3. 添加 Expires 头\n4. 采用 Gzip 压缩组件\n5. 将样式表放在顶部\n6. 将脚本放在底部\n7. 避免 CSS 表达式\n8. 使用外部的 javascript 和 CSS\n9. 减少 DNS 查询\n10. 精简 javascript\n11. 避免重定向\n12. 删除重复的脚本\n13. 配置 ETag\n14. 使 Ajax 可缓存\n\n下面是《高性能网站建设进阶指南》的章节总结：\n\n# 第一章 理解 Ajax 性能\n做性能优化时，不要浪费时间去尝试为那些不消耗大量时间的代码提速。\n\n通常浏览器在运行javascript上花费的时间很少，绝大部分时间消耗在 DOM 上。\n\nAjax 提供了取代页面替换的有效方案，善加利用 Ajax 能使应用程序运行的更快。\n\n# 第二章 创建快速响应的 WEB 应用\n\n**如何定义快速呢？**   \n\njavascript 代码执行时间超过 0.1 秒，页面会给人不够平滑快捷的感觉；执行时间超过 1秒，则会感到应用程序缓慢；超过 10 秒，用户会非常沮丧。\n\n**javascript 是单线程的！**\n\n在页面上任何开销很大的（例如，长时间运行）javascript 操作都应该委托给 Web Worker。\n\n在 XMLHttpRequest 的异步模式中，XHR 实质上就是一个拥有专用 API 的 Web Worker。\n\n## 内存对响应时间的影响\n\n* 在 GC 执行回收时，会冻结整个运行环境，直到遍历完整个创建对象的“堆”。随着应用程序内存占用的增加，遍历整个堆去查找用户不再使用的对象所需要的时间最终会引起用户的注意。\n* 网页内存需求增长到足够大，迫使操作系统开始内存分页，系统把内存页从物理内存转移到虚拟内存（例如从 RAM 到硬盘）。\n\n如果确定内存有问题，可以通过以下两种方式清理内存：\n\n* 使用 delete 关键字从内存中移除不再需要的 javascript 对象\n* 从 DOM 树中移除不再是必须的节点\n\n#第三章 拆分初始化负载\n可以把 javascript 代码拆分到不同的组，第一组包含初始化页面所必须的函数，剩下的则在这些代码需要执行时按需加载它们，或者等到初始化的那些 javascript 代码加载完毕时再加载。\n\n# 第四章 无阻塞加载脚本\n浏览器在下载和解析 javascript 脚本时，不仅会阻塞页面中其他内容的下载，还会阻塞脚本后面所有元素的渲染。\n\n浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或 javascript 的命名空间。\n\n很显然 javascript 脚本没有必要按顺序下载，这方面 IE8 走在了前面，IE8 是第一个支持脚本并行下载的浏览器。\n\n下面列出异步加载脚本的技术：\n\n* XHR eval：该技术用过 XHR 从服务器获得脚本，然后通过 eval 执行脚本内容。\n* XHR 注入：类似于 XHR eval，但是与 eval 不同的是，该机制是通过创建一个 script 的 DOM 元素，然后把 XHR 的响应注入到 script 中执行 javascript。\n* Script DOM Element：该技术使用 javascript 动态创建 script DOM 元素并设置其 src 属性。下载过程中用这种方式创建脚本不会阻塞其他组件。和前面的技术相比，该技术允许跨域获取脚本。\n* Script defer 属性：HTML 4 为 script 标签定义了一个扩展属性：defer。带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。带有 defer 属性的 script 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 script 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。但是，defer 属性只被 IE 4 和 Firefox 3.5 更高版本的浏览器所支持，所以它不是一个理想的跨浏览器解决方案。\n* Script async 属性：HTML 5 为 script 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。\n\n# 第六章 布置行内脚本\n在样式表后面的行内脚本会阻塞所有后续资源的下载，解决该问题的方法是调整行内脚本的位置，使其不出现在样式表和任何其他资源之间。\n\n# 第七章 编写高效的 javascript\n* 尽量避免使用会增长作用域链的结构，比如使用 with 语句和 try-catch 语句中的 catch 从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，应该把它存储到一个局部变量中。例如，如果函数中多次访问处于作用域链底层的document，可以把 document 赋值给一个局部变量，从而减少降低在作用域链中搜索变量的时间。\n* 存储和读取数据的方式对脚本的性能影响很大。局部变量和字面量总是最快的，存取数组元素和对象属性会引起性能损耗。如果数组元素或对象的属性使用超过一次，那么为了提高存取速度，应该把它存储到一个局部变量中。\n* 在 javascript 中，循环经常成为性能瓶颈，为了使循环高效，可以使用倒序的方式来处理元素，即在控制条件中，将迭代变量和 0 作比较。\n* 流控制也是影响脚本执行速度的一个重要因素。if 语句适用于少量离散值或一段区间值的判断；switch 语句最好用于 3~10 个离散值的判断。\n* 谨慎的使用 DOM 中的 HTML nodelist 对象，每次存取这类对象的属性，都会重新查询 DOM 中的匹配节点。为了避免这种高昂的开销，只有必要时才存取 nodelist 对象，并将经常存取的值存储在局部变量中。例如，当用 for 遍历通过 getElementsByTagName 得到的 nodelist 对象时，应该把 nodelist 的 length 赋值给一个局部变量。\n* 如果 javascript 代码运行时间过长，可以使用定时器把任务拆分执行。\n\n#第九章 超越Gzip压缩\n所有的浏览器都支持 Gzip压缩，并可以通过添加 Accept-Encoding 的 http 头来向 web 服务器声明支持压缩：\n\nAccept-Encoding: gzip, deflate\n\n当请求中包含这个头时， web 服务器就会开启 Gzip 压缩功能。\n\n# 第十章 图像优化\n## 各种图片格式介绍\n**GIF**：\n\n* 只支持二进制透明（要么完全透明，要么完全不透明）\n* 支持动画\n* 是无损格式\n* gif 有 256 色的限制，不适合显示照片\n\n**JPEG**：\n\n* 不支持透明\n* 不支持动画\n* 是有损格式\n* ，压缩比很高，适合显示照片\n\n**PNG**：\n\n* 支持 alpha 透明\n* 不支持动画\n* 是无损格式\n* 不是动画时，应该尽可能 使用 png8（调色板png） 代替 gif。\n\n## 图像优化建议\n\n* 首先要选择合适的格式：用 jpeg 保存照片，用 gif 保存动画，其他所有图像用 png 保存，并且尽量使用 png8\n* 不要在 html 中对图像进行缩放\n* 不要忘了 favicons\n* 使用并优化 css sprite\n\n# 第十一章 划分主域\nIE6、7等老浏览器把从同一个服务器并行下载的资源数限制为2个，IE8、firefox和chrome增加到了6个。\n\n浏览器执行 “每个服务器端最大连接数” 的限制是根据 URL 上的主机名，而不是解析出来的 IP 地址。\n\n可以把网页中的资源放在不同的服务器上，加速资源的下载。\n\n# 第十三章 少用 iframe\n使用 iframe 会带来的问题：\n\n1. iframe 是开销最高的 DOM 元素，创建 iframe 的开销比创建其他类型的 DOM 元素要高 1~2 个数量级。\n2. 使用 iframe 会阻塞页面的 onload 事件，延长了浏览器的忙指示。\n3. 虽然 iframe 是一个完全独立的文档，浏览器也会共享对每个浏览器的受限连接数（IE8、chrome为6个）\n\n# 第十四章 简化 CSS 选择符\n\nCSS 的选择符类型（从开销最小到最大排序）：\n\n1. ID 选择符#\n2. 类选择符.\n3. 类型选择符 <tag>\n4. 相邻兄弟选择符 +\n5. 子选择符\n6. 后代选择符\n7. 通配符选择符\n8. 属性选择符\n9. 伪类\n\n**事实上，CSS 选择符是从右向左进行匹配的！最右边的选择符被称为关键选择符，关键选择符应该尽量使用开销小的选择符。**\n","source":"_posts/《高性能网站建设进阶指南》总结.md","raw":"title: 《高性能网站建设进阶指南》总结\ndate: 2016-03-17 23:52:36\ncategories: 优化\ntags:\n---\n在知乎上看到有人推荐这本《高性能网站建设进阶指南》，趁着自己还在学校赶紧去图书馆借来看了看，书不厚也就200多页很快就看完了，但图书馆的书最让人不爽的就是不能勾画，于是也就有了这篇总结。\n\n<!--more-->\n\n在《高性能网站建设进阶指南》之前，作者还出版过《高性能网站建设指南》一书，这本书里为Web性能提升设置了14条规则：\n\n1. 尽量减少 HTTP 请求\n2. 使用 CDN\n3. 添加 Expires 头\n4. 采用 Gzip 压缩组件\n5. 将样式表放在顶部\n6. 将脚本放在底部\n7. 避免 CSS 表达式\n8. 使用外部的 javascript 和 CSS\n9. 减少 DNS 查询\n10. 精简 javascript\n11. 避免重定向\n12. 删除重复的脚本\n13. 配置 ETag\n14. 使 Ajax 可缓存\n\n下面是《高性能网站建设进阶指南》的章节总结：\n\n# 第一章 理解 Ajax 性能\n做性能优化时，不要浪费时间去尝试为那些不消耗大量时间的代码提速。\n\n通常浏览器在运行javascript上花费的时间很少，绝大部分时间消耗在 DOM 上。\n\nAjax 提供了取代页面替换的有效方案，善加利用 Ajax 能使应用程序运行的更快。\n\n# 第二章 创建快速响应的 WEB 应用\n\n**如何定义快速呢？**   \n\njavascript 代码执行时间超过 0.1 秒，页面会给人不够平滑快捷的感觉；执行时间超过 1秒，则会感到应用程序缓慢；超过 10 秒，用户会非常沮丧。\n\n**javascript 是单线程的！**\n\n在页面上任何开销很大的（例如，长时间运行）javascript 操作都应该委托给 Web Worker。\n\n在 XMLHttpRequest 的异步模式中，XHR 实质上就是一个拥有专用 API 的 Web Worker。\n\n## 内存对响应时间的影响\n\n* 在 GC 执行回收时，会冻结整个运行环境，直到遍历完整个创建对象的“堆”。随着应用程序内存占用的增加，遍历整个堆去查找用户不再使用的对象所需要的时间最终会引起用户的注意。\n* 网页内存需求增长到足够大，迫使操作系统开始内存分页，系统把内存页从物理内存转移到虚拟内存（例如从 RAM 到硬盘）。\n\n如果确定内存有问题，可以通过以下两种方式清理内存：\n\n* 使用 delete 关键字从内存中移除不再需要的 javascript 对象\n* 从 DOM 树中移除不再是必须的节点\n\n#第三章 拆分初始化负载\n可以把 javascript 代码拆分到不同的组，第一组包含初始化页面所必须的函数，剩下的则在这些代码需要执行时按需加载它们，或者等到初始化的那些 javascript 代码加载完毕时再加载。\n\n# 第四章 无阻塞加载脚本\n浏览器在下载和解析 javascript 脚本时，不仅会阻塞页面中其他内容的下载，还会阻塞脚本后面所有元素的渲染。\n\n浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或 javascript 的命名空间。\n\n很显然 javascript 脚本没有必要按顺序下载，这方面 IE8 走在了前面，IE8 是第一个支持脚本并行下载的浏览器。\n\n下面列出异步加载脚本的技术：\n\n* XHR eval：该技术用过 XHR 从服务器获得脚本，然后通过 eval 执行脚本内容。\n* XHR 注入：类似于 XHR eval，但是与 eval 不同的是，该机制是通过创建一个 script 的 DOM 元素，然后把 XHR 的响应注入到 script 中执行 javascript。\n* Script DOM Element：该技术使用 javascript 动态创建 script DOM 元素并设置其 src 属性。下载过程中用这种方式创建脚本不会阻塞其他组件。和前面的技术相比，该技术允许跨域获取脚本。\n* Script defer 属性：HTML 4 为 script 标签定义了一个扩展属性：defer。带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。带有 defer 属性的 script 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 script 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。但是，defer 属性只被 IE 4 和 Firefox 3.5 更高版本的浏览器所支持，所以它不是一个理想的跨浏览器解决方案。\n* Script async 属性：HTML 5 为 script 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。\n\n# 第六章 布置行内脚本\n在样式表后面的行内脚本会阻塞所有后续资源的下载，解决该问题的方法是调整行内脚本的位置，使其不出现在样式表和任何其他资源之间。\n\n# 第七章 编写高效的 javascript\n* 尽量避免使用会增长作用域链的结构，比如使用 with 语句和 try-catch 语句中的 catch 从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，应该把它存储到一个局部变量中。例如，如果函数中多次访问处于作用域链底层的document，可以把 document 赋值给一个局部变量，从而减少降低在作用域链中搜索变量的时间。\n* 存储和读取数据的方式对脚本的性能影响很大。局部变量和字面量总是最快的，存取数组元素和对象属性会引起性能损耗。如果数组元素或对象的属性使用超过一次，那么为了提高存取速度，应该把它存储到一个局部变量中。\n* 在 javascript 中，循环经常成为性能瓶颈，为了使循环高效，可以使用倒序的方式来处理元素，即在控制条件中，将迭代变量和 0 作比较。\n* 流控制也是影响脚本执行速度的一个重要因素。if 语句适用于少量离散值或一段区间值的判断；switch 语句最好用于 3~10 个离散值的判断。\n* 谨慎的使用 DOM 中的 HTML nodelist 对象，每次存取这类对象的属性，都会重新查询 DOM 中的匹配节点。为了避免这种高昂的开销，只有必要时才存取 nodelist 对象，并将经常存取的值存储在局部变量中。例如，当用 for 遍历通过 getElementsByTagName 得到的 nodelist 对象时，应该把 nodelist 的 length 赋值给一个局部变量。\n* 如果 javascript 代码运行时间过长，可以使用定时器把任务拆分执行。\n\n#第九章 超越Gzip压缩\n所有的浏览器都支持 Gzip压缩，并可以通过添加 Accept-Encoding 的 http 头来向 web 服务器声明支持压缩：\n\nAccept-Encoding: gzip, deflate\n\n当请求中包含这个头时， web 服务器就会开启 Gzip 压缩功能。\n\n# 第十章 图像优化\n## 各种图片格式介绍\n**GIF**：\n\n* 只支持二进制透明（要么完全透明，要么完全不透明）\n* 支持动画\n* 是无损格式\n* gif 有 256 色的限制，不适合显示照片\n\n**JPEG**：\n\n* 不支持透明\n* 不支持动画\n* 是有损格式\n* ，压缩比很高，适合显示照片\n\n**PNG**：\n\n* 支持 alpha 透明\n* 不支持动画\n* 是无损格式\n* 不是动画时，应该尽可能 使用 png8（调色板png） 代替 gif。\n\n## 图像优化建议\n\n* 首先要选择合适的格式：用 jpeg 保存照片，用 gif 保存动画，其他所有图像用 png 保存，并且尽量使用 png8\n* 不要在 html 中对图像进行缩放\n* 不要忘了 favicons\n* 使用并优化 css sprite\n\n# 第十一章 划分主域\nIE6、7等老浏览器把从同一个服务器并行下载的资源数限制为2个，IE8、firefox和chrome增加到了6个。\n\n浏览器执行 “每个服务器端最大连接数” 的限制是根据 URL 上的主机名，而不是解析出来的 IP 地址。\n\n可以把网页中的资源放在不同的服务器上，加速资源的下载。\n\n# 第十三章 少用 iframe\n使用 iframe 会带来的问题：\n\n1. iframe 是开销最高的 DOM 元素，创建 iframe 的开销比创建其他类型的 DOM 元素要高 1~2 个数量级。\n2. 使用 iframe 会阻塞页面的 onload 事件，延长了浏览器的忙指示。\n3. 虽然 iframe 是一个完全独立的文档，浏览器也会共享对每个浏览器的受限连接数（IE8、chrome为6个）\n\n# 第十四章 简化 CSS 选择符\n\nCSS 的选择符类型（从开销最小到最大排序）：\n\n1. ID 选择符#\n2. 类选择符.\n3. 类型选择符 <tag>\n4. 相邻兄弟选择符 +\n5. 子选择符\n6. 后代选择符\n7. 通配符选择符\n8. 属性选择符\n9. 伪类\n\n**事实上，CSS 选择符是从右向左进行匹配的！最右边的选择符被称为关键选择符，关键选择符应该尽量使用开销小的选择符。**\n","slug":"《高性能网站建设进阶指南》总结","published":1,"updated":"2017-03-11T22:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0d70lyz0004ckmlz2ckl14j","content":"<p>在知乎上看到有人推荐这本《高性能网站建设进阶指南》，趁着自己还在学校赶紧去图书馆借来看了看，书不厚也就200多页很快就看完了，但图书馆的书最让人不爽的就是不能勾画，于是也就有了这篇总结。</p>\n<a id=\"more\"></a>\n<p>在《高性能网站建设进阶指南》之前，作者还出版过《高性能网站建设指南》一书，这本书里为Web性能提升设置了14条规则：</p>\n<ol>\n<li>尽量减少 HTTP 请求</li>\n<li>使用 CDN</li>\n<li>添加 Expires 头</li>\n<li>采用 Gzip 压缩组件</li>\n<li>将样式表放在顶部</li>\n<li>将脚本放在底部</li>\n<li>避免 CSS 表达式</li>\n<li>使用外部的 javascript 和 CSS</li>\n<li>减少 DNS 查询</li>\n<li>精简 javascript</li>\n<li>避免重定向</li>\n<li>删除重复的脚本</li>\n<li>配置 ETag</li>\n<li>使 Ajax 可缓存</li>\n</ol>\n<p>下面是《高性能网站建设进阶指南》的章节总结：</p>\n<h1 id=\"第一章-理解-Ajax-性能\"><a href=\"#第一章-理解-Ajax-性能\" class=\"headerlink\" title=\"第一章 理解 Ajax 性能\"></a>第一章 理解 Ajax 性能</h1><p>做性能优化时，不要浪费时间去尝试为那些不消耗大量时间的代码提速。</p>\n<p>通常浏览器在运行javascript上花费的时间很少，绝大部分时间消耗在 DOM 上。</p>\n<p>Ajax 提供了取代页面替换的有效方案，善加利用 Ajax 能使应用程序运行的更快。</p>\n<h1 id=\"第二章-创建快速响应的-WEB-应用\"><a href=\"#第二章-创建快速响应的-WEB-应用\" class=\"headerlink\" title=\"第二章 创建快速响应的 WEB 应用\"></a>第二章 创建快速响应的 WEB 应用</h1><p><strong>如何定义快速呢？</strong>   </p>\n<p>javascript 代码执行时间超过 0.1 秒，页面会给人不够平滑快捷的感觉；执行时间超过 1秒，则会感到应用程序缓慢；超过 10 秒，用户会非常沮丧。</p>\n<p><strong>javascript 是单线程的！</strong></p>\n<p>在页面上任何开销很大的（例如，长时间运行）javascript 操作都应该委托给 Web Worker。</p>\n<p>在 XMLHttpRequest 的异步模式中，XHR 实质上就是一个拥有专用 API 的 Web Worker。</p>\n<h2 id=\"内存对响应时间的影响\"><a href=\"#内存对响应时间的影响\" class=\"headerlink\" title=\"内存对响应时间的影响\"></a>内存对响应时间的影响</h2><ul>\n<li>在 GC 执行回收时，会冻结整个运行环境，直到遍历完整个创建对象的“堆”。随着应用程序内存占用的增加，遍历整个堆去查找用户不再使用的对象所需要的时间最终会引起用户的注意。</li>\n<li>网页内存需求增长到足够大，迫使操作系统开始内存分页，系统把内存页从物理内存转移到虚拟内存（例如从 RAM 到硬盘）。</li>\n</ul>\n<p>如果确定内存有问题，可以通过以下两种方式清理内存：</p>\n<ul>\n<li>使用 delete 关键字从内存中移除不再需要的 javascript 对象</li>\n<li>从 DOM 树中移除不再是必须的节点</li>\n</ul>\n<p>#第三章 拆分初始化负载<br>可以把 javascript 代码拆分到不同的组，第一组包含初始化页面所必须的函数，剩下的则在这些代码需要执行时按需加载它们，或者等到初始化的那些 javascript 代码加载完毕时再加载。</p>\n<h1 id=\"第四章-无阻塞加载脚本\"><a href=\"#第四章-无阻塞加载脚本\" class=\"headerlink\" title=\"第四章 无阻塞加载脚本\"></a>第四章 无阻塞加载脚本</h1><p>浏览器在下载和解析 javascript 脚本时，不仅会阻塞页面中其他内容的下载，还会阻塞脚本后面所有元素的渲染。</p>\n<p>浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或 javascript 的命名空间。</p>\n<p>很显然 javascript 脚本没有必要按顺序下载，这方面 IE8 走在了前面，IE8 是第一个支持脚本并行下载的浏览器。</p>\n<p>下面列出异步加载脚本的技术：</p>\n<ul>\n<li>XHR eval：该技术用过 XHR 从服务器获得脚本，然后通过 eval 执行脚本内容。</li>\n<li>XHR 注入：类似于 XHR eval，但是与 eval 不同的是，该机制是通过创建一个 script 的 DOM 元素，然后把 XHR 的响应注入到 script 中执行 javascript。</li>\n<li>Script DOM Element：该技术使用 javascript 动态创建 script DOM 元素并设置其 src 属性。下载过程中用这种方式创建脚本不会阻塞其他组件。和前面的技术相比，该技术允许跨域获取脚本。</li>\n<li>Script defer 属性：HTML 4 为 script 标签定义了一个扩展属性：defer。带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。带有 defer 属性的 script 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 script 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。但是，defer 属性只被 IE 4 和 Firefox 3.5 更高版本的浏览器所支持，所以它不是一个理想的跨浏览器解决方案。</li>\n<li>Script async 属性：HTML 5 为 script 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。</li>\n</ul>\n<h1 id=\"第六章-布置行内脚本\"><a href=\"#第六章-布置行内脚本\" class=\"headerlink\" title=\"第六章 布置行内脚本\"></a>第六章 布置行内脚本</h1><p>在样式表后面的行内脚本会阻塞所有后续资源的下载，解决该问题的方法是调整行内脚本的位置，使其不出现在样式表和任何其他资源之间。</p>\n<h1 id=\"第七章-编写高效的-javascript\"><a href=\"#第七章-编写高效的-javascript\" class=\"headerlink\" title=\"第七章 编写高效的 javascript\"></a>第七章 编写高效的 javascript</h1><ul>\n<li>尽量避免使用会增长作用域链的结构，比如使用 with 语句和 try-catch 语句中的 catch 从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，应该把它存储到一个局部变量中。例如，如果函数中多次访问处于作用域链底层的document，可以把 document 赋值给一个局部变量，从而减少降低在作用域链中搜索变量的时间。</li>\n<li>存储和读取数据的方式对脚本的性能影响很大。局部变量和字面量总是最快的，存取数组元素和对象属性会引起性能损耗。如果数组元素或对象的属性使用超过一次，那么为了提高存取速度，应该把它存储到一个局部变量中。</li>\n<li>在 javascript 中，循环经常成为性能瓶颈，为了使循环高效，可以使用倒序的方式来处理元素，即在控制条件中，将迭代变量和 0 作比较。</li>\n<li>流控制也是影响脚本执行速度的一个重要因素。if 语句适用于少量离散值或一段区间值的判断；switch 语句最好用于 3~10 个离散值的判断。</li>\n<li>谨慎的使用 DOM 中的 HTML nodelist 对象，每次存取这类对象的属性，都会重新查询 DOM 中的匹配节点。为了避免这种高昂的开销，只有必要时才存取 nodelist 对象，并将经常存取的值存储在局部变量中。例如，当用 for 遍历通过 getElementsByTagName 得到的 nodelist 对象时，应该把 nodelist 的 length 赋值给一个局部变量。</li>\n<li>如果 javascript 代码运行时间过长，可以使用定时器把任务拆分执行。</li>\n</ul>\n<p>#第九章 超越Gzip压缩<br>所有的浏览器都支持 Gzip压缩，并可以通过添加 Accept-Encoding 的 http 头来向 web 服务器声明支持压缩：</p>\n<p>Accept-Encoding: gzip, deflate</p>\n<p>当请求中包含这个头时， web 服务器就会开启 Gzip 压缩功能。</p>\n<h1 id=\"第十章-图像优化\"><a href=\"#第十章-图像优化\" class=\"headerlink\" title=\"第十章 图像优化\"></a>第十章 图像优化</h1><h2 id=\"各种图片格式介绍\"><a href=\"#各种图片格式介绍\" class=\"headerlink\" title=\"各种图片格式介绍\"></a>各种图片格式介绍</h2><p><strong>GIF</strong>：</p>\n<ul>\n<li>只支持二进制透明（要么完全透明，要么完全不透明）</li>\n<li>支持动画</li>\n<li>是无损格式</li>\n<li>gif 有 256 色的限制，不适合显示照片</li>\n</ul>\n<p><strong>JPEG</strong>：</p>\n<ul>\n<li>不支持透明</li>\n<li>不支持动画</li>\n<li>是有损格式</li>\n<li>，压缩比很高，适合显示照片</li>\n</ul>\n<p><strong>PNG</strong>：</p>\n<ul>\n<li>支持 alpha 透明</li>\n<li>不支持动画</li>\n<li>是无损格式</li>\n<li>不是动画时，应该尽可能 使用 png8（调色板png） 代替 gif。</li>\n</ul>\n<h2 id=\"图像优化建议\"><a href=\"#图像优化建议\" class=\"headerlink\" title=\"图像优化建议\"></a>图像优化建议</h2><ul>\n<li>首先要选择合适的格式：用 jpeg 保存照片，用 gif 保存动画，其他所有图像用 png 保存，并且尽量使用 png8</li>\n<li>不要在 html 中对图像进行缩放</li>\n<li>不要忘了 favicons</li>\n<li>使用并优化 css sprite</li>\n</ul>\n<h1 id=\"第十一章-划分主域\"><a href=\"#第十一章-划分主域\" class=\"headerlink\" title=\"第十一章 划分主域\"></a>第十一章 划分主域</h1><p>IE6、7等老浏览器把从同一个服务器并行下载的资源数限制为2个，IE8、firefox和chrome增加到了6个。</p>\n<p>浏览器执行 “每个服务器端最大连接数” 的限制是根据 URL 上的主机名，而不是解析出来的 IP 地址。</p>\n<p>可以把网页中的资源放在不同的服务器上，加速资源的下载。</p>\n<h1 id=\"第十三章-少用-iframe\"><a href=\"#第十三章-少用-iframe\" class=\"headerlink\" title=\"第十三章 少用 iframe\"></a>第十三章 少用 iframe</h1><p>使用 iframe 会带来的问题：</p>\n<ol>\n<li>iframe 是开销最高的 DOM 元素，创建 iframe 的开销比创建其他类型的 DOM 元素要高 1~2 个数量级。</li>\n<li>使用 iframe 会阻塞页面的 onload 事件，延长了浏览器的忙指示。</li>\n<li>虽然 iframe 是一个完全独立的文档，浏览器也会共享对每个浏览器的受限连接数（IE8、chrome为6个）</li>\n</ol>\n<h1 id=\"第十四章-简化-CSS-选择符\"><a href=\"#第十四章-简化-CSS-选择符\" class=\"headerlink\" title=\"第十四章 简化 CSS 选择符\"></a>第十四章 简化 CSS 选择符</h1><p>CSS 的选择符类型（从开销最小到最大排序）：</p>\n<ol>\n<li>ID 选择符#</li>\n<li>类选择符.</li>\n<li>类型选择符 <tag></tag></li>\n<li>相邻兄弟选择符 +</li>\n<li>子选择符</li>\n<li>后代选择符</li>\n<li>通配符选择符</li>\n<li>属性选择符</li>\n<li>伪类</li>\n</ol>\n<p><strong>事实上，CSS 选择符是从右向左进行匹配的！最右边的选择符被称为关键选择符，关键选择符应该尽量使用开销小的选择符。</strong></p>\n","excerpt":"<p>在知乎上看到有人推荐这本《高性能网站建设进阶指南》，趁着自己还在学校赶紧去图书馆借来看了看，书不厚也就200多页很快就看完了，但图书馆的书最让人不爽的就是不能勾画，于是也就有了这篇总结。</p>","more":"<p>在《高性能网站建设进阶指南》之前，作者还出版过《高性能网站建设指南》一书，这本书里为Web性能提升设置了14条规则：</p>\n<ol>\n<li>尽量减少 HTTP 请求</li>\n<li>使用 CDN</li>\n<li>添加 Expires 头</li>\n<li>采用 Gzip 压缩组件</li>\n<li>将样式表放在顶部</li>\n<li>将脚本放在底部</li>\n<li>避免 CSS 表达式</li>\n<li>使用外部的 javascript 和 CSS</li>\n<li>减少 DNS 查询</li>\n<li>精简 javascript</li>\n<li>避免重定向</li>\n<li>删除重复的脚本</li>\n<li>配置 ETag</li>\n<li>使 Ajax 可缓存</li>\n</ol>\n<p>下面是《高性能网站建设进阶指南》的章节总结：</p>\n<h1 id=\"第一章-理解-Ajax-性能\"><a href=\"#第一章-理解-Ajax-性能\" class=\"headerlink\" title=\"第一章 理解 Ajax 性能\"></a>第一章 理解 Ajax 性能</h1><p>做性能优化时，不要浪费时间去尝试为那些不消耗大量时间的代码提速。</p>\n<p>通常浏览器在运行javascript上花费的时间很少，绝大部分时间消耗在 DOM 上。</p>\n<p>Ajax 提供了取代页面替换的有效方案，善加利用 Ajax 能使应用程序运行的更快。</p>\n<h1 id=\"第二章-创建快速响应的-WEB-应用\"><a href=\"#第二章-创建快速响应的-WEB-应用\" class=\"headerlink\" title=\"第二章 创建快速响应的 WEB 应用\"></a>第二章 创建快速响应的 WEB 应用</h1><p><strong>如何定义快速呢？</strong>   </p>\n<p>javascript 代码执行时间超过 0.1 秒，页面会给人不够平滑快捷的感觉；执行时间超过 1秒，则会感到应用程序缓慢；超过 10 秒，用户会非常沮丧。</p>\n<p><strong>javascript 是单线程的！</strong></p>\n<p>在页面上任何开销很大的（例如，长时间运行）javascript 操作都应该委托给 Web Worker。</p>\n<p>在 XMLHttpRequest 的异步模式中，XHR 实质上就是一个拥有专用 API 的 Web Worker。</p>\n<h2 id=\"内存对响应时间的影响\"><a href=\"#内存对响应时间的影响\" class=\"headerlink\" title=\"内存对响应时间的影响\"></a>内存对响应时间的影响</h2><ul>\n<li>在 GC 执行回收时，会冻结整个运行环境，直到遍历完整个创建对象的“堆”。随着应用程序内存占用的增加，遍历整个堆去查找用户不再使用的对象所需要的时间最终会引起用户的注意。</li>\n<li>网页内存需求增长到足够大，迫使操作系统开始内存分页，系统把内存页从物理内存转移到虚拟内存（例如从 RAM 到硬盘）。</li>\n</ul>\n<p>如果确定内存有问题，可以通过以下两种方式清理内存：</p>\n<ul>\n<li>使用 delete 关键字从内存中移除不再需要的 javascript 对象</li>\n<li>从 DOM 树中移除不再是必须的节点</li>\n</ul>\n<p>#第三章 拆分初始化负载<br>可以把 javascript 代码拆分到不同的组，第一组包含初始化页面所必须的函数，剩下的则在这些代码需要执行时按需加载它们，或者等到初始化的那些 javascript 代码加载完毕时再加载。</p>\n<h1 id=\"第四章-无阻塞加载脚本\"><a href=\"#第四章-无阻塞加载脚本\" class=\"headerlink\" title=\"第四章 无阻塞加载脚本\"></a>第四章 无阻塞加载脚本</h1><p>浏览器在下载和解析 javascript 脚本时，不仅会阻塞页面中其他内容的下载，还会阻塞脚本后面所有元素的渲染。</p>\n<p>浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或 javascript 的命名空间。</p>\n<p>很显然 javascript 脚本没有必要按顺序下载，这方面 IE8 走在了前面，IE8 是第一个支持脚本并行下载的浏览器。</p>\n<p>下面列出异步加载脚本的技术：</p>\n<ul>\n<li>XHR eval：该技术用过 XHR 从服务器获得脚本，然后通过 eval 执行脚本内容。</li>\n<li>XHR 注入：类似于 XHR eval，但是与 eval 不同的是，该机制是通过创建一个 script 的 DOM 元素，然后把 XHR 的响应注入到 script 中执行 javascript。</li>\n<li>Script DOM Element：该技术使用 javascript 动态创建 script DOM 元素并设置其 src 属性。下载过程中用这种方式创建脚本不会阻塞其他组件。和前面的技术相比，该技术允许跨域获取脚本。</li>\n<li>Script defer 属性：HTML 4 为 script 标签定义了一个扩展属性：defer。带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。带有 defer 属性的 script 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 script 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。但是，defer 属性只被 IE 4 和 Firefox 3.5 更高版本的浏览器所支持，所以它不是一个理想的跨浏览器解决方案。</li>\n<li>Script async 属性：HTML 5 为 script 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。</li>\n</ul>\n<h1 id=\"第六章-布置行内脚本\"><a href=\"#第六章-布置行内脚本\" class=\"headerlink\" title=\"第六章 布置行内脚本\"></a>第六章 布置行内脚本</h1><p>在样式表后面的行内脚本会阻塞所有后续资源的下载，解决该问题的方法是调整行内脚本的位置，使其不出现在样式表和任何其他资源之间。</p>\n<h1 id=\"第七章-编写高效的-javascript\"><a href=\"#第七章-编写高效的-javascript\" class=\"headerlink\" title=\"第七章 编写高效的 javascript\"></a>第七章 编写高效的 javascript</h1><ul>\n<li>尽量避免使用会增长作用域链的结构，比如使用 with 语句和 try-catch 语句中的 catch 从句。如果非局部变量的使用超过一次，那么为了降低性能损耗，应该把它存储到一个局部变量中。例如，如果函数中多次访问处于作用域链底层的document，可以把 document 赋值给一个局部变量，从而减少降低在作用域链中搜索变量的时间。</li>\n<li>存储和读取数据的方式对脚本的性能影响很大。局部变量和字面量总是最快的，存取数组元素和对象属性会引起性能损耗。如果数组元素或对象的属性使用超过一次，那么为了提高存取速度，应该把它存储到一个局部变量中。</li>\n<li>在 javascript 中，循环经常成为性能瓶颈，为了使循环高效，可以使用倒序的方式来处理元素，即在控制条件中，将迭代变量和 0 作比较。</li>\n<li>流控制也是影响脚本执行速度的一个重要因素。if 语句适用于少量离散值或一段区间值的判断；switch 语句最好用于 3~10 个离散值的判断。</li>\n<li>谨慎的使用 DOM 中的 HTML nodelist 对象，每次存取这类对象的属性，都会重新查询 DOM 中的匹配节点。为了避免这种高昂的开销，只有必要时才存取 nodelist 对象，并将经常存取的值存储在局部变量中。例如，当用 for 遍历通过 getElementsByTagName 得到的 nodelist 对象时，应该把 nodelist 的 length 赋值给一个局部变量。</li>\n<li>如果 javascript 代码运行时间过长，可以使用定时器把任务拆分执行。</li>\n</ul>\n<p>#第九章 超越Gzip压缩<br>所有的浏览器都支持 Gzip压缩，并可以通过添加 Accept-Encoding 的 http 头来向 web 服务器声明支持压缩：</p>\n<p>Accept-Encoding: gzip, deflate</p>\n<p>当请求中包含这个头时， web 服务器就会开启 Gzip 压缩功能。</p>\n<h1 id=\"第十章-图像优化\"><a href=\"#第十章-图像优化\" class=\"headerlink\" title=\"第十章 图像优化\"></a>第十章 图像优化</h1><h2 id=\"各种图片格式介绍\"><a href=\"#各种图片格式介绍\" class=\"headerlink\" title=\"各种图片格式介绍\"></a>各种图片格式介绍</h2><p><strong>GIF</strong>：</p>\n<ul>\n<li>只支持二进制透明（要么完全透明，要么完全不透明）</li>\n<li>支持动画</li>\n<li>是无损格式</li>\n<li>gif 有 256 色的限制，不适合显示照片</li>\n</ul>\n<p><strong>JPEG</strong>：</p>\n<ul>\n<li>不支持透明</li>\n<li>不支持动画</li>\n<li>是有损格式</li>\n<li>，压缩比很高，适合显示照片</li>\n</ul>\n<p><strong>PNG</strong>：</p>\n<ul>\n<li>支持 alpha 透明</li>\n<li>不支持动画</li>\n<li>是无损格式</li>\n<li>不是动画时，应该尽可能 使用 png8（调色板png） 代替 gif。</li>\n</ul>\n<h2 id=\"图像优化建议\"><a href=\"#图像优化建议\" class=\"headerlink\" title=\"图像优化建议\"></a>图像优化建议</h2><ul>\n<li>首先要选择合适的格式：用 jpeg 保存照片，用 gif 保存动画，其他所有图像用 png 保存，并且尽量使用 png8</li>\n<li>不要在 html 中对图像进行缩放</li>\n<li>不要忘了 favicons</li>\n<li>使用并优化 css sprite</li>\n</ul>\n<h1 id=\"第十一章-划分主域\"><a href=\"#第十一章-划分主域\" class=\"headerlink\" title=\"第十一章 划分主域\"></a>第十一章 划分主域</h1><p>IE6、7等老浏览器把从同一个服务器并行下载的资源数限制为2个，IE8、firefox和chrome增加到了6个。</p>\n<p>浏览器执行 “每个服务器端最大连接数” 的限制是根据 URL 上的主机名，而不是解析出来的 IP 地址。</p>\n<p>可以把网页中的资源放在不同的服务器上，加速资源的下载。</p>\n<h1 id=\"第十三章-少用-iframe\"><a href=\"#第十三章-少用-iframe\" class=\"headerlink\" title=\"第十三章 少用 iframe\"></a>第十三章 少用 iframe</h1><p>使用 iframe 会带来的问题：</p>\n<ol>\n<li>iframe 是开销最高的 DOM 元素，创建 iframe 的开销比创建其他类型的 DOM 元素要高 1~2 个数量级。</li>\n<li>使用 iframe 会阻塞页面的 onload 事件，延长了浏览器的忙指示。</li>\n<li>虽然 iframe 是一个完全独立的文档，浏览器也会共享对每个浏览器的受限连接数（IE8、chrome为6个）</li>\n</ol>\n<h1 id=\"第十四章-简化-CSS-选择符\"><a href=\"#第十四章-简化-CSS-选择符\" class=\"headerlink\" title=\"第十四章 简化 CSS 选择符\"></a>第十四章 简化 CSS 选择符</h1><p>CSS 的选择符类型（从开销最小到最大排序）：</p>\n<ol>\n<li>ID 选择符#</li>\n<li>类选择符.</li>\n<li>类型选择符 <tag></li>\n<li>相邻兄弟选择符 +</li>\n<li>子选择符</li>\n<li>后代选择符</li>\n<li>通配符选择符</li>\n<li>属性选择符</li>\n<li>伪类</li>\n</ol>\n<p><strong>事实上，CSS 选择符是从右向左进行匹配的！最右边的选择符被称为关键选择符，关键选择符应该尽量使用开销小的选择符。</strong></p>"},{"title":"不使用 border-radius 实现圆角","_content":"CSS3中，利用属性 border-radius 可以很方便的设置出圆角矩形，但是在IE8及以下版本却不支持这个属性，为了在旧版本的浏览器中实现宽高自适应的圆角矩形，可以采用以下三种方法。\n<!--more-->\n\n## 一、使用背景图片制作圆角\n使用背景图片制作宽、高自适应的圆角矩形，首先需要切出4个圆角图片，然后把4个圆角图片放在矩形的四个角上就大功告成了，这一共需要5个div标签，1个容器div和4个圆角背景div。是不是很好理解。\n\n具体实现来说，需要注意一些细节。对于矩形容器div：\n* 上下内边距的大小至少设置为圆角的高度。\n* position设置为相对定位。\n* 放置内容。\n\n对于4个圆角背景div：\n* 分别设置各个圆角背景图片。\n* 绝对定位于容器矩形的四个角。\n* 需要设置宽高值才能显示背景图片。\n\n假设圆角图片的宽高是5px，具体代码如下：\n```HTML\n<div class=\"content\">\n    <div class=\"top-left\"></div>\n    <div class=\"top-right\"></div>\n    <div class=\"btm-left\"></div>\n\t<div class=\"btm-right\"></div>\n</div>\n```\n\n```CSS\n.content {\n\tposition: relative;\n\tpadding: 5px;\n}\n.top-left,\n.top-right,\n.btm-left,\n.btm-right {\n\tposition: absolute;\n\twidth: 5px;\n\theight: 5px;\n}\n.top-left {\n\ttop: 0;\n\tleft: 0;\n\tbackground: url(imgs/top-left.png) no-repeat top left;\n}\n.top-right {\n\ttop: 0;\n\tright: 0;\n\tbackground: url(imgs/top-right.png) no-repeat top left;\n}\n.btm-left {\n\tbottom: 0;\n\tleft: 0;\n\tbackground: url(imgs/btm-left.png) no-repeat top left;\n}\n.btm-right {\n\tbottom: 0;\n\tright: 0;\n\tbackground: url(imgs/btm-right.png) no-repeat top left;\n}\n```\n[点击查看在线demo](http://codepen.io/theqwang/pen/VePrZM)\n\n## 二、纯 CSS+div 制作圆角矩形\n这种方法的原理是利用像素点绘制弧线来模拟圆角。简单起见，这里我用圆角半径为3px的例子讲解，其中圆角矩形的背景色为粉色，矩形的边框为黑色。左上角圆角放大后如下图所示：\n![圆角放大图](http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-03%2023.06.10.png)\n这里矩形上下各需要3个高度为1px、垂直罗在一起的div才能模拟出圆角。具体实现如下：\n* 第一个div就是上面图中矩形的黑色上边框，因为模拟的圆角半径为3px，所以该div的左右外边距设为3px，背景色设为黑色。\n* 第二个div的左右外边距设为2px，左右边框为1px的黑线，背景色为粉色。\n* 第三个div的左右外边距设为1px，左右边框为1px的黑线，背景色为粉色。\n* 圆角矩形下面的两个圆角是以上三个div反序排列。\n* 矩形内容区域的div只需要设置左右边框和背景色即可。\n\n具体代码如下\n```HTML\n<div class=\"wrapper\">\n    <div class=\"r1\"></div>\n\t<div class=\"r2\"></div>\n\t<div class=\"r3\"></div>\n\t<div class=\"content\">aaaaa</div>\n\t<div class=\"r3\"></div>\n\t<div class=\"r2\"></div>\n\t<div class=\"r1\"></div>\n</div>\n```\n\n```CSS\n.r1 {\n\theight: 1px;\n\tmargin: 0 3px;\n\tbackground-color: #111;\n}\n.r2 {\n\theight: 1px;\n\tmargin: 0 2px;\n\tbackground-color: #f4b4b4;\n\tborder-left: 1px solid #111;\n\tborder-right: 1px solid #111;\n}\n.r3 {\n\theight: 1px;\n\tmargin: 0 1px;\n\tbackground-color: #f4b4b4;\n\tborder-left: 1px solid #111;\n\tborder-right: 1px solid #111;\n}\n.content {\n\tbackground-color: #f4b4b4;\n\tborder-left: 1px solid #111;\n\tborder-right: 1px solid #111;\n}\n```\n\n[点击查看在线demo](http://codepen.io/theqwang/pen/QydqrZ)\n\n此方法优缺点分析：\n* 不使用背景图片，减少了HTTP请求数。\n* 后期维护性好，但是圆角矩形像素增加，无意义的div代码将成倍增加。\n* 实现的圆角矩形有局限性。\n* 只能实现纯色圆角。\n\n## 三、使用CSS border 画出梯形模拟圆角\n通过设置border属性，可以得到梯形和三角形，效果如下图所示：\n![border 画梯形和三角形](http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.27.16.png)\n\n* 当给div的四个边框设置比较大的宽度值时，就能得到四个梯形，如上图中的第一个图案；\n* 在此基础上，当把div的高度值设为0后，就能得到梯形和等腰三角形了，如上图中的第二个图案；\n* 当把div的宽、高都设为0，且只设置上、左的两个边框时，就能得到两个直角三角形，图中的第三个图案就是这种情况；\n* 在此基础上，把其中的一个边框的颜色设置为透明，就能像第四个图案一样得到一个直角三角形。\n\n代码如下：\n\n```HTML\n<div class=\"box1\"></div>\n<div class=\"box2\"></div>\n<div class=\"box3\"></div>\n<div class=\"box4\"></div>\n```\n\n```CSS\n.box1 {\n\theight: 20px;\n\twidth: 20px;\n\tborder-top: 20px solid red;\n\tborder-right: 20px solid green;\n\tborder-bottom: 20px solid blue;\n\tborder-left: 20px solid yellow;\n}\n.box2 {\n\theight: 0;\n\twidth: 20px;\n\tborder-top: 20px solid red;\n\tborder-right: 20px solid green;\n\tborder-bottom: 20px solid blue;\n\tborder-left: 20px solid yellow;\n}\n.box3 {\n\theight: 0;\n\twidth: 0;\n\tborder-top: 50px solid red;\n\t/* border-right: 20px solid green; */\n\t/* border-bottom: 20px solid blue; */\n\tborder-left: 50px solid yellow;\n}\n.box4 {\n\theight: 0;\n\twidth: 0;\n\tborder-top: 50px solid red;\n\t/* border-right: 20px solid green; */\n\t/* border-bottom: 20px solid blue; */\n\tborder-left: 50px solid transparent;\n}\n```\n[点击查看在线demo](http://codepen.io/theqwang/pen/eJgMxv)\n\n已经知道了如何通过 border 画出梯形了，那又该如何利用梯形模拟圆角矩形呢？很简单，只要在矩形的上面和下面各放上一个梯形，就能得到圆角矩形了。原理嘛就是利用梯形的左右两个斜边模拟圆角啦，直接上效果图：\n![效果图](http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.51.06.png)\n\n具体代码如下：\n\n```HTML\n<div class=\"wrapper\">\n    <div class=\"top\"></div>\n\t<div class=\"content\">\n\t    <p>利用border画出梯形，模拟圆角</p>\n\t</div>\n\t<div class=\"bottom\"></div>\n</div>\n```\n\n```CSS\ndiv {\n\tbox-sizing: border-box;\n}\n.top {\n\theight: 0;\n\tborder-top: 3px solid transparent;\n\tborder-bottom: 3px solid #111;\n\tborder-left: 3px solid transparent;\n\tborder-right: 3px solid transparent;\n}\n.bottom {\n\theight: 0;\n\tborder-top: 3px solid #111;\n\tborder-bottom: 3px solid transparent;\n\tborder-left: 3px solid transparent;\n\tborder-right: 3px solid transparent;\n}\n.content {\n\tcolor: #fff;\n\tbackground-color: #111;\n}\n.wrapper {\n\twidth: 200px;\n\tmargin: 0 auto;\n}\n```\n\n[点击查看在线demo](http://codepen.io/theqwang/pen/BjpwmY)\n\n这种方法与方法二相比，更加简洁易懂，减少了无意义的div标签，在模拟较小的实色圆角时，不失为最佳的方法。\n","source":"_posts/不使用-border-radius-实现圆角.md","raw":"title: 不使用 border-radius 实现圆角\ncategories: CSS\ntags:\n---\nCSS3中，利用属性 border-radius 可以很方便的设置出圆角矩形，但是在IE8及以下版本却不支持这个属性，为了在旧版本的浏览器中实现宽高自适应的圆角矩形，可以采用以下三种方法。\n<!--more-->\n\n## 一、使用背景图片制作圆角\n使用背景图片制作宽、高自适应的圆角矩形，首先需要切出4个圆角图片，然后把4个圆角图片放在矩形的四个角上就大功告成了，这一共需要5个div标签，1个容器div和4个圆角背景div。是不是很好理解。\n\n具体实现来说，需要注意一些细节。对于矩形容器div：\n* 上下内边距的大小至少设置为圆角的高度。\n* position设置为相对定位。\n* 放置内容。\n\n对于4个圆角背景div：\n* 分别设置各个圆角背景图片。\n* 绝对定位于容器矩形的四个角。\n* 需要设置宽高值才能显示背景图片。\n\n假设圆角图片的宽高是5px，具体代码如下：\n```HTML\n<div class=\"content\">\n    <div class=\"top-left\"></div>\n    <div class=\"top-right\"></div>\n    <div class=\"btm-left\"></div>\n\t<div class=\"btm-right\"></div>\n</div>\n```\n\n```CSS\n.content {\n\tposition: relative;\n\tpadding: 5px;\n}\n.top-left,\n.top-right,\n.btm-left,\n.btm-right {\n\tposition: absolute;\n\twidth: 5px;\n\theight: 5px;\n}\n.top-left {\n\ttop: 0;\n\tleft: 0;\n\tbackground: url(imgs/top-left.png) no-repeat top left;\n}\n.top-right {\n\ttop: 0;\n\tright: 0;\n\tbackground: url(imgs/top-right.png) no-repeat top left;\n}\n.btm-left {\n\tbottom: 0;\n\tleft: 0;\n\tbackground: url(imgs/btm-left.png) no-repeat top left;\n}\n.btm-right {\n\tbottom: 0;\n\tright: 0;\n\tbackground: url(imgs/btm-right.png) no-repeat top left;\n}\n```\n[点击查看在线demo](http://codepen.io/theqwang/pen/VePrZM)\n\n## 二、纯 CSS+div 制作圆角矩形\n这种方法的原理是利用像素点绘制弧线来模拟圆角。简单起见，这里我用圆角半径为3px的例子讲解，其中圆角矩形的背景色为粉色，矩形的边框为黑色。左上角圆角放大后如下图所示：\n![圆角放大图](http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-03%2023.06.10.png)\n这里矩形上下各需要3个高度为1px、垂直罗在一起的div才能模拟出圆角。具体实现如下：\n* 第一个div就是上面图中矩形的黑色上边框，因为模拟的圆角半径为3px，所以该div的左右外边距设为3px，背景色设为黑色。\n* 第二个div的左右外边距设为2px，左右边框为1px的黑线，背景色为粉色。\n* 第三个div的左右外边距设为1px，左右边框为1px的黑线，背景色为粉色。\n* 圆角矩形下面的两个圆角是以上三个div反序排列。\n* 矩形内容区域的div只需要设置左右边框和背景色即可。\n\n具体代码如下\n```HTML\n<div class=\"wrapper\">\n    <div class=\"r1\"></div>\n\t<div class=\"r2\"></div>\n\t<div class=\"r3\"></div>\n\t<div class=\"content\">aaaaa</div>\n\t<div class=\"r3\"></div>\n\t<div class=\"r2\"></div>\n\t<div class=\"r1\"></div>\n</div>\n```\n\n```CSS\n.r1 {\n\theight: 1px;\n\tmargin: 0 3px;\n\tbackground-color: #111;\n}\n.r2 {\n\theight: 1px;\n\tmargin: 0 2px;\n\tbackground-color: #f4b4b4;\n\tborder-left: 1px solid #111;\n\tborder-right: 1px solid #111;\n}\n.r3 {\n\theight: 1px;\n\tmargin: 0 1px;\n\tbackground-color: #f4b4b4;\n\tborder-left: 1px solid #111;\n\tborder-right: 1px solid #111;\n}\n.content {\n\tbackground-color: #f4b4b4;\n\tborder-left: 1px solid #111;\n\tborder-right: 1px solid #111;\n}\n```\n\n[点击查看在线demo](http://codepen.io/theqwang/pen/QydqrZ)\n\n此方法优缺点分析：\n* 不使用背景图片，减少了HTTP请求数。\n* 后期维护性好，但是圆角矩形像素增加，无意义的div代码将成倍增加。\n* 实现的圆角矩形有局限性。\n* 只能实现纯色圆角。\n\n## 三、使用CSS border 画出梯形模拟圆角\n通过设置border属性，可以得到梯形和三角形，效果如下图所示：\n![border 画梯形和三角形](http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.27.16.png)\n\n* 当给div的四个边框设置比较大的宽度值时，就能得到四个梯形，如上图中的第一个图案；\n* 在此基础上，当把div的高度值设为0后，就能得到梯形和等腰三角形了，如上图中的第二个图案；\n* 当把div的宽、高都设为0，且只设置上、左的两个边框时，就能得到两个直角三角形，图中的第三个图案就是这种情况；\n* 在此基础上，把其中的一个边框的颜色设置为透明，就能像第四个图案一样得到一个直角三角形。\n\n代码如下：\n\n```HTML\n<div class=\"box1\"></div>\n<div class=\"box2\"></div>\n<div class=\"box3\"></div>\n<div class=\"box4\"></div>\n```\n\n```CSS\n.box1 {\n\theight: 20px;\n\twidth: 20px;\n\tborder-top: 20px solid red;\n\tborder-right: 20px solid green;\n\tborder-bottom: 20px solid blue;\n\tborder-left: 20px solid yellow;\n}\n.box2 {\n\theight: 0;\n\twidth: 20px;\n\tborder-top: 20px solid red;\n\tborder-right: 20px solid green;\n\tborder-bottom: 20px solid blue;\n\tborder-left: 20px solid yellow;\n}\n.box3 {\n\theight: 0;\n\twidth: 0;\n\tborder-top: 50px solid red;\n\t/* border-right: 20px solid green; */\n\t/* border-bottom: 20px solid blue; */\n\tborder-left: 50px solid yellow;\n}\n.box4 {\n\theight: 0;\n\twidth: 0;\n\tborder-top: 50px solid red;\n\t/* border-right: 20px solid green; */\n\t/* border-bottom: 20px solid blue; */\n\tborder-left: 50px solid transparent;\n}\n```\n[点击查看在线demo](http://codepen.io/theqwang/pen/eJgMxv)\n\n已经知道了如何通过 border 画出梯形了，那又该如何利用梯形模拟圆角矩形呢？很简单，只要在矩形的上面和下面各放上一个梯形，就能得到圆角矩形了。原理嘛就是利用梯形的左右两个斜边模拟圆角啦，直接上效果图：\n![效果图](http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.51.06.png)\n\n具体代码如下：\n\n```HTML\n<div class=\"wrapper\">\n    <div class=\"top\"></div>\n\t<div class=\"content\">\n\t    <p>利用border画出梯形，模拟圆角</p>\n\t</div>\n\t<div class=\"bottom\"></div>\n</div>\n```\n\n```CSS\ndiv {\n\tbox-sizing: border-box;\n}\n.top {\n\theight: 0;\n\tborder-top: 3px solid transparent;\n\tborder-bottom: 3px solid #111;\n\tborder-left: 3px solid transparent;\n\tborder-right: 3px solid transparent;\n}\n.bottom {\n\theight: 0;\n\tborder-top: 3px solid #111;\n\tborder-bottom: 3px solid transparent;\n\tborder-left: 3px solid transparent;\n\tborder-right: 3px solid transparent;\n}\n.content {\n\tcolor: #fff;\n\tbackground-color: #111;\n}\n.wrapper {\n\twidth: 200px;\n\tmargin: 0 auto;\n}\n```\n\n[点击查看在线demo](http://codepen.io/theqwang/pen/BjpwmY)\n\n这种方法与方法二相比，更加简洁易懂，减少了无意义的div标签，在模拟较小的实色圆角时，不失为最佳的方法。\n","slug":"不使用-border-radius-实现圆角","published":1,"date":"2017-03-16T09:19:47.964Z","updated":"2017-03-11T22:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0d70lz10005ckmldspbvu9m","content":"<p>CSS3中，利用属性 border-radius 可以很方便的设置出圆角矩形，但是在IE8及以下版本却不支持这个属性，为了在旧版本的浏览器中实现宽高自适应的圆角矩形，可以采用以下三种方法。<br><a id=\"more\"></a></p>\n<h2 id=\"一、使用背景图片制作圆角\"><a href=\"#一、使用背景图片制作圆角\" class=\"headerlink\" title=\"一、使用背景图片制作圆角\"></a>一、使用背景图片制作圆角</h2><p>使用背景图片制作宽、高自适应的圆角矩形，首先需要切出4个圆角图片，然后把4个圆角图片放在矩形的四个角上就大功告成了，这一共需要5个div标签，1个容器div和4个圆角背景div。是不是很好理解。</p>\n<p>具体实现来说，需要注意一些细节。对于矩形容器div：</p>\n<ul>\n<li>上下内边距的大小至少设置为圆角的高度。</li>\n<li>position设置为相对定位。</li>\n<li>放置内容。</li>\n</ul>\n<p>对于4个圆角背景div：</p>\n<ul>\n<li>分别设置各个圆角背景图片。</li>\n<li>绝对定位于容器矩形的四个角。</li>\n<li>需要设置宽高值才能显示背景图片。</li>\n</ul>\n<p>假设圆角图片的宽高是5px，具体代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btm-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btm-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.content</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.top-left</span>,</div><div class=\"line\"><span class=\"selector-class\">.top-right</span>,</div><div class=\"line\"><span class=\"selector-class\">.btm-left</span>,</div><div class=\"line\"><span class=\"selector-class\">.btm-right</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.top-left</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(imgs/top-left.png) no-repeat top left;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.top-right</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(imgs/top-right.png) no-repeat top left;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.btm-left</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(imgs/btm-left.png) no-repeat top left;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.btm-right</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(imgs/btm-right.png) no-repeat top left;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/VePrZM\" target=\"_blank\" rel=\"external\">点击查看在线demo</a></p>\n<h2 id=\"二、纯-CSS-div-制作圆角矩形\"><a href=\"#二、纯-CSS-div-制作圆角矩形\" class=\"headerlink\" title=\"二、纯 CSS+div 制作圆角矩形\"></a>二、纯 CSS+div 制作圆角矩形</h2><p>这种方法的原理是利用像素点绘制弧线来模拟圆角。简单起见，这里我用圆角半径为3px的例子讲解，其中圆角矩形的背景色为粉色，矩形的边框为黑色。左上角圆角放大后如下图所示：<br><img src=\"http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-03%2023.06.10.png\" alt=\"圆角放大图\"><br>这里矩形上下各需要3个高度为1px、垂直罗在一起的div才能模拟出圆角。具体实现如下：</p>\n<ul>\n<li>第一个div就是上面图中矩形的黑色上边框，因为模拟的圆角半径为3px，所以该div的左右外边距设为3px，背景色设为黑色。</li>\n<li>第二个div的左右外边距设为2px，左右边框为1px的黑线，背景色为粉色。</li>\n<li>第三个div的左右外边距设为1px，左右边框为1px的黑线，背景色为粉色。</li>\n<li>圆角矩形下面的两个圆角是以上三个div反序排列。</li>\n<li>矩形内容区域的div只需要设置左右边框和背景色即可。</li>\n</ul>\n<p>具体代码如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>aaaaa<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.r1</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.r2</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#f4b4b4</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.r3</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#f4b4b4</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.content</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#f4b4b4</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/QydqrZ\" target=\"_blank\" rel=\"external\">点击查看在线demo</a></p>\n<p>此方法优缺点分析：</p>\n<ul>\n<li>不使用背景图片，减少了HTTP请求数。</li>\n<li>后期维护性好，但是圆角矩形像素增加，无意义的div代码将成倍增加。</li>\n<li>实现的圆角矩形有局限性。</li>\n<li>只能实现纯色圆角。</li>\n</ul>\n<h2 id=\"三、使用CSS-border-画出梯形模拟圆角\"><a href=\"#三、使用CSS-border-画出梯形模拟圆角\" class=\"headerlink\" title=\"三、使用CSS border 画出梯形模拟圆角\"></a>三、使用CSS border 画出梯形模拟圆角</h2><p>通过设置border属性，可以得到梯形和三角形，效果如下图所示：<br><img src=\"http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.27.16.png\" alt=\"border 画梯形和三角形\"></p>\n<ul>\n<li>当给div的四个边框设置比较大的宽度值时，就能得到四个梯形，如上图中的第一个图案；</li>\n<li>在此基础上，当把div的高度值设为0后，就能得到梯形和等腰三角形了，如上图中的第二个图案；</li>\n<li>当把div的宽、高都设为0，且只设置上、左的两个边框时，就能得到两个直角三角形，图中的第三个图案就是这种情况；</li>\n<li>在此基础上，把其中的一个边框的颜色设置为透明，就能像第四个图案一样得到一个直角三角形。</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">20px</span> solid red;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">20px</span> solid green;</div><div class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">20px</span> solid blue;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">20px</span> solid yellow;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">20px</span> solid red;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">20px</span> solid green;</div><div class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">20px</span> solid blue;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">20px</span> solid yellow;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.box3</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;</div><div class=\"line\">\t<span class=\"comment\">/* border-right: 20px solid green; */</span></div><div class=\"line\">\t<span class=\"comment\">/* border-bottom: 20px solid blue; */</span></div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid yellow;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.box4</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;</div><div class=\"line\">\t<span class=\"comment\">/* border-right: 20px solid green; */</span></div><div class=\"line\">\t<span class=\"comment\">/* border-bottom: 20px solid blue; */</span></div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/eJgMxv\" target=\"_blank\" rel=\"external\">点击查看在线demo</a></p>\n<p>已经知道了如何通过 border 画出梯形了，那又该如何利用梯形模拟圆角矩形呢？很简单，只要在矩形的上面和下面各放上一个梯形，就能得到圆角矩形了。原理嘛就是利用梯形的左右两个斜边模拟圆角啦，直接上效果图：<br><img src=\"http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.51.06.png\" alt=\"效果图\"></p>\n<p>具体代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>利用border画出梯形，模拟圆角<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.top</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.bottom</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.content</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/BjpwmY\" target=\"_blank\" rel=\"external\">点击查看在线demo</a></p>\n<p>这种方法与方法二相比，更加简洁易懂，减少了无意义的div标签，在模拟较小的实色圆角时，不失为最佳的方法。</p>\n","excerpt":"<p>CSS3中，利用属性 border-radius 可以很方便的设置出圆角矩形，但是在IE8及以下版本却不支持这个属性，为了在旧版本的浏览器中实现宽高自适应的圆角矩形，可以采用以下三种方法。<br>","more":"</p>\n<h2 id=\"一、使用背景图片制作圆角\"><a href=\"#一、使用背景图片制作圆角\" class=\"headerlink\" title=\"一、使用背景图片制作圆角\"></a>一、使用背景图片制作圆角</h2><p>使用背景图片制作宽、高自适应的圆角矩形，首先需要切出4个圆角图片，然后把4个圆角图片放在矩形的四个角上就大功告成了，这一共需要5个div标签，1个容器div和4个圆角背景div。是不是很好理解。</p>\n<p>具体实现来说，需要注意一些细节。对于矩形容器div：</p>\n<ul>\n<li>上下内边距的大小至少设置为圆角的高度。</li>\n<li>position设置为相对定位。</li>\n<li>放置内容。</li>\n</ul>\n<p>对于4个圆角背景div：</p>\n<ul>\n<li>分别设置各个圆角背景图片。</li>\n<li>绝对定位于容器矩形的四个角。</li>\n<li>需要设置宽高值才能显示背景图片。</li>\n</ul>\n<p>假设圆角图片的宽高是5px，具体代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btm-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btm-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.content</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.top-left</span>,</div><div class=\"line\"><span class=\"selector-class\">.top-right</span>,</div><div class=\"line\"><span class=\"selector-class\">.btm-left</span>,</div><div class=\"line\"><span class=\"selector-class\">.btm-right</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.top-left</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(imgs/top-left.png) no-repeat top left;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.top-right</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(imgs/top-right.png) no-repeat top left;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.btm-left</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(imgs/btm-left.png) no-repeat top left;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.btm-right</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(imgs/btm-right.png) no-repeat top left;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/VePrZM\">点击查看在线demo</a></p>\n<h2 id=\"二、纯-CSS-div-制作圆角矩形\"><a href=\"#二、纯-CSS-div-制作圆角矩形\" class=\"headerlink\" title=\"二、纯 CSS+div 制作圆角矩形\"></a>二、纯 CSS+div 制作圆角矩形</h2><p>这种方法的原理是利用像素点绘制弧线来模拟圆角。简单起见，这里我用圆角半径为3px的例子讲解，其中圆角矩形的背景色为粉色，矩形的边框为黑色。左上角圆角放大后如下图所示：<br><img src=\"http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-03%2023.06.10.png\" alt=\"圆角放大图\"><br>这里矩形上下各需要3个高度为1px、垂直罗在一起的div才能模拟出圆角。具体实现如下：</p>\n<ul>\n<li>第一个div就是上面图中矩形的黑色上边框，因为模拟的圆角半径为3px，所以该div的左右外边距设为3px，背景色设为黑色。</li>\n<li>第二个div的左右外边距设为2px，左右边框为1px的黑线，背景色为粉色。</li>\n<li>第三个div的左右外边距设为1px，左右边框为1px的黑线，背景色为粉色。</li>\n<li>圆角矩形下面的两个圆角是以上三个div反序排列。</li>\n<li>矩形内容区域的div只需要设置左右边框和背景色即可。</li>\n</ul>\n<p>具体代码如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>aaaaa<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"r1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.r1</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.r2</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#f4b4b4</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.r3</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">1px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#f4b4b4</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.content</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#f4b4b4</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/QydqrZ\">点击查看在线demo</a></p>\n<p>此方法优缺点分析：</p>\n<ul>\n<li>不使用背景图片，减少了HTTP请求数。</li>\n<li>后期维护性好，但是圆角矩形像素增加，无意义的div代码将成倍增加。</li>\n<li>实现的圆角矩形有局限性。</li>\n<li>只能实现纯色圆角。</li>\n</ul>\n<h2 id=\"三、使用CSS-border-画出梯形模拟圆角\"><a href=\"#三、使用CSS-border-画出梯形模拟圆角\" class=\"headerlink\" title=\"三、使用CSS border 画出梯形模拟圆角\"></a>三、使用CSS border 画出梯形模拟圆角</h2><p>通过设置border属性，可以得到梯形和三角形，效果如下图所示：<br><img src=\"http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.27.16.png\" alt=\"border 画梯形和三角形\"></p>\n<ul>\n<li>当给div的四个边框设置比较大的宽度值时，就能得到四个梯形，如上图中的第一个图案；</li>\n<li>在此基础上，当把div的高度值设为0后，就能得到梯形和等腰三角形了，如上图中的第二个图案；</li>\n<li>当把div的宽、高都设为0，且只设置上、左的两个边框时，就能得到两个直角三角形，图中的第三个图案就是这种情况；</li>\n<li>在此基础上，把其中的一个边框的颜色设置为透明，就能像第四个图案一样得到一个直角三角形。</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">20px</span> solid red;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">20px</span> solid green;</div><div class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">20px</span> solid blue;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">20px</span> solid yellow;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">20px</span> solid red;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">20px</span> solid green;</div><div class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">20px</span> solid blue;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">20px</span> solid yellow;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.box3</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;</div><div class=\"line\">\t<span class=\"comment\">/* border-right: 20px solid green; */</span></div><div class=\"line\">\t<span class=\"comment\">/* border-bottom: 20px solid blue; */</span></div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid yellow;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.box4</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;</div><div class=\"line\">\t<span class=\"comment\">/* border-right: 20px solid green; */</span></div><div class=\"line\">\t<span class=\"comment\">/* border-bottom: 20px solid blue; */</span></div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/eJgMxv\">点击查看在线demo</a></p>\n<p>已经知道了如何通过 border 画出梯形了，那又该如何利用梯形模拟圆角矩形呢？很简单，只要在矩形的上面和下面各放上一个梯形，就能得到圆角矩形了。原理嘛就是利用梯形的左右两个斜边模拟圆角啦，直接上效果图：<br><img src=\"http://7xidwy.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-04%2009.51.06.png\" alt=\"效果图\"></p>\n<p>具体代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>利用border画出梯形，模拟圆角<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.top</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.bottom</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-top</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#111</span>;</div><div class=\"line\">\t<span class=\"attribute\">border-bottom</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">\t<span class=\"attribute\">border-right</span>: <span class=\"number\">3px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.content</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#111</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.wrapper</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/BjpwmY\">点击查看在线demo</a></p>\n<p>这种方法与方法二相比，更加简洁易懂，减少了无意义的div标签，在模拟较小的实色圆角时，不失为最佳的方法。</p>"},{"title":"两列布局分析","date":"2016-01-07T01:28:05.000Z","_content":"\n两列布局大概是最经典的一种网页布局方式了，本博客就是采用的这种布局。两列布局中，以主列(main)是自适应宽度，子列(sidebar)是固定宽度的情形最为常见。\n今天就来好好探讨一下如何实现这种定宽+自适应的两列布局。\n\n<!--more-->\n\n## 1. absolute + margin 方式\n首先想到的是利用 absolute + margin 的方式实现。先看看代码：\n\n```HTML\n<div class=\"container\">\n    <div class=\"sidebar\">子列</div>\n    <div class=\"main\">主列</div>\n</div>\n```\n```CSS\n.container {\n\tposition: relative;\n}\n.sidebar {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 200px;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n```\n该方式利用 position 让 sidebar 列脱离文档流，然后通过 main 列的 margin-left 移除被 sidebar 列覆盖的部分。如此，我们就实现了定宽 + 自适应的两列布局。\n\n### 列顺序调整\n在不修改 HTML 的情况下，只需简单修改 CSS，我们可以让左右两列顺序互换，来看代码：\n```CSS\n.sidebar {\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n}\n.main {\n\tmargin-right: 210px;\n}\n```\n\n### 主内容列优先显示\n让我们考虑的更完美一点，可不可以把 main 列放 sidebar 列 的前面，使主要内容优先加载渲染？ Let us try！\n```HTML\n<div class=\"container\">\n    <div class=\"main\">主列</div>\n\t<div class=\"sidebar\">子列</div>\n</div>\n```\n做上面的简单调整即可，CSS不需要任何修改！\n\n### 问题所在\n虽然这种方式的优点很多，但是却存在一个致命缺点。因为 sidebar 列脱离了文档流，当 sidebar 列比 main 列高时会覆盖后面的布局：[问题demo](http://codepen.io/theqwang/pen/obWwEW)。\n如果在 container 容器上 添加 overflow:hidden 就会使 sidebar 溢出部分被裁减。在这种布局方式下，这个问题确实没有有效的解决办法。 \n\n## 3. float + margin 方式\n然后想到的就是 float + margin 来实现两列布局，首先实现左栏定宽，主内容自适应的两栏布局。代码如下：\n\n```HTML\n<div class=\"sidebar\">子列</div>\n<div class=\"main\">主列</div>\n```\n```CSS\n.sidebar {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n```\n这种实现方式比较简单，首先把子列浮动到左边，然后在主列上设置 margin-left 为子列留出显示空间即可。\n\n那么，这种方式支不支持调换列的位置呢？当然可以。CSS代码如下：\n\n```CSS\n.sidebar {\n\tfloat: right;\n\twidth: 200px;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.main {\n\theight: 300px;\n\tmargin-right: 210px;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n```\n### 问题所在\n看起来 float + margin 方式是个好办法，然而我们前面提到过的主列在前优先显示的优化却不能实现。\n\n## 3. float + 负margin 方式\n废话不多说，直接上代码：\n\n```HTML\n<div class=\"main-wrapper\">\n    <div class=\"main\">主列</div>\n</div>\n<div class=\"sidebar\">子列</div>\n```\n```CSS\n.main-wrapper {\n\tfloat: left;\n\twidth: 100%;\n}\n.main {\n\theight: 100px;\n\tmargin-left: 210px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.sidebar {\n\tfloat: left;\n\twidth: 200px;\n\theight: 100px;\n\tmargin-left: -100%;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n```\n大家应该都看出来了，这就是双飞翼布局，主列优先显示。实现的过程如下：\n1. 首先浮动 main 列和 sidebar 列，然后通过 负margin 正确定位 sidebar 列。\n2. 把 main 列嵌套在一个 div 里，该 div 的宽度值设为100%。\n3. 最后通过设置 main 列的 margin-left 消除被 sidebar 覆盖的部分即可。\n\n双飞翼布局要改变列的顺序也是可行的：[在线demo](http://codepen.io/theqwang/pen/MKmvvb)。\n当两列高度不一致时可以通过触发父容器的 BFC 特性解决方法一的问题。这样看来，双飞翼布局是一个更好的布局方式。\n\n\n","source":"_posts/两列布局分析.md","raw":"title: 两列布局分析\ndate: 2016-01-07 09:28:05\ncategories: CSS\ntags:\n---\n\n两列布局大概是最经典的一种网页布局方式了，本博客就是采用的这种布局。两列布局中，以主列(main)是自适应宽度，子列(sidebar)是固定宽度的情形最为常见。\n今天就来好好探讨一下如何实现这种定宽+自适应的两列布局。\n\n<!--more-->\n\n## 1. absolute + margin 方式\n首先想到的是利用 absolute + margin 的方式实现。先看看代码：\n\n```HTML\n<div class=\"container\">\n    <div class=\"sidebar\">子列</div>\n    <div class=\"main\">主列</div>\n</div>\n```\n```CSS\n.container {\n\tposition: relative;\n}\n.sidebar {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 200px;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n```\n该方式利用 position 让 sidebar 列脱离文档流，然后通过 main 列的 margin-left 移除被 sidebar 列覆盖的部分。如此，我们就实现了定宽 + 自适应的两列布局。\n\n### 列顺序调整\n在不修改 HTML 的情况下，只需简单修改 CSS，我们可以让左右两列顺序互换，来看代码：\n```CSS\n.sidebar {\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n}\n.main {\n\tmargin-right: 210px;\n}\n```\n\n### 主内容列优先显示\n让我们考虑的更完美一点，可不可以把 main 列放 sidebar 列 的前面，使主要内容优先加载渲染？ Let us try！\n```HTML\n<div class=\"container\">\n    <div class=\"main\">主列</div>\n\t<div class=\"sidebar\">子列</div>\n</div>\n```\n做上面的简单调整即可，CSS不需要任何修改！\n\n### 问题所在\n虽然这种方式的优点很多，但是却存在一个致命缺点。因为 sidebar 列脱离了文档流，当 sidebar 列比 main 列高时会覆盖后面的布局：[问题demo](http://codepen.io/theqwang/pen/obWwEW)。\n如果在 container 容器上 添加 overflow:hidden 就会使 sidebar 溢出部分被裁减。在这种布局方式下，这个问题确实没有有效的解决办法。 \n\n## 3. float + margin 方式\n然后想到的就是 float + margin 来实现两列布局，首先实现左栏定宽，主内容自适应的两栏布局。代码如下：\n\n```HTML\n<div class=\"sidebar\">子列</div>\n<div class=\"main\">主列</div>\n```\n```CSS\n.sidebar {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n```\n这种实现方式比较简单，首先把子列浮动到左边，然后在主列上设置 margin-left 为子列留出显示空间即可。\n\n那么，这种方式支不支持调换列的位置呢？当然可以。CSS代码如下：\n\n```CSS\n.sidebar {\n\tfloat: right;\n\twidth: 200px;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.main {\n\theight: 300px;\n\tmargin-right: 210px;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n```\n### 问题所在\n看起来 float + margin 方式是个好办法，然而我们前面提到过的主列在前优先显示的优化却不能实现。\n\n## 3. float + 负margin 方式\n废话不多说，直接上代码：\n\n```HTML\n<div class=\"main-wrapper\">\n    <div class=\"main\">主列</div>\n</div>\n<div class=\"sidebar\">子列</div>\n```\n```CSS\n.main-wrapper {\n\tfloat: left;\n\twidth: 100%;\n}\n.main {\n\theight: 100px;\n\tmargin-left: 210px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.sidebar {\n\tfloat: left;\n\twidth: 200px;\n\theight: 100px;\n\tmargin-left: -100%;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n```\n大家应该都看出来了，这就是双飞翼布局，主列优先显示。实现的过程如下：\n1. 首先浮动 main 列和 sidebar 列，然后通过 负margin 正确定位 sidebar 列。\n2. 把 main 列嵌套在一个 div 里，该 div 的宽度值设为100%。\n3. 最后通过设置 main 列的 margin-left 消除被 sidebar 覆盖的部分即可。\n\n双飞翼布局要改变列的顺序也是可行的：[在线demo](http://codepen.io/theqwang/pen/MKmvvb)。\n当两列高度不一致时可以通过触发父容器的 BFC 特性解决方法一的问题。这样看来，双飞翼布局是一个更好的布局方式。\n\n\n","slug":"两列布局分析","published":1,"updated":"2017-03-11T22:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0d70lz40006ckmlk9hmoh6h","content":"<p>两列布局大概是最经典的一种网页布局方式了，本博客就是采用的这种布局。两列布局中，以主列(main)是自适应宽度，子列(sidebar)是固定宽度的情形最为常见。<br>今天就来好好探讨一下如何实现这种定宽+自适应的两列布局。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-absolute-margin-方式\"><a href=\"#1-absolute-margin-方式\" class=\"headerlink\" title=\"1. absolute + margin 方式\"></a>1. absolute + margin 方式</h2><p>首先想到的是利用 absolute + margin 的方式实现。先看看代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该方式利用 position 让 sidebar 列脱离文档流，然后通过 main 列的 margin-left 移除被 sidebar 列覆盖的部分。如此，我们就实现了定宽 + 自适应的两列布局。</p>\n<h3 id=\"列顺序调整\"><a href=\"#列顺序调整\" class=\"headerlink\" title=\"列顺序调整\"></a>列顺序调整</h3><p>在不修改 HTML 的情况下，只需简单修改 CSS，我们可以让左右两列顺序互换，来看代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"主内容列优先显示\"><a href=\"#主内容列优先显示\" class=\"headerlink\" title=\"主内容列优先显示\"></a>主内容列优先显示</h3><p>让我们考虑的更完美一点，可不可以把 main 列放 sidebar 列 的前面，使主要内容优先加载渲染？ Let us try！<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>做上面的简单调整即可，CSS不需要任何修改！</p>\n<h3 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>虽然这种方式的优点很多，但是却存在一个致命缺点。因为 sidebar 列脱离了文档流，当 sidebar 列比 main 列高时会覆盖后面的布局：<a href=\"http://codepen.io/theqwang/pen/obWwEW\" target=\"_blank\" rel=\"external\">问题demo</a>。<br>如果在 container 容器上 添加 overflow:hidden 就会使 sidebar 溢出部分被裁减。在这种布局方式下，这个问题确实没有有效的解决办法。 </p>\n<h2 id=\"3-float-margin-方式\"><a href=\"#3-float-margin-方式\" class=\"headerlink\" title=\"3. float + margin 方式\"></a>3. float + margin 方式</h2><p>然后想到的就是 float + margin 来实现两列布局，首先实现左栏定宽，主内容自适应的两栏布局。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种实现方式比较简单，首先把子列浮动到左边，然后在主列上设置 margin-left 为子列留出显示空间即可。</p>\n<p>那么，这种方式支不支持调换列的位置呢？当然可以。CSS代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: right;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"问题所在-1\"><a href=\"#问题所在-1\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>看起来 float + margin 方式是个好办法，然而我们前面提到过的主列在前优先显示的优化却不能实现。</p>\n<h2 id=\"3-float-负margin-方式\"><a href=\"#3-float-负margin-方式\" class=\"headerlink\" title=\"3. float + 负margin 方式\"></a>3. float + 负margin 方式</h2><p>废话不多说，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-wrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main-wrapper</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大家应该都看出来了，这就是双飞翼布局，主列优先显示。实现的过程如下：</p>\n<ol>\n<li>首先浮动 main 列和 sidebar 列，然后通过 负margin 正确定位 sidebar 列。</li>\n<li>把 main 列嵌套在一个 div 里，该 div 的宽度值设为100%。</li>\n<li>最后通过设置 main 列的 margin-left 消除被 sidebar 覆盖的部分即可。</li>\n</ol>\n<p>双飞翼布局要改变列的顺序也是可行的：<a href=\"http://codepen.io/theqwang/pen/MKmvvb\" target=\"_blank\" rel=\"external\">在线demo</a>。<br>当两列高度不一致时可以通过触发父容器的 BFC 特性解决方法一的问题。这样看来，双飞翼布局是一个更好的布局方式。</p>\n","excerpt":"<p>两列布局大概是最经典的一种网页布局方式了，本博客就是采用的这种布局。两列布局中，以主列(main)是自适应宽度，子列(sidebar)是固定宽度的情形最为常见。<br>今天就来好好探讨一下如何实现这种定宽+自适应的两列布局。</p>","more":"<h2 id=\"1-absolute-margin-方式\"><a href=\"#1-absolute-margin-方式\" class=\"headerlink\" title=\"1. absolute + margin 方式\"></a>1. absolute + margin 方式</h2><p>首先想到的是利用 absolute + margin 的方式实现。先看看代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该方式利用 position 让 sidebar 列脱离文档流，然后通过 main 列的 margin-left 移除被 sidebar 列覆盖的部分。如此，我们就实现了定宽 + 自适应的两列布局。</p>\n<h3 id=\"列顺序调整\"><a href=\"#列顺序调整\" class=\"headerlink\" title=\"列顺序调整\"></a>列顺序调整</h3><p>在不修改 HTML 的情况下，只需简单修改 CSS，我们可以让左右两列顺序互换，来看代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"主内容列优先显示\"><a href=\"#主内容列优先显示\" class=\"headerlink\" title=\"主内容列优先显示\"></a>主内容列优先显示</h3><p>让我们考虑的更完美一点，可不可以把 main 列放 sidebar 列 的前面，使主要内容优先加载渲染？ Let us try！<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>做上面的简单调整即可，CSS不需要任何修改！</p>\n<h3 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>虽然这种方式的优点很多，但是却存在一个致命缺点。因为 sidebar 列脱离了文档流，当 sidebar 列比 main 列高时会覆盖后面的布局：<a href=\"http://codepen.io/theqwang/pen/obWwEW\">问题demo</a>。<br>如果在 container 容器上 添加 overflow:hidden 就会使 sidebar 溢出部分被裁减。在这种布局方式下，这个问题确实没有有效的解决办法。 </p>\n<h2 id=\"3-float-margin-方式\"><a href=\"#3-float-margin-方式\" class=\"headerlink\" title=\"3. float + margin 方式\"></a>3. float + margin 方式</h2><p>然后想到的就是 float + margin 来实现两列布局，首先实现左栏定宽，主内容自适应的两栏布局。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种实现方式比较简单，首先把子列浮动到左边，然后在主列上设置 margin-left 为子列留出显示空间即可。</p>\n<p>那么，这种方式支不支持调换列的位置呢？当然可以。CSS代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: right;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"问题所在-1\"><a href=\"#问题所在-1\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>看起来 float + margin 方式是个好办法，然而我们前面提到过的主列在前优先显示的优化却不能实现。</p>\n<h2 id=\"3-float-负margin-方式\"><a href=\"#3-float-负margin-方式\" class=\"headerlink\" title=\"3. float + 负margin 方式\"></a>3. float + 负margin 方式</h2><p>废话不多说，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-wrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main-wrapper</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大家应该都看出来了，这就是双飞翼布局，主列优先显示。实现的过程如下：</p>\n<ol>\n<li>首先浮动 main 列和 sidebar 列，然后通过 负margin 正确定位 sidebar 列。</li>\n<li>把 main 列嵌套在一个 div 里，该 div 的宽度值设为100%。</li>\n<li>最后通过设置 main 列的 margin-left 消除被 sidebar 覆盖的部分即可。</li>\n</ol>\n<p>双飞翼布局要改变列的顺序也是可行的：<a href=\"http://codepen.io/theqwang/pen/MKmvvb\">在线demo</a>。<br>当两列高度不一致时可以通过触发父容器的 BFC 特性解决方法一的问题。这样看来，双飞翼布局是一个更好的布局方式。</p>"},{"title":"浅析圣杯布局和双飞翼布局","date":"2016-01-08T02:15:55.000Z","_content":"三列布局是一种很常见的页面布局方式，三列一般分别是子列sub、主列main和附加列extra，其中子列一般是居左的导航，且宽度固定；主列是居中的主要内容，宽度自适应；附加列一般是广告等额外信息，居右且宽度固定。\n圣杯布局和双飞翼布局都可以实现这种三列布局，他们有什么特别之处呢？\n\n<!--more-->\n\n在分析圣杯布局和双飞翼布局之前，抛砖引玉，先看看我之前是如何实现左右定宽、中间自适应的三列布局的：子列和附加列分别浮动到左边和右边，主列设置左右外边距即可，需要注意的是子列和附加列要写在主列的前面，顺序不能变。\n\n```HTML\n<div class=\"sub\">子列</div>\n<div class=\"extra\">附加列</div>\n<div class=\"main\">主列</div>\n```\n```CSS\n.sub {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.extra {\n\tfloat: right;\n\twidth: 180px;\n\theight: 300px;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tmargin-right: 190px;\n\tbackground-color: rgba(0, 0, 255, .5);\n}\n```\n\n## 圣杯布局\n圣杯布局源自 Matthew Levine 在06年的一篇[文章](http://alistapart.com/article/holygrail)，其DOM结构如下：\n\n```HTML\n<div class=\"container\">\n    <div class=\"main\"></div>\n\t<div class=\"sub\"></div>\n\t<div class=\"extra\"></div>\n</div>\n```\n\n接下来，让我们一步一步地实现圣杯布局；\n\n1、 首先分别浮动main、sub、extra三列， 然后利用负外边距把sub列和extra列定位到左右两边。这时的CSS代码如下：\n```CSS\n.main {\n\tfloat: left;\n\twidth: 100%;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.sub {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n.extra {\n\tfloat: left;\n\twidth: 180px;\n\theight: 300px;\n\tmargin-left: -180px;\n\tbackground-color: rgba(0, 0, 255, .5);\n}\n```\n2、 完成上步后，sub和extra列已经到了正确的位置，但是sub和extra列却覆盖了main的两边，对于这个问题，圣杯布局的解决办法是给容器container添加左、右内边距，从而让main列定位到正确的位置。\n\n```CSS\n.container {\n\tpadding-left: 210px;\n\tpadding-right: 190px;\n}\n```\n3、 完成第二步后又出现了新问题：sub、extra列也受到容器左右内边距的影响位置发生了移动。为了解决这个问题，圣杯布局使用相对定位使sub、extra列回到正确的位置。新添加代码如下：\n\n```CSS\n.sub {\n\tposition: relative;\n\tleft: -210px;\n}\n.extra {\n\tposition: relative;\n\tright: -190px;\n}\n```\n4、 当浏览器缩小到一定程度时，这个布局可能会被破坏，可以在body上添加min-width属性解决。最终的圣杯布局CSS代码如下：\n\n```CSS\nbody {\n\tmin-width: 600px; /* 2*sub + extra */\n}\n.container {\n\tpadding-left: 210px;\n\tpadding-right: 190px;\n}\n.main {\n\tfloat: left;\n\twidth: 100%;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.sub {\n\tposition: relative;\n\tleft: -210px;\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n.extra {\n\tposition: relative;\n\tright: -190px;\n\tfloat: left;\n\twidth: 180px;\n\theight: 300px;\n\tmargin-left: -180px;\n\tbackground-color: rgba(0, 0, 255, .5);\n}\n```\n[点击查看在线demo](http://codepen.io/theqwang/pen/WrjGQe)\n\n圣杯布局的优点总结如下：\n1. 使主要内容列先加载。\n2. 允许任何列是最高的。\n3. 没有额外的div。\n4. 需要的hack很少。\n\n## 双飞翼布局\n了解了圣杯布局，趁热打铁，再分析一下双飞翼布局是怎么回事。双飞翼布局源自淘宝UED，现在查看下淘宝店铺的DOM结构，就能找到双飞翼布局的身影。接下来，让我们也一步一步实现双飞翼布局。\n\n1. 首先，和圣杯布局一样，分别浮动main、sub和extra列，然后利用负外边距正确定位sub和extra列。\n2. 这时依旧面临和圣杯布局同样的问题：main列没有正确定位且被sub、extra列覆盖。双飞翼布局的解决办法是在main列外面包裹了一个宽度100%的div，然后通过设置main列的左、右外边距正确定位main列。最终的DOM结构如下：\n```HTML\n<div class=\"main-wrapper\">\n    <div class=\"main\"></div>\n</div>\n<div class=\"sub\"></div>\n<div class=\"extra\"></div>\n```\n\nCSS设置如下：\n\n```CSS\n.main-wrapper {\n\tfloat: left;\n\twidth: 100%;\n}\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tmargin-right: 190px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.sub {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n.extra {\n\tfloat: left;\n\twidth: 180px;\n\theight: 300px;\n\tmargin-left: -180px;\n\tbackground-color: rgba(0, 0, 255, .5);\n}\n```\n[点击查看在线demo](http://codepen.io/theqwang/pen/mVmrzZ)\n\n双飞翼布局非常灵活，通过调整css代码可以实现各种布局。例如，利用双飞翼布局实现了一套[栅格布局系统](http://www.dqqd.me/avatar/fly/grids_test1.html)。\n\n双飞翼布局的优点：\n1. DOM按照主、子、附加列的顺序加载，实现了重要内容先加载。\n2. main部分是自适应宽度的，很容易在定宽布局和流体布局中切换。\n3. 在浏览器上的兼容性非常好，IE5.5以上都支持。\n4. 实现了内容与布局的分离，即Eric提到的Any-Order Columns.\n5. 任何一栏都可以是最高栏，不会出问题。\n6. 需要的hack非常少。\n\n## 圣杯布局与双飞翼布局的比较\n总结一下两种布局方式在实现上的异同点：\n\n1. 俩种布局方式都是把主列放在文档流最前面，使主列优先加载。\n2. 两种布局方式在实现上也有相同之处，都是让三列浮动，然后通过负外边距形成三列布局。\n3. 两种布局方式的不同之处在于如何处理中间主列的位置：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主列嵌套在div后利用主列的左、右外边距定位。\n\n两者相比较，双飞翼布局虽然多了一个div，却减少了相对定位属性的代码，个人认为双飞翼布局在实现思路和代码简洁度上都要比圣杯布局更好一些。\n\n","source":"_posts/浅析圣杯布局和双飞翼布局.md","raw":"title: 浅析圣杯布局和双飞翼布局\ndate: 2016-01-08 10:15:55\ncategories: CSS\ntags:\n---\n三列布局是一种很常见的页面布局方式，三列一般分别是子列sub、主列main和附加列extra，其中子列一般是居左的导航，且宽度固定；主列是居中的主要内容，宽度自适应；附加列一般是广告等额外信息，居右且宽度固定。\n圣杯布局和双飞翼布局都可以实现这种三列布局，他们有什么特别之处呢？\n\n<!--more-->\n\n在分析圣杯布局和双飞翼布局之前，抛砖引玉，先看看我之前是如何实现左右定宽、中间自适应的三列布局的：子列和附加列分别浮动到左边和右边，主列设置左右外边距即可，需要注意的是子列和附加列要写在主列的前面，顺序不能变。\n\n```HTML\n<div class=\"sub\">子列</div>\n<div class=\"extra\">附加列</div>\n<div class=\"main\">主列</div>\n```\n```CSS\n.sub {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.extra {\n\tfloat: right;\n\twidth: 180px;\n\theight: 300px;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tmargin-right: 190px;\n\tbackground-color: rgba(0, 0, 255, .5);\n}\n```\n\n## 圣杯布局\n圣杯布局源自 Matthew Levine 在06年的一篇[文章](http://alistapart.com/article/holygrail)，其DOM结构如下：\n\n```HTML\n<div class=\"container\">\n    <div class=\"main\"></div>\n\t<div class=\"sub\"></div>\n\t<div class=\"extra\"></div>\n</div>\n```\n\n接下来，让我们一步一步地实现圣杯布局；\n\n1、 首先分别浮动main、sub、extra三列， 然后利用负外边距把sub列和extra列定位到左右两边。这时的CSS代码如下：\n```CSS\n.main {\n\tfloat: left;\n\twidth: 100%;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.sub {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n.extra {\n\tfloat: left;\n\twidth: 180px;\n\theight: 300px;\n\tmargin-left: -180px;\n\tbackground-color: rgba(0, 0, 255, .5);\n}\n```\n2、 完成上步后，sub和extra列已经到了正确的位置，但是sub和extra列却覆盖了main的两边，对于这个问题，圣杯布局的解决办法是给容器container添加左、右内边距，从而让main列定位到正确的位置。\n\n```CSS\n.container {\n\tpadding-left: 210px;\n\tpadding-right: 190px;\n}\n```\n3、 完成第二步后又出现了新问题：sub、extra列也受到容器左右内边距的影响位置发生了移动。为了解决这个问题，圣杯布局使用相对定位使sub、extra列回到正确的位置。新添加代码如下：\n\n```CSS\n.sub {\n\tposition: relative;\n\tleft: -210px;\n}\n.extra {\n\tposition: relative;\n\tright: -190px;\n}\n```\n4、 当浏览器缩小到一定程度时，这个布局可能会被破坏，可以在body上添加min-width属性解决。最终的圣杯布局CSS代码如下：\n\n```CSS\nbody {\n\tmin-width: 600px; /* 2*sub + extra */\n}\n.container {\n\tpadding-left: 210px;\n\tpadding-right: 190px;\n}\n.main {\n\tfloat: left;\n\twidth: 100%;\n\theight: 300px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.sub {\n\tposition: relative;\n\tleft: -210px;\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n.extra {\n\tposition: relative;\n\tright: -190px;\n\tfloat: left;\n\twidth: 180px;\n\theight: 300px;\n\tmargin-left: -180px;\n\tbackground-color: rgba(0, 0, 255, .5);\n}\n```\n[点击查看在线demo](http://codepen.io/theqwang/pen/WrjGQe)\n\n圣杯布局的优点总结如下：\n1. 使主要内容列先加载。\n2. 允许任何列是最高的。\n3. 没有额外的div。\n4. 需要的hack很少。\n\n## 双飞翼布局\n了解了圣杯布局，趁热打铁，再分析一下双飞翼布局是怎么回事。双飞翼布局源自淘宝UED，现在查看下淘宝店铺的DOM结构，就能找到双飞翼布局的身影。接下来，让我们也一步一步实现双飞翼布局。\n\n1. 首先，和圣杯布局一样，分别浮动main、sub和extra列，然后利用负外边距正确定位sub和extra列。\n2. 这时依旧面临和圣杯布局同样的问题：main列没有正确定位且被sub、extra列覆盖。双飞翼布局的解决办法是在main列外面包裹了一个宽度100%的div，然后通过设置main列的左、右外边距正确定位main列。最终的DOM结构如下：\n```HTML\n<div class=\"main-wrapper\">\n    <div class=\"main\"></div>\n</div>\n<div class=\"sub\"></div>\n<div class=\"extra\"></div>\n```\n\nCSS设置如下：\n\n```CSS\n.main-wrapper {\n\tfloat: left;\n\twidth: 100%;\n}\n.main {\n\theight: 300px;\n\tmargin-left: 210px;\n\tmargin-right: 190px;\n\tbackground-color: rgba(255, 0, 0, .5);\n}\n.sub {\n\tfloat: left;\n\twidth: 200px;\n\theight: 300px;\n\tmargin-left: -100%;\n\tbackground-color: rgba(0, 255, 0, .5);\n}\n.extra {\n\tfloat: left;\n\twidth: 180px;\n\theight: 300px;\n\tmargin-left: -180px;\n\tbackground-color: rgba(0, 0, 255, .5);\n}\n```\n[点击查看在线demo](http://codepen.io/theqwang/pen/mVmrzZ)\n\n双飞翼布局非常灵活，通过调整css代码可以实现各种布局。例如，利用双飞翼布局实现了一套[栅格布局系统](http://www.dqqd.me/avatar/fly/grids_test1.html)。\n\n双飞翼布局的优点：\n1. DOM按照主、子、附加列的顺序加载，实现了重要内容先加载。\n2. main部分是自适应宽度的，很容易在定宽布局和流体布局中切换。\n3. 在浏览器上的兼容性非常好，IE5.5以上都支持。\n4. 实现了内容与布局的分离，即Eric提到的Any-Order Columns.\n5. 任何一栏都可以是最高栏，不会出问题。\n6. 需要的hack非常少。\n\n## 圣杯布局与双飞翼布局的比较\n总结一下两种布局方式在实现上的异同点：\n\n1. 俩种布局方式都是把主列放在文档流最前面，使主列优先加载。\n2. 两种布局方式在实现上也有相同之处，都是让三列浮动，然后通过负外边距形成三列布局。\n3. 两种布局方式的不同之处在于如何处理中间主列的位置：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主列嵌套在div后利用主列的左、右外边距定位。\n\n两者相比较，双飞翼布局虽然多了一个div，却减少了相对定位属性的代码，个人认为双飞翼布局在实现思路和代码简洁度上都要比圣杯布局更好一些。\n\n","slug":"浅析圣杯布局和双飞翼布局","published":1,"updated":"2017-03-11T22:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0d70lz60008ckmlygys8ckr","content":"<p>三列布局是一种很常见的页面布局方式，三列一般分别是子列sub、主列main和附加列extra，其中子列一般是居左的导航，且宽度固定；主列是居中的主要内容，宽度自适应；附加列一般是广告等额外信息，居右且宽度固定。<br>圣杯布局和双飞翼布局都可以实现这种三列布局，他们有什么特别之处呢？</p>\n<a id=\"more\"></a>\n<p>在分析圣杯布局和双飞翼布局之前，抛砖引玉，先看看我之前是如何实现左右定宽、中间自适应的三列布局的：子列和附加列分别浮动到左边和右边，主列设置左右外边距即可，需要注意的是子列和附加列要写在主列的前面，顺序不能变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span>附加列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: right;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 255, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><p>圣杯布局源自 Matthew Levine 在06年的一篇<a href=\"http://alistapart.com/article/holygrail\" target=\"_blank\" rel=\"external\">文章</a>，其DOM结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>接下来，让我们一步一步地实现圣杯布局；</p>\n<p>1、 首先分别浮动main、sub、extra三列， 然后利用负外边距把sub列和extra列定位到左右两边。这时的CSS代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 255, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2、 完成上步后，sub和extra列已经到了正确的位置，但是sub和extra列却覆盖了main的两边，对于这个问题，圣杯布局的解决办法是给容器container添加左、右内边距，从而让main列定位到正确的位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-right</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、 完成第二步后又出现了新问题：sub、extra列也受到容器左右内边距的影响位置发生了移动。为了解决这个问题，圣杯布局使用相对定位使sub、extra列回到正确的位置。新添加代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: -<span class=\"number\">210px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: -<span class=\"number\">190px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4、 当浏览器缩小到一定程度时，这个布局可能会被破坏，可以在body上添加min-width属性解决。最终的圣杯布局CSS代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">min-width</span>: <span class=\"number\">600px</span>; <span class=\"comment\">/* 2*sub + extra */</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-right</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: -<span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: -<span class=\"number\">190px</span>;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 255, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/WrjGQe\" target=\"_blank\" rel=\"external\">点击查看在线demo</a></p>\n<p>圣杯布局的优点总结如下：</p>\n<ol>\n<li>使主要内容列先加载。</li>\n<li>允许任何列是最高的。</li>\n<li>没有额外的div。</li>\n<li>需要的hack很少。</li>\n</ol>\n<h2 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h2><p>了解了圣杯布局，趁热打铁，再分析一下双飞翼布局是怎么回事。双飞翼布局源自淘宝UED，现在查看下淘宝店铺的DOM结构，就能找到双飞翼布局的身影。接下来，让我们也一步一步实现双飞翼布局。</p>\n<ol>\n<li>首先，和圣杯布局一样，分别浮动main、sub和extra列，然后利用负外边距正确定位sub和extra列。</li>\n<li>这时依旧面临和圣杯布局同样的问题：main列没有正确定位且被sub、extra列覆盖。双飞翼布局的解决办法是在main列外面包裹了一个宽度100%的div，然后通过设置main列的左、右外边距正确定位main列。最终的DOM结构如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-wrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>CSS设置如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main-wrapper</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 255, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/mVmrzZ\" target=\"_blank\" rel=\"external\">点击查看在线demo</a></p>\n<p>双飞翼布局非常灵活，通过调整css代码可以实现各种布局。例如，利用双飞翼布局实现了一套<a href=\"http://www.dqqd.me/avatar/fly/grids_test1.html\" target=\"_blank\" rel=\"external\">栅格布局系统</a>。</p>\n<p>双飞翼布局的优点：</p>\n<ol>\n<li>DOM按照主、子、附加列的顺序加载，实现了重要内容先加载。</li>\n<li>main部分是自适应宽度的，很容易在定宽布局和流体布局中切换。</li>\n<li>在浏览器上的兼容性非常好，IE5.5以上都支持。</li>\n<li>实现了内容与布局的分离，即Eric提到的Any-Order Columns.</li>\n<li>任何一栏都可以是最高栏，不会出问题。</li>\n<li>需要的hack非常少。</li>\n</ol>\n<h2 id=\"圣杯布局与双飞翼布局的比较\"><a href=\"#圣杯布局与双飞翼布局的比较\" class=\"headerlink\" title=\"圣杯布局与双飞翼布局的比较\"></a>圣杯布局与双飞翼布局的比较</h2><p>总结一下两种布局方式在实现上的异同点：</p>\n<ol>\n<li>俩种布局方式都是把主列放在文档流最前面，使主列优先加载。</li>\n<li>两种布局方式在实现上也有相同之处，都是让三列浮动，然后通过负外边距形成三列布局。</li>\n<li>两种布局方式的不同之处在于如何处理中间主列的位置：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主列嵌套在div后利用主列的左、右外边距定位。</li>\n</ol>\n<p>两者相比较，双飞翼布局虽然多了一个div，却减少了相对定位属性的代码，个人认为双飞翼布局在实现思路和代码简洁度上都要比圣杯布局更好一些。</p>\n","excerpt":"<p>三列布局是一种很常见的页面布局方式，三列一般分别是子列sub、主列main和附加列extra，其中子列一般是居左的导航，且宽度固定；主列是居中的主要内容，宽度自适应；附加列一般是广告等额外信息，居右且宽度固定。<br>圣杯布局和双飞翼布局都可以实现这种三列布局，他们有什么特别之处呢？</p>","more":"<p>在分析圣杯布局和双飞翼布局之前，抛砖引玉，先看看我之前是如何实现左右定宽、中间自适应的三列布局的：子列和附加列分别浮动到左边和右边，主列设置左右外边距即可，需要注意的是子列和附加列要写在主列的前面，顺序不能变。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span>子列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span>附加列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主列<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: right;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 255, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><p>圣杯布局源自 Matthew Levine 在06年的一篇<a href=\"http://alistapart.com/article/holygrail\">文章</a>，其DOM结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>接下来，让我们一步一步地实现圣杯布局；</p>\n<p>1、 首先分别浮动main、sub、extra三列， 然后利用负外边距把sub列和extra列定位到左右两边。这时的CSS代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 255, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2、 完成上步后，sub和extra列已经到了正确的位置，但是sub和extra列却覆盖了main的两边，对于这个问题，圣杯布局的解决办法是给容器container添加左、右内边距，从而让main列定位到正确的位置。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-right</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、 完成第二步后又出现了新问题：sub、extra列也受到容器左右内边距的影响位置发生了移动。为了解决这个问题，圣杯布局使用相对定位使sub、extra列回到正确的位置。新添加代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: -<span class=\"number\">210px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: -<span class=\"number\">190px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4、 当浏览器缩小到一定程度时，这个布局可能会被破坏，可以在body上添加min-width属性解决。最终的圣杯布局CSS代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">min-width</span>: <span class=\"number\">600px</span>; <span class=\"comment\">/* 2*sub + extra */</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">padding-right</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">left</span>: -<span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">right</span>: -<span class=\"number\">190px</span>;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 255, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/WrjGQe\">点击查看在线demo</a></p>\n<p>圣杯布局的优点总结如下：</p>\n<ol>\n<li>使主要内容列先加载。</li>\n<li>允许任何列是最高的。</li>\n<li>没有额外的div。</li>\n<li>需要的hack很少。</li>\n</ol>\n<h2 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h2><p>了解了圣杯布局，趁热打铁，再分析一下双飞翼布局是怎么回事。双飞翼布局源自淘宝UED，现在查看下淘宝店铺的DOM结构，就能找到双飞翼布局的身影。接下来，让我们也一步一步实现双飞翼布局。</p>\n<ol>\n<li>首先，和圣杯布局一样，分别浮动main、sub和extra列，然后利用负外边距正确定位sub和extra列。</li>\n<li>这时依旧面临和圣杯布局同样的问题：main列没有正确定位且被sub、extra列覆盖。双飞翼布局的解决办法是在main列外面包裹了一个宽度100%的div，然后通过设置main列的左、右外边距正确定位main列。最终的DOM结构如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-wrapper\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>CSS设置如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main-wrapper</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: <span class=\"number\">210px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-right</span>: <span class=\"number\">190px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 0, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 255, 0, .5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">float</span>: left;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">180px</span>;</div><div class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 255, .5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://codepen.io/theqwang/pen/mVmrzZ\">点击查看在线demo</a></p>\n<p>双飞翼布局非常灵活，通过调整css代码可以实现各种布局。例如，利用双飞翼布局实现了一套<a href=\"http://www.dqqd.me/avatar/fly/grids_test1.html\">栅格布局系统</a>。</p>\n<p>双飞翼布局的优点：</p>\n<ol>\n<li>DOM按照主、子、附加列的顺序加载，实现了重要内容先加载。</li>\n<li>main部分是自适应宽度的，很容易在定宽布局和流体布局中切换。</li>\n<li>在浏览器上的兼容性非常好，IE5.5以上都支持。</li>\n<li>实现了内容与布局的分离，即Eric提到的Any-Order Columns.</li>\n<li>任何一栏都可以是最高栏，不会出问题。</li>\n<li>需要的hack非常少。</li>\n</ol>\n<h2 id=\"圣杯布局与双飞翼布局的比较\"><a href=\"#圣杯布局与双飞翼布局的比较\" class=\"headerlink\" title=\"圣杯布局与双飞翼布局的比较\"></a>圣杯布局与双飞翼布局的比较</h2><p>总结一下两种布局方式在实现上的异同点：</p>\n<ol>\n<li>俩种布局方式都是把主列放在文档流最前面，使主列优先加载。</li>\n<li>两种布局方式在实现上也有相同之处，都是让三列浮动，然后通过负外边距形成三列布局。</li>\n<li>两种布局方式的不同之处在于如何处理中间主列的位置：圣杯布局是利用父容器的左、右内边距定位；双飞翼布局是把主列嵌套在div后利用主列的左、右外边距定位。</li>\n</ol>\n<p>两者相比较，双飞翼布局虽然多了一个div，却减少了相对定位属性的代码，个人认为双飞翼布局在实现思路和代码简洁度上都要比圣杯布局更好一些。</p>"},{"title":"在django中把文件上传至七牛","date":"2015-12-22T04:51:42.000Z","_content":"最近在写的一个django小项目需要实现用户上传图片的功能，使用到了七牛云存储，特此记录下来。这里我使用的七牛python SDK 版本是7.0.3，函数使用上可能会与旧版有些不同。\n\n原本文件上传需要先把文件上传到自己的业务服务器，再从业务服务器上传到云存储。现在七牛的表单上传可以直接把文件上传到七牛，不再需要业务服务器的中转，节省了流量成本，降低了业务服务器的压力。而且通过设置，还可以在文件上传完成后让客户端自动重定向到一个上传成功的结果页面。这里我就是使用了七牛的表单上传。\n\n<!--more-->\n\n## 表单上传\n用户上传图片的HTML表单代码如下。其中key用来指定图片保存在七牛中的文件名，token是上传凭证，即用来验证合法性和设置返回信息的。\n\n```html\nupload.html\n<form method=\"POST\" action=\"http://upload.qiniu.com/\" enctype=\"multipart/form-data\">\n<input name=\"key\" type=\"hidden\" value=\"\">\n<input name=\"token\" type=\"hidden\" value=\"\">\n<input name=\"file\" type=\"file\">\n<input  type=\"submit\">\n</form>\n```\n\n跳转到上面HTML页面的视图函数中的关键代码如下。其中upload_token函数用于生成表单里的token字段，upload_token函数中的7200代表上传凭证的有效期，returnUrl表示上传成功后的重定向地址，returnBody表示重定向时七牛返回的信息，它是一个base64编码后的json数据，需要解码获取json数据，当上传出错时错误信息直接在url中以明文的形式出现，并不会在返回的json数据里。通过设置mimeLimit还可以限制上传文件的类型。\n\n```Python\nviews.py\nimport qiniu\nimport uuid\nACCESS_KEY = '七牛分配的公钥'\nSECRET_KEY = '七牛分配的私钥'\nBUCKET_NAME = '保存文件的仓库名'\nkey = str(uuid.uuid1()).replace('-', '')  # 这里使用uuid作为保存在七牛里文件的名字。并去掉了uuid中的“-”\nq = qiniu.Auth(ACCESS_KEY, SECRET_KEY)\ntoken = q.upload_token(BUCKET_NAME, key, 7200, {'returnUrl':'http://127.0.0.1:8000/photos/uploadprocessor', 'returnBody': '{\"name\": $(fname), \"key\": $(key)}', 'mimeLimit':'image/jpeg;image/png'})\nreturn render_to_response('photos/upload.html', {'token': token, 'key': key}, context_instance=RequestContext(request))\n```\n","source":"_posts/在django中把文件上传至七牛.md","raw":"title: 在django中把文件上传至七牛\ndate: 2015-12-22 12:51:42\ncategories: Python\ntags: python\n---\n最近在写的一个django小项目需要实现用户上传图片的功能，使用到了七牛云存储，特此记录下来。这里我使用的七牛python SDK 版本是7.0.3，函数使用上可能会与旧版有些不同。\n\n原本文件上传需要先把文件上传到自己的业务服务器，再从业务服务器上传到云存储。现在七牛的表单上传可以直接把文件上传到七牛，不再需要业务服务器的中转，节省了流量成本，降低了业务服务器的压力。而且通过设置，还可以在文件上传完成后让客户端自动重定向到一个上传成功的结果页面。这里我就是使用了七牛的表单上传。\n\n<!--more-->\n\n## 表单上传\n用户上传图片的HTML表单代码如下。其中key用来指定图片保存在七牛中的文件名，token是上传凭证，即用来验证合法性和设置返回信息的。\n\n```html\nupload.html\n<form method=\"POST\" action=\"http://upload.qiniu.com/\" enctype=\"multipart/form-data\">\n<input name=\"key\" type=\"hidden\" value=\"\">\n<input name=\"token\" type=\"hidden\" value=\"\">\n<input name=\"file\" type=\"file\">\n<input  type=\"submit\">\n</form>\n```\n\n跳转到上面HTML页面的视图函数中的关键代码如下。其中upload_token函数用于生成表单里的token字段，upload_token函数中的7200代表上传凭证的有效期，returnUrl表示上传成功后的重定向地址，returnBody表示重定向时七牛返回的信息，它是一个base64编码后的json数据，需要解码获取json数据，当上传出错时错误信息直接在url中以明文的形式出现，并不会在返回的json数据里。通过设置mimeLimit还可以限制上传文件的类型。\n\n```Python\nviews.py\nimport qiniu\nimport uuid\nACCESS_KEY = '七牛分配的公钥'\nSECRET_KEY = '七牛分配的私钥'\nBUCKET_NAME = '保存文件的仓库名'\nkey = str(uuid.uuid1()).replace('-', '')  # 这里使用uuid作为保存在七牛里文件的名字。并去掉了uuid中的“-”\nq = qiniu.Auth(ACCESS_KEY, SECRET_KEY)\ntoken = q.upload_token(BUCKET_NAME, key, 7200, {'returnUrl':'http://127.0.0.1:8000/photos/uploadprocessor', 'returnBody': '{\"name\": $(fname), \"key\": $(key)}', 'mimeLimit':'image/jpeg;image/png'})\nreturn render_to_response('photos/upload.html', {'token': token, 'key': key}, context_instance=RequestContext(request))\n```\n","slug":"在django中把文件上传至七牛","published":1,"updated":"2017-03-11T22:03:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0d70lzj000ackml6wyd9uwl","content":"<p>最近在写的一个django小项目需要实现用户上传图片的功能，使用到了七牛云存储，特此记录下来。这里我使用的七牛python SDK 版本是7.0.3，函数使用上可能会与旧版有些不同。</p>\n<p>原本文件上传需要先把文件上传到自己的业务服务器，再从业务服务器上传到云存储。现在七牛的表单上传可以直接把文件上传到七牛，不再需要业务服务器的中转，节省了流量成本，降低了业务服务器的压力。而且通过设置，还可以在文件上传完成后让客户端自动重定向到一个上传成功的结果页面。这里我就是使用了七牛的表单上传。</p>\n<a id=\"more\"></a>\n<h2 id=\"表单上传\"><a href=\"#表单上传\" class=\"headerlink\" title=\"表单上传\"></a>表单上传</h2><p>用户上传图片的HTML表单代码如下。其中key用来指定图片保存在七牛中的文件名，token是上传凭证，即用来验证合法性和设置返回信息的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">upload.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://upload.qiniu.com/\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"key\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"token\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>跳转到上面HTML页面的视图函数中的关键代码如下。其中upload_token函数用于生成表单里的token字段，upload_token函数中的7200代表上传凭证的有效期，returnUrl表示上传成功后的重定向地址，returnBody表示重定向时七牛返回的信息，它是一个base64编码后的json数据，需要解码获取json数据，当上传出错时错误信息直接在url中以明文的形式出现，并不会在返回的json数据里。通过设置mimeLimit还可以限制上传文件的类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">views.py</div><div class=\"line\"><span class=\"keyword\">import</span> qiniu</div><div class=\"line\"><span class=\"keyword\">import</span> uuid</div><div class=\"line\">ACCESS_KEY = <span class=\"string\">'七牛分配的公钥'</span></div><div class=\"line\">SECRET_KEY = <span class=\"string\">'七牛分配的私钥'</span></div><div class=\"line\">BUCKET_NAME = <span class=\"string\">'保存文件的仓库名'</span></div><div class=\"line\">key = str(uuid.uuid1()).replace(<span class=\"string\">'-'</span>, <span class=\"string\">''</span>)  <span class=\"comment\"># 这里使用uuid作为保存在七牛里文件的名字。并去掉了uuid中的“-”</span></div><div class=\"line\">q = qiniu.Auth(ACCESS_KEY, SECRET_KEY)</div><div class=\"line\">token = q.upload_token(BUCKET_NAME, key, <span class=\"number\">7200</span>, &#123;<span class=\"string\">'returnUrl'</span>:<span class=\"string\">'http://127.0.0.1:8000/photos/uploadprocessor'</span>, <span class=\"string\">'returnBody'</span>: <span class=\"string\">'&#123;\"name\": $(fname), \"key\": $(key)&#125;'</span>, <span class=\"string\">'mimeLimit'</span>:<span class=\"string\">'image/jpeg;image/png'</span>&#125;)</div><div class=\"line\"><span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'photos/upload.html'</span>, &#123;<span class=\"string\">'token'</span>: token, <span class=\"string\">'key'</span>: key&#125;, context_instance=RequestContext(request))</div></pre></td></tr></table></figure>\n","excerpt":"<p>最近在写的一个django小项目需要实现用户上传图片的功能，使用到了七牛云存储，特此记录下来。这里我使用的七牛python SDK 版本是7.0.3，函数使用上可能会与旧版有些不同。</p>\n<p>原本文件上传需要先把文件上传到自己的业务服务器，再从业务服务器上传到云存储。现在七牛的表单上传可以直接把文件上传到七牛，不再需要业务服务器的中转，节省了流量成本，降低了业务服务器的压力。而且通过设置，还可以在文件上传完成后让客户端自动重定向到一个上传成功的结果页面。这里我就是使用了七牛的表单上传。</p>","more":"<h2 id=\"表单上传\"><a href=\"#表单上传\" class=\"headerlink\" title=\"表单上传\"></a>表单上传</h2><p>用户上传图片的HTML表单代码如下。其中key用来指定图片保存在七牛中的文件名，token是上传凭证，即用来验证合法性和设置返回信息的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">upload.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://upload.qiniu.com/\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"key\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"token\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>跳转到上面HTML页面的视图函数中的关键代码如下。其中upload_token函数用于生成表单里的token字段，upload_token函数中的7200代表上传凭证的有效期，returnUrl表示上传成功后的重定向地址，returnBody表示重定向时七牛返回的信息，它是一个base64编码后的json数据，需要解码获取json数据，当上传出错时错误信息直接在url中以明文的形式出现，并不会在返回的json数据里。通过设置mimeLimit还可以限制上传文件的类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">views.py</div><div class=\"line\"><span class=\"keyword\">import</span> qiniu</div><div class=\"line\"><span class=\"keyword\">import</span> uuid</div><div class=\"line\">ACCESS_KEY = <span class=\"string\">'七牛分配的公钥'</span></div><div class=\"line\">SECRET_KEY = <span class=\"string\">'七牛分配的私钥'</span></div><div class=\"line\">BUCKET_NAME = <span class=\"string\">'保存文件的仓库名'</span></div><div class=\"line\">key = str(uuid.uuid1()).replace(<span class=\"string\">'-'</span>, <span class=\"string\">''</span>)  <span class=\"comment\"># 这里使用uuid作为保存在七牛里文件的名字。并去掉了uuid中的“-”</span></div><div class=\"line\">q = qiniu.Auth(ACCESS_KEY, SECRET_KEY)</div><div class=\"line\">token = q.upload_token(BUCKET_NAME, key, <span class=\"number\">7200</span>, &#123;<span class=\"string\">'returnUrl'</span>:<span class=\"string\">'http://127.0.0.1:8000/photos/uploadprocessor'</span>, <span class=\"string\">'returnBody'</span>: <span class=\"string\">'&#123;\"name\": $(fname), \"key\": $(key)&#125;'</span>, <span class=\"string\">'mimeLimit'</span>:<span class=\"string\">'image/jpeg;image/png'</span>&#125;)</div><div class=\"line\"><span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'photos/upload.html'</span>, &#123;<span class=\"string\">'token'</span>: token, <span class=\"string\">'key'</span>: key&#125;, context_instance=RequestContext(request))</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0d70lz10005ckmldspbvu9m","category_id":"cj0d70lyw0003ckmlyeovawii","_id":"cj0d70lzg0009ckml6wjj5lfh"},{"post_id":"cj0d70lyr0000ckmlefxvuob5","category_id":"cj0d70lyw0003ckmlyeovawii","_id":"cj0d70lzj000cckmla8qqfhh3"},{"post_id":"cj0d70lz40006ckmlk9hmoh6h","category_id":"cj0d70lyw0003ckmlyeovawii","_id":"cj0d70lzl000eckmljk2qas4m"},{"post_id":"cj0d70lz60008ckmlygys8ckr","category_id":"cj0d70lyw0003ckmlyeovawii","_id":"cj0d70lzl000gckmlvfxwoqjq"},{"post_id":"cj0d70lyw0002ckml7wzb9evi","category_id":"cj0d70lyw0003ckmlyeovawii","_id":"cj0d70lzl000hckml2jiev119"},{"post_id":"cj0d70lyz0004ckmlz2ckl14j","category_id":"cj0d70lzj000bckmlungq41gi","_id":"cj0d70lzo000jckmllnoh05a1"},{"post_id":"cj0d70lzj000ackml6wyd9uwl","category_id":"cj0d70lzl000fckmlgdp126ni","_id":"cj0d70lzo000kckmlr4pm7xo5"}],"PostTag":[{"post_id":"cj0d70lzj000ackml6wyd9uwl","tag_id":"cj0d70lzl000dckmlpsrb49gg","_id":"cj0d70lzl000ickmlk2acbt8r"}],"Tag":[{"name":"python","_id":"cj0d70lzl000dckmlpsrb49gg"}]}}